[{"title":"Html标签默认属性样式及浏览器默认样式","url":"/2020/03/14/Html标签默认属性样式及浏览器默认样式/","content":"\n# html标签默认属性样式及浏览器默认样式\n\n## 具有默认样式的html标签\n\n| html     | address | blockquote |\n| -------- | ------- | ---------- |\n| body     | dd      | div        |\n| dl       | dt      | fieldset   |\n| form     | frame   | frameset   |\n| h1       | h2      | H3         |\n| h4       | h5      | h6         |\n| noframes | ol      | p          |\n| ul       | center  | dir        |\n| hr       | menu    | pre        |\n\n以上列表元素默认状态下以块状显示，未显示的将以内联元素显示，该列表针对HTML4版本，部分元素在XHTML1中将废弃\n\n```css\nli {display: list-item }`/*默认以列表显示*/`\nhead {display: none }/*默认不显示*/\ntable {display: table }/*默认为表格显示*/\ntr {display: table-row }/*默认为表格行显示*/\nthead {display: table-header-group }/*默认为表格头部分组显示*/\ntbody {display: table-row-group }/*默认为表格行分组显示*/\ntfoot {display: table-footer-group }/*默认为表格底部分组显示*/\ncol {display: table-column }/*默认为表格列显示*/\ncolgroup {display: table-column-group }/*默认为表格列分组显示*/\ntd, th { display:table-cell; }/*默认为单元格显示*/\ncaption {display: table-caption }/*默认为表格标题显示*/\nth {font-weight: bolder; text-align: center }/*默认为表格标题显示，呈现加粗居中状态*/\ncaption {text-align: center }/*默认为表格标题显示，呈现居中状态*/\nbody {margin: 8px; line-height: 1.12 }\nh1 {font-size: 2em; margin: .67em 0 }\nh2 {font-size: 1.5em; margin: .75em 0 }\nh3 {font-size: 1.17em; margin: .83em 0 }\nh4, p,blockquote, ul, fieldset, form, ol, dl, dir, menu { margin: 1.12em 0 }\nh5 {font-size: .83em; margin: 1.5em 0 }\nh6 {font-size: .75em; margin: 1.67em 0 }\nh1, h2,h3, h4, h5, h6, b,strong { font-weight: bolder }\nblockquote{ margin-left: 40px; margin-right: 40px }\ni, cite,em,var, address { font-style: italic }\npre, tt,code, kbd, samp { font-family: monospace }\npre {white-space: pre }\nbutton,textarea, input, object, select { display:inline-block; }\nbig {font-size: 1.17em }\nsmall,sub, sup { font-size: .83em }\nsub {vertical-align: sub }/*定义sub元素默认为下标显示*/\nsup {vertical-align: super }/*定义sub元素默认为上标显示*/\ntable {border-spacing: 2px; }\nthead,tbody, tfoot { vertical-align: middle }/*定义表头、主体表、表脚元素默认为垂直对齐*/\ntd, th {vertical-align: inherit }/*定义单元格、列标题默认为垂直对齐默认为继承*/\ns, strike,del { text-decoration: line-through }/*定义这些元素默认为删除线显示*/\nhr {border: 1px inset }/*定义分割线默认为1px宽的3D凹边效果*/\nol, ul,dir, menu, dd { margin-left: 40px }\nol {list-style-type: decimal }\nol ul, ulol, ul ul, ol ol { margin-top: 0; margin-bottom: 0 }\nu, ins {text-decoration: underline }\nbr:before{ content: \"\"A\" }/*定义换行元素的伪对象内容样式*/\n```\n\n```css\n:before,:after { white-space: pre-line }/*定义伪对象空格字符的默认样式*/\ncenter {text-align: center }\nabbr,acronym { font-variant: small-caps; letter-spacing: 0.1em }\n:link,:visited { text-decoration: underline }\n:focus {outline: thin dotted invert }\n/* Beginbidirectionality settings (do not change) */\nBDO[DIR=\"ltr\"]{ direction: ltr; unicode-bidi: bidi-override }/*定义BDO元素当其属性为DIR=\"ltr\"时的默认文本读写显示顺序*/\nBDO[DIR=\"rtl\"]{ direction: rtl; unicode-bidi: bidi-override }/*定义BDO元素当其属性为DIR=\"rtl\"时的默认文本读写显示顺序*/\n*[DIR=\"ltr\"]{ direction: ltr; unicode-bidi: embed }/*定义任何元素当其属性为DIR=\"ltr\"时的默认文本读写显示顺序*/\n*[DIR=\"rtl\"]{ direction: rtl; unicode-bidi: embed }/*定义任何元素当其属性为DIR=\"rtl\"时的默认文本读写显示顺序*/\n@mediaprint { /*定义标题和列表默认的打印样式*/\nh1 {page-break-before: always }\nh1, h2,h3, h4, h5, h6 { page-break-after: avoid }\nul, ol, dl{ page-break-before: avoid }\n}\n```\n\n## **浏览器默认样式**\n\n###页边距 \n\n* IE默认为10px，通过body的margin属性设置 \n* FF默认为8px，通过body的padding属性设置 \n\n要清除页边距一定要清除这两个属性值 \n\n```css\nbody {\n  margin:0;\n  padding:0;\n}\n```\n\n### 段间距 \n\n* IE默认为19px，通过p的margin-top属性设置 \n* FF默认为1.12em，通过p的margin-bottom属性设 \n\np默认为块状显示，要清除段间距，一般可以设置 \n\n```css\np {\n  margin-top:0;\n  margin-bottom:0;\n}\n```\n\n### 标题样式 \n\nh1~h6默认加粗显示：font-weight:bold;。 \n默认大小请参上表 \n\n```css\nh1{font-size:xx-large;}\nh2{font-size:x-large;}\nh3{font-size:large;}\nh4{font-size:medium;}\nh5{font-size:small;}\nh6{font-size:x-small;}\n```\n\n各大浏览器默认字体大小为16px，即等于medium，h1~h6元素默认以块状显示字体显示为粗体， \n要清除标题样式，一般可以设置 \n\n```css\nhx {\n  font-weight:normal;\n  font-size:value;\n}\n```\n\n### 列表样式 \n\n* IE默认为40px，通过ul、ol的margin属性设置 \n* FF默认为40px，通过ul、ol的padding属性设置 \n\ndl无缩进，但起内部的说明元素dd默认缩进40px，而名称元素dt没有缩进。 \n要清除列表样式，一般可以设置 \n\n```css\nul, ol, dd{\n  list-style-type:none;/*清楚列表样式符*/\n  margin-left:0;/*清楚IE左缩进*/\n  padding-left:0;/*清楚非IE左缩进*/\n}\n```\n\n### 元素居中 \n\n* IE默认为text-align:center; \n* FF默认为margin-left:auto;margin-right:auto; \n\n### 超链接样式 \n\na 样式默认带有下划线，显示颜色为蓝色，被访问过的超链接变紫色，要清除链接样式，一般可以设置 \n代码如下:\n\n```css\na {\n  text-decoration:none;\n  color:#colorname;\n}\n```\n\n### 鼠标样式 \n\n* IE默认为cursor:hand; \n* FF默认为cursor:pointer;。该声明在IE中也有效 \n\n### 图片链接样式 \n\n* IE默认为紫色2px的边框线 \n* FF默认为蓝色2px的边框线 \n\n要清除图片链接样式，一般可以设置\n\n```css\nimg {\n  border:0;\n}\n```\n\n","tags":["HTML"],"categories":["HTML"]},{"title":"CSS viewport","url":"/2020/03/05/CSS viewport/","content":"\n#viewport\n\n## 页面适配的标签viewport这个标签是什么作用？meta几个属性都是什么含义？user-scanl=no不生效时，用js怎么控制达到禁止缩放的效果？\n\n### viewport meta的背景\n\n浏览器的 [viewport](https://developer.mozilla.org/en-US/docs/Glossary/viewport) 是可以看到Web内容的窗口区域，通常与渲染出的页面的大小不同，这种情况下，浏览器会提供滚动条以滚动访问所有内容。\n\n窄屏幕设备（如移动设备）在一个虚拟窗口或视口中渲染页面，这个窗口或视口通常比屏幕宽；然后缩小渲染的结果，以便在一屏内显示所有内容。然后用户可以移动、缩放以查看页面的不同区域。例如，如果移动屏幕的宽度为640px，则可能会用980px的虚拟视口渲染页面，然后缩小页面以适应640px的窗口大小。\n\n这样做是因为许多页面没有做移动端优化，在小窗口渲染时会乱掉（或看起来乱）。所以，这种虚拟视口是一种让未做移动端优化的网站在窄屏设备上看起来更好的办法。\n\n但是，对于用媒体查询针对窄屏幕做了优化的页面，这种机制不大好 - 比如如果虚拟视口宽 980px，那么在 640px 或 480px 或更小宽度要起作用的媒体查询就不会触发了，浪费了这些响应式设计。\n\n为了缓解这个问题，Apple 在 Safari iOS 中引入了“viewport meta 标签”，**让Web开发人员控制视口的大小和比例。**很多其他移动浏览器现在也支持此标签，但它不属于 Web 标准。\n\n### viewport meta 标签的概念\n\n移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。\n\n### **css中的1px并不等于设备的1px**\n\n 在css中我们一般使用px作为单位，在桌面浏览器中css的1个像素往往都是对应着电脑屏幕的1个物理像素，但在移动设备上，在早先的移动设备中，屏幕像素密度都比较低，如iphone3，它的分辨率为320x480，在iphone3上，一个css像素确实是等于一个屏幕物理像素的。后来随着技术的发展，移动设备的屏幕像素密度越来越高，从iphone4开始，苹果公司便推出了所谓的Retina屏，分辨率提高了一倍，变成640x960，但屏幕尺寸却没变化，这就意味着同样大小的屏幕上，像素却多了一倍，这时，一个css像素是等于两个物理像素的。其他品牌的移动设备也是这个道理。例如安卓设备根据屏幕像素密度可分为ldpi、mdpi、hdpi、xhdpi等不同的等级，分辨率也是五花八门，安卓设备上的一个css像素相当于多少个屏幕物理像素，也因设备的不同而不同，没有一个定论。\n\n 还有一个因素也会引起css中px的变化，那就是用户缩放。例如，当用户把页面放大一倍，那么css中1px所代表的物理像素也会增加一倍；反之把页面缩小一倍，css中1px所代表的物理像素也会减少一倍。\n\nwindow对象有一个devicePixelRatio属性，它的官方的定义为：设备物理像素和设备独立像素的比例，也就是 devicePixelRatio = 物理像素 / 独立像素。\n\n例如，在Retina屏的iphone上，devicePixelRatio的值为2，也就是说1个css像素相当于2个物理像素。\n\n### 三个viewport\n\n这些浏览器就决定默认情况下把viewport设为一个较宽的值，比如980px，这样的话即使是那些为桌面设计的网站也能在移动浏览器上正常显示了。ppk把这个浏览器默认的viewport叫做 ***layout viewport**。****layout viewport*** 的宽度是大于浏览器可视区域的宽度的，所以我们还需要一个viewport来代表 浏览器可视区域的大小，ppk把这个viewport叫做 **visual viewport**。visual viewport的宽度可以通过window.innerWidth 来获取，但在Android 2, Oprea mini 和 UC 8中无法正确获取。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5puat7yj30dt0ai0t9.jpg)\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5qah7plj30dw0ahjrw.jpg)\n\n 完美适配指的是，首先不需要用户缩放和横向滚动条就能正常的查看网站的所有内容；第二，显示的文字的大小是合适；不只是文字，其他元素像图片什么的也是这个道理ppk把这个viewport叫做 ***ideal viewport***，也就是第三个viewport——移动设备的理想viewport。\n\n ideal viewport并没有一个固定的尺寸，不同的设备拥有有不同的ideal viewport。所有的iphone的ideal viewport宽度都是320px，无论它的屏幕宽度是320还是640，也就是说，在iphone中，css中的320px就代表iphone屏幕的宽度。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5rjwmr1j307i05wq2s.jpg)![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5s6pthkj307p05w3yc.jpg)\n\n但是安卓设备就比较复杂了，有320px的，有360px的，有384px的等等，关于不同的设备ideal viewport的宽度都为多少，可以到[http://viewportsizes.com](http://viewportsizes.com/)去查看一下，里面收集了众多设备的理想宽度。\n\n### **利用meta标签对viewport进行控制**\n\n 移动设备默认的viewport是layout viewport，也就是那个比屏幕要宽的viewport，但在进行移动设备网站的开发时，我们需要的是ideal viewport。\n\n我们在开发移动设备的网站时，最常见的的一个动作就是把下面这个东西复制到我们的head标签中：\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\">\n```\n\n该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。\n\nmeta viewport 标签首先是由苹果公司在其safari浏览器中引入的，目的就是解决移动设备的viewport问题。后来安卓以及各大浏览器厂商也都纷纷效仿，引入对meta viewport的支持，事实也证明这个东西还是非常有用的。\n\n#### meta viewport 有6个属性(暂且把content中的那些东西称为一个个属性和值)，如下：\n\n| 属性          | 作用                                                         |\n| ------------- | ------------------------------------------------------------ |\n| width         | 设置***layout viewport***  的宽度，为一个正整数，或字符串\"device-width\" |\n| initial-scale | 设置页面的初始缩放值，为一个数字，可以带小数（缩放是相对于 ideal viewport来进行缩放的） |\n| minimum-scale | 允许用户的最小缩放值，为一个数字，可以带小数                 |\n| maximum-scale | 允许用户的最大缩放值，为一个数字，可以带小数                 |\n| height        | 设置***layout viewport***  的高度，这个属性对我们并不重要，很少使用 |\n| user-scalable | 是否允许用户进行缩放，值为\"no\"或\"yes\", no 代表不允许，yes代表允许 |\n\n- `width`**设为`device-width` 特殊值，代表缩放为 100% 时以 CSS 像素计量的屏幕宽度**。（相应的也有`height`及`device-height`属性，可能对包含基于视口高度调整大小及位置的元素的页面有用。）\n\n  注意的是，在iphone和ipad上，无论是竖屏还是横屏，宽度都是竖屏时ideal viewport的宽度。\n\n- 对于设置了初始或最大缩放的页面，width属性实际上变成了**最小**视口宽度。比如，如果你的布局需要至少500像素的宽度，那么你可以使用以下标记。当屏幕宽度大于500像素时，浏览器会扩展视口（而不是放大页面）来适应屏幕：\n\n- ```html\n  <meta name=\"viewport\" content=\"width=500, initial-scale=1\">\n  ```\n\n  当遇到这种情况时，浏览器会取它们两个中较大的那个值。例如，当width=400，ideal viewport的宽度为320时，取的是400；当width=400， ideal viewport的宽度为480时，取的是ideal viewport的宽度。\n\n- 在安卓中还支持  target-densitydpi  这个私有属性，它表示目标设备的密度等级，作用是决定css中的1px代表多少物理像素\n\n  target-densitydpi：值可以为一个数值或 high-dpi 、 medium-dpi、 low-dpi、 device-dpi 这几个字符串中的一个\n\n  特别说明的是，当 target-densitydpi=device-dpi 时， css中的1px会等于物理像素中的1px。\n\n  因为这个属性只有安卓支持，并且安卓已经决定要废弃~~target-densitydpi~~  这个属性了，所以这个属性我们要避免进行使用  \n\n### 关于缩放\n\n缩放是相对于ideal viewport来缩放的，缩放值越大，当前viewport的宽度就会越小，反之亦然。例如在iphone中，ideal viewport的宽度是320px，如果我们设置 initial-scale=2 ，此时viewport的宽度会变为只有160px了，这也好理解，放大了一倍嘛，就是原来1px的东西变成2px了，但是1px变为2px并不是把原来的320px变为640px了，而是在实际宽度不变的情况下，1px变得跟原来的2px的长度一样了，所以放大2倍后原来需要320px才能填满的宽度现在只需要160px就做到了。因此，我们可以得出一个公式：\n\n```json\nvisual viewport宽度 = ideal viewport宽度  / 当前缩放值\n\n当前缩放值 = ideal viewport宽度  / visual viewport宽度\n```\n\n根据测试，我们可以在iphone和ipad上得到一个结论，就是无论你给layout viewpor设置的宽度是多少，而又没有指定初始的缩放值的话，那么iphone和ipad会自动计算initial-scale这个值，以保证当前layout viewport的宽度在缩放后就是浏览器可视区域的宽度，也就是说不会出现横向滚动条。\n\n当前缩放值 = ideal viewport宽度  / visual viewport宽度，我们可以得出：\n\n​      当前缩放值 = 320 / 980\n\n也就是当前的initial-scale默认值应该是 0.33这样子。当你指定了initial-scale的值后，这个默认值就不起作用了。\n\n**在iphone和ipad上，无论你给viewport设的宽的是多少，如果没有指定默认的缩放值，则iphone和ipad会自动计算这个缩放值，以达到当前页面不会出现横向滚动条(或者说viewport的宽度就是屏幕的宽度)的目的。**\n\n### js事件监听阻止用户缩放\n\n移动端web缩放有两种：\n\n**1.双击缩放；**\n\n**2.双指手势缩放。**\n\n- 禁止双击缩放\n\n```javascript\nwindow.οnlοad=function () {         \n\tdocument.addEventListener('touchstart',function (event) {\n    if(event.touches.length>1){\n      event.preventDefault();\n    }\n  })  \n  var lastTouchEnd=0;  \n  document.addEventListener('touchend',function (event) {  \n    var now=(new Date()).getTime();  \n    if(now-lastTouchEnd<=300){  \n      event.preventDefault();  \n    }  \n    lastTouchEnd=now;  \n  },false)  \n}\n```\n\n- 完美方案\n\n```html\n<script>\n  window.onload=function () {\n    document.addEventListener('touchstart',function (event) {\n      if(event.touches.length>1){\n        event.preventDefault();\n      }\n    });\n    var lastTouchEnd=0;\n    document.addEventListener('touchend',function (event) {\n      var now=(new Date()).getTime();\n      if(now-lastTouchEnd<=300){\n        event.preventDefault();\n      }\n      lastTouchEnd=now;\n    },false);\n    //依然存在bug，双指同时放下放大禁止了，但一指先放下，另一指在放下滑动放大依然不管用\n    document.addEventListener('gesturestart', function (event) {\n      event.preventDefault();\n    });\n  }\n</script>\n```\n\n","tags":["CSS","viewport"],"categories":["CSS"]},{"title":"Vue组件间的通信","url":"/2020/02/26/Vue组件间的通信/","content":"\n# vue组件间的通信\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tg3703qaj309t07ujr9.jpg)\n\n如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。\n\n## `props`/`$emit`\n\n父组件A通过props的方式向子组件B传递，B to A 通过在 B 组件中 $emit, A 组件中 v-on 的方式实现。\n\n### 1.父组件向子组件传值\n\n接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件Users.vue中如何获取父组件App.vue中的数据 `users:[\"Henry\",\"Bucky\",\"Emily\"]`\n\n```vue\n//App.vue父组件\n<template>\n  <div id=\"app\">\n    <users v-bind:users=\"users\"></users>//前者自定义名称便于子组件调用，后者要传递数据名\n  </div>\n</template>\n<script>\nimport Users from \"./components/Users\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      users:[\"Henry\",\"Bucky\",\"Emily\"]\n    }\n  },\n  components:{\n    \"users\":Users\n  }\n}\n```\n\n```vue\n//users子组件\n<template>\n  <div class=\"hello\">\n    <ul>\n      <li v-for=\"user in users\">{{user}}</li>//遍历传递过来的值，然后呈现到页面\n    </ul>\n  </div>\n</template>\n<script>\nexport default {\n  name: 'HelloWorld',\n  props:{\n    users:{           //这个就是父组件中子标签自定义名字\n      type:Array,\n      required:true\n    }\n  }\n}\n</script>\n```\n\n**总结：父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed**\n\n### 2.子组件向父组件传值（通过事件形式）\n\n接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击“Vue.js Demo”后，子组件向父组件传递值，文字由原来的“传递的是一个值”变成“子向父组件传值”，实现子组件向父组件值的传递。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tg6j35buj30yg046q33.jpg)\n\n```vue\n// 子组件\n<template>\n  <header>\n    <h1 @click=\"changeTitle\">{{title}}</h1>//绑定一个点击事件\n  </header>\n</template>\n<script>\nexport default {\n  name: 'app-header',\n  data() {\n    return {\n      title:\"Vue.js Demo\"\n    }\n  },\n  methods:{\n    changeTitle() {\n      this.$emit(\"titleChanged\",\"子向父组件传值\");//自定义事件  传递值“子向父组件传值”\n    }\n  }\n}\n</script>\n// 父组件\n<template>\n  <div id=\"app\">\n    <app-header v-on:titleChanged=\"updateTitle\" ></app-header>//与子组件titleChanged自定义事件保持一致\n   // updateTitle($event)接受传递过来的文字\n    <h2>{{title}}</h2>\n  </div>\n</template>\n<script>\nimport Header from \"./components/Header\"\nexport default {\n  name: 'App',\n  data(){\n    return{\n      title:\"传递的是一个值\"\n    }\n  },\n  methods:{\n    updateTitle(e){   //声明这个函数\n      this.title = e;\n    }\n  },\n  components:{\n   \"app-header\":Header,\n  }\n}\n</script>\n```\n\n**总结：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。**\n\n## `$emit`/`$on`\n\n**这种方法通过一个空的Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件,巧妙而轻量地实现了任何组件间的通信，包括父子、兄弟、跨级**。当我们的项目比较大时，可以选择更好的状态管理解决方案vuex。\n\n### 1.具体实现方式：\n\n```vue\n    var Event=new Vue();\n    Event.$emit(事件名,数据);\n    Event.$on(事件名,data => {});\n```\n\n### 2.举个例子\n\n假设兄弟组件有三个，分别是A、B、C组件，C组件如何获取A或者B组件的数据\n\n```vue\n<div id=\"itany\">\n\t<my-a></my-a>\n\t<my-b></my-b>\n\t<my-c></my-c>\n</div>\n<template id=\"a\">\n  <div>\n    <h3>A组件：{{name}}</h3>\n    <button @click=\"send\">将数据发送给C组件</button>\n  </div>\n</template>\n<template id=\"b\">\n  <div>\n    <h3>B组件：{{age}}</h3>\n    <button @click=\"send\">将数组发送给C组件</button>\n  </div>\n</template>\n<template id=\"c\">\n  <div>\n    <h3>C组件：{{name}}，{{age}}</h3>\n  </div>\n</template>\n<script>\nvar Event = new Vue();//定义一个空的Vue实例\nvar A = {\n\ttemplate: '#a',\n\tdata() {\n\t  return {\n\t    name: 'tom'\n\t  }\n\t},\n\tmethods: {\n\t  send() {\n\t    Event.$emit('data-a', this.name);\n\t  }\n\t}\n}\nvar B = {\n\ttemplate: '#b',\n\tdata() {\n\t  return {\n\t    age: 20\n\t  }\n\t},\n\tmethods: {\n\t  send() {\n\t    Event.$emit('data-b', this.age);\n\t  }\n\t}\n}\nvar C = {\n\ttemplate: '#c',\n\tdata() {\n\t  return {\n\t    name: '',\n\t    age: \"\"\n\t  }\n\t},\n\tmounted() {//在模板编译完成后执行\n\t Event.$on('data-a',name => {\n\t     this.name = name;//箭头函数内部不会产生新的this，这边如果不用=>,this指代Event\n\t })\n\t Event.$on('data-b',age => {\n\t     this.age = age;\n\t })\n\t}\n}\nvar vm = new Vue({\n\tel: '#itany',\n\tcomponents: {\n\t  'my-a': A,\n\t  'my-b': B,\n\t  'my-c': C\n\t}\n});\t\n</script>\n```\n\n[![image](https://camo.githubusercontent.com/e5ab7d4be1d7178cfa8f1da5f208ec786f277916/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d363637373530316461393030366564323f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970)](https://camo.githubusercontent.com/e5ab7d4be1d7178cfa8f1da5f208ec786f277916/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d363637373530316461393030366564323f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970)\n`$on` 监听了自定义事件 data-a和data-b，因为有时不确定何时会触发事件，一般会在 mounted 或 created 钩子中来监听。\n\n## vuex\n\n[![image](https://camo.githubusercontent.com/1cb690c2b97cfff1434956e5d66bab39673d84dc/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d653632626134343961306332653761633f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430)](https://camo.githubusercontent.com/1cb690c2b97cfff1434956e5d66bab39673d84dc/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f333137343730312d653632626134343961306332653761633f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430)\n\n### 1.简要介绍Vuex原理\n\nVuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。\n\n### 2.简要介绍各模块在流程中的功能：\n\n- Vue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。\n- dispatch：操作行为触发方法，是唯一能执行action的方法。\n- actions：**操作行为处理模块,由组件中的$store.dispatch('action 名称', data1)来触发。然后由commit()来触发mutation的调用 , 间接更新 state**。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。\n- commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。\n- mutations：**状态改变操作方法，由actions中的commit('mutation 名称')来触发**。是Vuex修改state的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。\n- state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。\n- getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。\n\n### 3.Vuex与localStorage\n\nvuex 是 vue 的状态管理器，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，**具体做法应该在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来再替换store里的state。**\n\n```javascript\nlet defaultCity = \"上海\"\ntry {   // 用户关闭了本地存储功能，此时在外层加个try...catch\n  if (!defaultCity){\n    defaultCity = JSON.parse(window.localStorage.getItem('defaultCity'))\n  }\n}catch(e){}\nexport default new Vuex.Store({\n  state: {\n    city: defaultCity\n  },\n  mutations: {\n    changeCity(state, city) {\n      state.city = city\n      try {\n      window.localStorage.setItem('defaultCity', JSON.stringify(state.city));\n      // 数据改变的时候把数据拷贝一份保存到localStorage里面\n      } catch (e) {}\n    }\n  }\n})\n```\n\n这里需要注意的是：由于vuex里，我们保存的状态，都是数组，而localStorage只支持字符串，所以需要用JSON转换：\n\n```javascript\nJSON.stringify(state.subscribeList);   // array -> string\nJSON.parse(window.localStorage.getItem(\"subscribeList\"));    // string -> array \n```\n\n##`$attrs`/`$listeners`\n\n多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此Vue2.4 版本提供了另一种方法----`$attrs`/`$listeners`\n\n- `$attrs`：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=\"$attrs\" 传入内部组件。通常配合 inheritAttrs 选项一起使用。\n- `$listeners`：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=\"$listeners\" 传入内部组件\n\n接下来我们看个跨级通信的例子：\n\n```vue\n// index.vue\n<template>\n  <div>\n    <h2>浪里行舟</h2>\n    <child-com1\n      :foo=\"foo\"\n      :boo=\"boo\"\n      :coo=\"coo\"\n      :doo=\"doo\"\n      title=\"前端工匠\"\n    ></child-com1>\n  </div>\n</template>\n<script>\nconst childCom1 = () => import(\"./childCom1.vue\");\nexport default {\n  components: { childCom1 },\n  data() {\n    return {\n      foo: \"Javascript\",\n      boo: \"Html\",\n      coo: \"CSS\",\n      doo: \"Vue\"\n    };\n  }\n};\n</script>\n// childCom1.vue\n<template class=\"border\">\n  <div>\n    <p>foo: {{ foo }}</p>\n    <p>childCom1的$attrs: {{ $attrs }}</p>\n    <child-com2 v-bind=\"$attrs\"></child-com2>\n  </div>\n</template>\n<script>\nconst childCom2 = () => import(\"./childCom2.vue\");\nexport default {\n  components: {\n    childCom2\n  },\n  inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n  props: {\n    foo: String // foo作为props属性绑定\n  },\n  created() {\n    console.log(this.$attrs); // { \"boo\": \"Html\", \"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" }\n  }\n};\n</script>\n// childCom2.vue\n<template>\n  <div class=\"border\">\n    <p>boo: {{ boo }}</p>\n    <p>childCom2: {{ $attrs }}</p>\n    <child-com3 v-bind=\"$attrs\"></child-com3>\n  </div>\n</template>\n<script>\nconst childCom3 = () => import(\"./childCom3.vue\");\nexport default {\n  components: {\n    childCom3\n  },\n  inheritAttrs: false,\n  props: {\n    boo: String\n  },\n  created() {\n    console.log(this.$attrs); // { \"coo\": \"CSS\", \"doo\": \"Vue\", \"title\": \"前端工匠\" }\n  }\n};\n</script>\n// childCom3.vue\n<template>\n  <div class=\"border\">\n    <p>childCom3: {{ $attrs }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    coo: String,\n    title: String\n  }\n};\n</script>\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tgffgg8oj30ft06bglo.jpg)\n\n如上图所示`$attrs`表示没有继承数据的对象，格式为{属性名：属性值}。Vue2.4提供了`$attrs` , `$listeners` 来传递数据与事件，跨级组件之间的通讯变得更简单。\n\n简单来说：`$attrs`与`$listeners` 是两个对象，`$attrs` 里存放的是父组件中绑定的非 Props 属性，`$listeners`里存放的是父组件中绑定的非原生事件。\n\n##provide/inject\n\n### 1.简介\n\nVue2.2.0新增API,这对选项需要一起使用，**以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效**。一言而蔽之：祖先组件中通过provider来提供变量，然后在子孙组件中通过inject来注入变量。\n**provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系**。\n\n### 2.举个例子\n\n假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件\n\n```javascript\n// A.vue\nexport default {\n  provide: {\n    name: '浪里行舟'\n  }\n}\n// B.vue\nexport default {\n  inject: ['name'],\n  mounted () {\n    console.log(this.name);  // 浪里行舟\n  }\n}\n```\n\n可以看到，在 A.vue 里，我们设置了一个 **provide: name**，值为 浪里行舟，它的作用就是将 **name** 这个变量提供给它的所有子组件。而在 B.vue 中，通过 `inject` 注入了从 A 组件中提供的 **name** 变量，那么在组件 B 中，就可以直接通过 **this.name** 访问这个变量了，它的值也是 浪里行舟。这就是 provide / inject API 最核心的用法。\n\n需要注意的是：**provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的**----vue官方文档\n所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 浪里行舟。\n\n### 3.provide与inject 怎么实现数据响应式\n\n一般来说，有两种办法：\n\n- provide祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如props，methods\n- 使用2.6最新API Vue.observable 优化响应式 provide(推荐)\n\n我们来看个例子：孙组件D、E和F获取A组件传递过来的color值，并能实现数据响应式变化，即A组件的color变化后，组件D、E、F会跟着变（核心代码如下：）\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tgjlms01j30eo09owes.jpg)\n\n```vue\n// A 组件 \n<div>\n      <h1>A 组件</h1>\n      <button @click=\"() => changeColor()\">改变color</button>\n      <ChildrenB />\n      <ChildrenC />\n</div>\n......\n  data() {\n    return {\n      color: \"blue\"\n    };\n  },\n  // provide() {\n  //   return {\n  //     theme: {\n  //       color: this.color //这种方式绑定的数据并不是可响应的\n  //     } // 即A组件的color变化后，组件D、E、F不会跟着变\n  //   };\n  // },\n  provide() {\n    return {\n      theme: this//方法一：提供祖先组件的实例\n    };\n  },\n  methods: {\n    changeColor(color) {\n      if (color) {\n        this.color = color;\n      } else {\n        this.color = this.color === \"blue\" ? \"red\" : \"blue\";\n      }\n    }\n  }\n  // 方法二:使用2.6最新API Vue.observable 优化响应式 provide\n  // provide() {\n  //   this.theme = Vue.observable({\n  //     color: \"blue\"\n  //   });\n  //   return {\n  //     theme: this.theme\n  //   };\n  // },\n  // methods: {\n  //   changeColor(color) {\n  //     if (color) {\n  //       this.theme.color = color;\n  //     } else {\n  //       this.theme.color = this.theme.color === \"blue\" ? \"red\" : \"blue\";\n  //     }\n  //   }\n  // }\n// F 组件 \n<template functional>\n  <div class=\"border2\">\n    <h3 :style=\"{ color: injections.theme.color }\">F 组件</h3>\n  </div>\n</template>\n<script>\nexport default {\n  inject: {\n    theme: {\n      //函数式组件取值不一样\n      default: () => ({})\n    }\n  }\n};\n</script>\n```\n\n虽说provide 和 inject 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！\n\n## `$parent` / `$children`与 `ref`\n\n- `ref`：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\n- `$parent` / `$children`：访问父 / 子实例\n\n需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 `ref`来访问组件的例子：\n\n```vue\n// component-a 子组件\nexport default {\n  data () {\n    return {\n      title: 'Vue.js'\n    }\n  },\n  methods: {\n    sayHello () {\n      window.alert('Hello');\n    }\n  }\n}\n// 父组件\n<template>\n  <component-a ref=\"comA\"></component-a>\n</template>\n<script>\n  export default {\n    mounted () {\n      const comA = this.$refs.comA;\n      console.log(comA.title);  // Vue.js\n      comA.sayHello();  // 弹窗\n    }\n  }\n</script>\n```\n\n不过，**这两种方法的弊端是，无法在跨级或兄弟间通信**。\n\n```vue\n// parent.vue\n<component-a></component-a>\n<component-b></component-b>\n<component-b></component-b>\n```\n\n我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。\n\n##总结\n\n常见使用场景可以分为三类：\n\n- 父子通信：\n  父向子传递数据是通过 props，子向父是通过 events（`$emit`）；通过父链 / 子链也可以通信（`$parent` / `$children`）；ref 也可以访问组件实例；provide / inject API；`$attrs/$listeners`\n- 兄弟通信：\n  Bus；Vuex\n- 跨级通信：\n  Bus；Vuex；provide / inject API、`$attrs/$listeners`","tags":["VUE"],"categories":["VUE"]},{"title":"Vue相关面试题","url":"/2020/02/17/Vue相关面试题/","content":"\n# vue\n\nVue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用[单文件组件](http://link.zhihu.com/?target=http%3A//cn.vuejs.org/v2/guide/single-file-components.html)和 [Vue 生态系统支持的库](http://link.zhihu.com/?target=http%3A//github.com/vuejs/awesome-vue%23libraries--plugins)开发的复杂单页应用。\n\nVue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。\n\n* 响应式编程（双向数据绑定 MVVM）\n* 组件化\n* 模块化（配合 [Webpack](https://link.zhihu.com/?target=http%3A//webpack.github.io/) 或者 [Browserify](https://link.zhihu.com/?target=http%3A//browserify.org/)等打包工具，然后再加上 ES2015。每一个 Vue 组件都可以看做一个独立的模块）\n* 动画（Vue 自带简洁易用的[过渡动画系统](https://link.zhihu.com/?target=http%3A//vuejs.org/guide/transitions.html)。Vue 的反应式系统也使得它可以用来开发高效的数据驱动的逐帧动画。这一类逐帧动画在基于脏检查或是 Virtual DOM 的框架中，往往会导致性能问题，因为即使只是改了一个值，整个所处的子树（scope 或是 component）都需要重新计算。而 Vue 则是改了多少，计算多少，不会有无谓的浪费。在小 demo 中，脏检查或是 Virtual DOM 往往也足够快，但是在大型应用中可就不一定了。）\n* Virtual DOM\n* Vuex\n* Vue-router\n\n## 1. 对于MVVM的理解？\n\nMVVM 是 Model-View-ViewModel 的缩写。 **Model**代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。 **View** 代表UI 组件，它负责将数据模型转化成UI 展现出来。 **ViewModel** 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。 在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。 **ViewModel** 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n###怎么实现MVVM\n\n1. 脏值检查：angularangular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图。\n2. 数据劫持：使用Object.defineProperty()方法把这些vm.data属性全部转成setter、getter方法。\n\n[Vue MVVM的实现(defineProperty)](https://jancat.github.io/post/2019/vue-mvvm/)\n\n[Vue3.0 MVVM的实现(proxy)](https://jancat.github.io/post/2019/vue-mvvm-proxy/)（Vue 3.0 使用了 **Proxy** 后，将会消除之前 Vue 2.x 中基于 `Object.defineProperty` 的实现所存在的一些限制：无法监听 **属性的添加和删除**、**数组索引值和长度的变更**。）\n\n### MVVM 各模块职责\n\n- **MVVM**: Vue 实例初始化，调用 **Observer** 数据劫持，调用 **Compiler** 解析模板；\n- **Observer**: 利用Object.defineProperty数据劫持data全部属性，定义 setter 、getter，添加和通知订阅者；（所以vue不能新增属性必须事先定义，model->vm.data）\n- **Compiler**: 解析模板初始化视图，收集模板中的数据依赖，创建订阅者订阅变化，绑定更新函数；（在文档碎片中操作dom节点，遍历正则匹配替换data属性，view->vm.$el）\n- **Dep**：订阅中心，提供添加、移除、通知订阅的接口；\n- **Watcher**: data 属性的订阅者，收到变化通知后调用更新函数更新视图。\n\n![image-20190709192722478](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5vbvssij31460m4n93.jpg)\n\n###Object.defineProperty() 和 Proxy 实现 MVVM 数据劫持的区别\n\n`Object.defineProperty()` 和 `Proxy` 实现 MVVM 数据劫持的区别是：`Object.defineProperty()` 需要为每个 key 定义 getter 和 setter，也就是需要遍历 `data` 下的全部子属性；而 `Proxy` 只需要为 `data` 本身和内部嵌套的对象创建代理，每个对象统一代理访问内部属性，对外提供代理的引用。\n\n## 2.vue生命周期：\n\n### **1. 在beforeCreate和created钩子函数之间的生命周期**\n\n在这个生命周期之间，进行**初始化事件，进行数据的观测**，可以看到在**created**的时候数据已经和**data属性进行绑定**（放在data中的属性当值发生改变的同时，视图也会改变）。\n注意看下：此时还是没有el选项\n\n组件实例刚刚创建，**还未进行数据观测和事件配置**//这里不要被beforeCreate误导，实际上组件实例已经创建了\n\n### **2. created钩子函数和beforeMount间的生命周期**\n\n实例已经创建完成，并且**已经完成数据观测，属性和方法的运算，watch/event 事件回调。//常用！！！**\n\n首先会判断对象是否有**el选项**。**如果有的话就继续向下编译，如果没有**el选项**，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用vm.$mount(el)。**\n\n然后，我们往下看，**template**参数选项的有无对生命周期的影响。\n（1）.如果vue实例对象中有template参数选项，则将其作为模板编译成render函数。\n（2）.如果没有template选项，则将外部HTML作为模板编译。\n（3）.可以看到template中的模板优先级要高于outer HTML的优先级。\n\n所以综合排名优先级：\nrender函数选项 > template选项 > outer HTML.\n\n### **3. beforeMount和mounted 钩子函数间的生命周期**\n\n可以看到此时是给vue实例对象添加**$el成员**，并且替换掉挂在的DOM元素。因为在之前console中打印的结果可以看到**beforeMount**之前el上还是undefined。\n\n模板编译之前，还没挂载，页面仍未展示，但**虚拟Dom已经配置**//先把坑占住了，到后面mounted挂载的时候再把值渲染进去\n\n### **4. mounted**\n\n模板编译之后，已经挂载，**此时才会渲染页面，才能看到页面上数据的展示//常用！！！**\n\n**注意:** mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 **vm.$nextTick 替换掉 mounted**\n\n在mounted之前h1中还是通过`{{message}}`进行占位的，因为此时还有挂在到页面上，还是JavaScript中的虚拟DOM形式存在的。在mounted之后可以看到h1中的内容发生了变化。\n\nel 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。\n\n### **5. beforeUpdate**（更新前）\n\n在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。 \n\n### **6. updated**（更新后）    \n\n在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。\n\n### **7. beforeDestroy**（销毁前）    \n\n在实例销毁之前调用。实例仍然完全可用。 \n\n### **8. destroyed**（销毁后）    \n\n在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。 \n\n### 关于生命周期的问题：\n\n1.什么是vue生命周期？ 答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。\n\n2.vue生命周期的作用是什么？ 答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。\n\n3.vue生命周期总共有几个阶段？ 答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。\n\n4.第一次页面加载会触发哪几个钩子？ 答：会触发 下面这几个beforeCreate, created, beforeMount, mounted \n\n5.DOM 渲染在 哪个周期中就已经完成？ 答：DOM 渲染在 mounted 中就已经完成了。\n\n## 3.Vue实现数据双向绑定的原理：Object.defineProperty（）\n\nvue实现数据双向绑定主要是：采**用数据劫持结合发布者-订阅者模式**的方式，通过**Object.defineProperty（）**来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。\n\nvue的数据双向绑定 将MVVM作为数据绑定的入口，整合Observer，Compile和Watcher三者，通过Observer来监听自己的model的数据变化，通过Compile来解析编译模板指令（vue中是用来解析双花括号的），最终利用watcher搭起observer和Compile之间的通信桥梁，达到数据变化 —>视图更新；视图交互变化（input）—>数据model变更双向绑定效果。\n\n### 关于Object.defineProperty\n\n- 语法\n\n  `Object.defineProperty(obj,prop,descriptor)`\n\n- 参数\n\n  obj:目标对象\n\n  prop:需要定义的属性或方法的名称\n\n  descriptor:目标属性所拥有的特性\n\n- 可供定义的特性列表\n\n  value:属性的值\n\n  writable:如果为false，属性的值就不能被重写。\n\n  get: 一旦目标属性被访问就会调回此方法，并将此方法的运算结果返回用户。\n\n  set:一旦目标属性被赋值，就会调回此方法。\n\n  configurable:如果为false，则任何尝试删除目标属性或修改属性性以下特性（writable, configurable, enumerable）的行为将被无效化。\n\n  enumerable:是否能在for...in循环中遍历出来或在Object.keys中列举出来。\n\n\n\n**js实现简单的双向绑定**\n\n```html\n<body>\n  <div id=\"app\">\n    <input type=\"text\"id=\"txt\"/>\n    <p id=\"show\"></p>\n  </div>\n</body>\n<script type=\"text/javascript\">\n  \tvar obj = {}\n    Object.defineProperty(obj, 'txt', {\n        get: function () {\n            return obj\n        },\n        set: function (newValue) {\n            document.getElementById('txt').value = newValue\n            document.getElementById('show').innerHTML = newValue\n        }\n    })\n    document.addEventListener('keyup', function (e) {\n        obj.txt = e.target.value\n    })\n</script>\n```\n\n## 4. Vue的路由实现：hash模式 和 history模式\n\n**hash模式：**在浏览器中符号“#”，#以及#后面的字符称之为hash，用window.location.hash读取； 特点：hash虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，hash不会重加载页面。 hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 [www.xxx.com](https://link.juejin.im?target=http%3A%2F%2Fwww.xxx.com)，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。\n\n**history模式：**history采用HTML5的新特性；且提供了两个新方法：pushState（），replaceState（）可以对浏览器历史记录栈进行修改，以及popState事件的监听到状态变更。 history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 [www.xxx.com/items/id](https://link.juejin.im?target=http%3A%2F%2Fwww.xxx.com%2Fitems%2Fid)。后端如果缺少对 /items/id 的路由处理，将返回 404 错误。**Vue-Router 官网里如此描述：**“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”\n\n## 5. Vue与Angular以及React的区别？\n\n**1.与AngularJS的区别** \n\n相同点： 都支持指令：内置指令和自定义指令；都支持过滤器：内置过滤器和自定义过滤器；都支持双向数据绑定；都不支持低端浏览器。\n\n不同点： AngularJS的学习成本高，比如增加了Dependency Injection特性，而Vue.js本身提供的API都比较简单、直观；在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。\n\n**2.与React的区别** （详见vue和react区别）\n\n相同点： \n\n* React采用特殊的JSX语法，Vue.js在组件开发中也推崇编写.vue特殊文件格式，对文件内容都有一些约定，两者都需要编译后使用；\n* 中心思想相同：一切都是组件，组件实例之间可以嵌套；\n* 都提供合理的钩子函数，可以让开发者定制化地去处理需求；\n* 在组件开发中都支持mixins的特性。\n* 使用 Virtual DOM，有自己的diff渲染算法\n* 提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。\n* 将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载。\n\n 不同点：\n\n* React采用的Virtual DOM会对渲染出来的结果做脏检查；在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树。\n\n  如要避免不必要的子组件的重渲染，你需要在所有可能的地方使用 PureComponent，或是手动实现 shouldComponentUpdate 方法。同时你可能会需要使用不可变的数据结构来使得你的组件更容易被优化。\n\n  然而，使用 PureComponent 和 shouldComponentUpdate 时，需要保证该组件的整个子树的渲染输出都是由该组件的 props 所决定的。如果不符合这个情况，那么此类优化就会导致难以察觉的渲染结果不一致。这使得 React 中的组件优化伴随着相当的心智负担。\n\n  在 Vue 应用中，组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染。你可以理解为每一个组件都已经自动获得了 shouldComponentUpdate，并且没有上述的子树问题限制。\n\n* Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。\n\n## 6. vue路由的钩子函数\n\n首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。\n\n**beforeEach**主要有3个参数to，from，next：\n\n**to**：route即将进入的目标路由对象，\n\n**from**：route当前导航正要离开的路由\n\n**next**：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。\n\n##7. vue中常用的指令有哪些？\n\n### 指令\n\n- 解释：指令 (Directives) 是带有 `v-` 前缀的特殊属性\n- 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM\n\n### 常用指令\n\n#### 1.v-text：更新元素的 textContent\n\n```\n<h1 v-text=\"msg\"></h1>\n```\n\n#### 2.v-html：更新元素的 innerHTML\n\n```\n<h1 v-html=\"msg\"></h1>\n```\n\n#### 3.v-bind\n\n- 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM\n- 语法：`v-bind:title=\"msg\"`\n- 简写：`:title=\"msg\"`\n\n```vue\n<!-- 完整语法 -->\n<a v-bind:href=\"url\"></a>\n<!-- 缩写 -->\n<a :href=\"url\"></a>\n<script>\n    // 2 创建 Vue 的实例对象\n    var vm = new Vue({\n      // el 用来指定vue挂载到页面中的元素，值是：选择器\n      // 理解：用来指定vue管理的HTML区域\n      el: '#app',\n      // 数据对象，用来给视图中提供数据的\n      data: {\n        url: 'http://www.baidu.com'\n      }\n    })\n  </script>\n```\n\n#### 4.v-on\n\n- 作用：绑定事件\n- 语法：`v-on:click=\"say\"` or `v-on:click=\"say('参数', $event)\"`\n- 简写：`@click=\"say\"`\n- 说明：绑定的事件从`methods`中获取\n\n```vue\n<!-- 完整语法 -->\n<a v-on:click=\"doSomething\"></a>\n<!-- 缩写 -->\n<a @click=\"doSomething\"></a>\n<!-- 方法传参 -->\n<a @click=\"doSomething（“123”）\"></a>\n\n <script>\n    // 2 创建 Vue 的实例对象\n    var vm = new Vue({\n      el: '#app',\n      // methods属性用来给vue实例提供方法（事件）\n      methods: {\n        doSomething: function(str) {\n          //接受参数，并输出\n          console.log(str);\n        }\n      }\n    })\n  </script>\n```\n\n#### 5.v-model\n\n数据响应，是通过数据的改变去驱动 DOM 视图的变化，而双向绑定除了数据驱动 DOM 外， DOM 的变化反过来影响数据，是一个双向关系，在 Vue 中，我们可以通过 `v-model` 来实现双向绑定。\n\n- 作用：在表单元素上创建双向数据绑定\n- 说明：监听用户的输入事件以更新数据\n\n```vue\n<input v-model=\"message\" placeholder=\"edit me\">\n<p>Message is: {{ message }}</p>\n```\n\n#####v-model只不过是一个语法糖而已,真正的实现靠的还是\n\n* v-bind:绑定响应式数据\n* 触发 input 事件，并传递数据 (重点)\n\n#####v-model 在不同的 HTML 标签上使用会监控不同的属性和抛出不同的事件：\n\n- text 和 textarea 元素使用 `value` 属性和 `input` 事件；\n- checkbox 和 radio 使用 `checked` 属性和 `change` 事件；\n- select 字段将 `value` 作为 prop 并将 `change` 作为事件。\n\n[v-model源码分析]([https://ustbhuangyi.github.io/vue-analysis/extend/v-model.html#%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0](https://ustbhuangyi.github.io/vue-analysis/extend/v-model.html#表单元素))\n\n#### 6.v-for\n\n- 作用：基于源数据多次渲染元素或模板块\n- key属性\n  - 推荐：使用 `v-for` 的时候提供 `key` 属性，以获得性能提升。\n  - 说明：使用 key，VUE会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。\n\n```vue\n<!-- 1 基础用法 -->\n<div v-for=\"item in items\">\n  {{ item.text }}\n</div>\n\n<!-- item 为当前项，index 为索引 -->\n<p v-for=\"(item, index) in list\">{{item}} -- {{index}}</p>\n<!-- item 为值，key 为键，index 为索引 -->\n<p v-for=\"(item, key, index) in obj\">{{item}} -- {{key}}</p>\n<p v-for=\"item in 10\">{{item}}</p>\n```\n\n#### 7.v-if 和 v-show\n\n- [条件渲染](https://link.juejin.im/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Fconditional.html)\n- `v-if`：根据表达式的值的真假条件，销毁或重建元素\n- `v-show`：根据表达式之真假值，切换元素的 display CSS 属性\n\n#### 8.提升用户体验：v-cloak\n\n- 这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。\n- 防止刷新页面，网速慢的情况下出现`{{ message }}`等数据格式\n\n```vue\n<div v-cloak>\n  {{ message }}\n</div>\n```\n\n#### 9.提升性能：v-pre\n\n- 说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。\n\n```\n<span v-pre>{{ this will not be compiled }}</span>\n```\n\n#### 10.提升性能：v-once\n\n- 说明：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。\n\n```\n<span v-once>This will never change: {{msg}}</span>\n```\n\n### 自定义指令\n\n除了核心功能默认内置的指令 (`v-model` 和 `v-show`)，Vue 也允许注册自定义指令。注意，在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。\n\n例如：\n\n当页面加载时，该元素将获得焦点 (注意：`autofocus` 在移动版 Safari 上不工作)。事实上，只要你在打开这个页面后还没点击过任何内容，这个输入框就应当还是处于聚焦状态。现在让我们用指令来实现这个功能：\n\n```vue\n// 注册一个全局自定义指令 `v-focus`\nVue.directive('focus', {\n  // 当被绑定的元素插入到 DOM 中时……\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n如果想注册局部指令，组件中也接受一个 `directives` 的选项：\n\n```vue\ndirectives: {\n  focus: {\n    // 指令的定义\n    inserted: function (el) {\n      el.focus()\n    }\n  }\n}\n```\n\n然后你可以在模板中任何元素上使用新的 `v-focus` 属性，如下：\n\n```vue\n<input v-focus>\n```\n\n#### 钩子函数\n\n一个指令定义对象可以提供如下几个钩子函数 (均为可选)：\n\n- `bind`：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。\n- `inserted`：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。\n- `update`：所在组件的 VNode 更新时调用，**但是可能发生在其子 VNode 更新之前**。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。\n- `componentUpdated`：指令所在组件的 VNode **及其子 VNode** 全部更新后调用。\n- `unbind`：只调用一次，指令与元素解绑时调用。\n\n#### 钩子函数参数\n\n指令钩子函数会被传入以下参数：\n\n- `el`：指令所绑定的元素，可以用来直接操作 DOM 。\n\n- `binding`：一个对象，包含以下属性：\n\n  - `name`：指令名，不包括 `v-` 前缀。\n  - `value`：指令的绑定值，例如：`v-my-directive=\"1 + 1\"` 中，绑定值为 `2`。\n  - `oldValue`：指令绑定的前一个值，仅在 `update` 和 `componentUpdated` 钩子中可用。无论值是否改变都可用。\n  - `expression`：字符串形式的指令表达式。例如 `v-my-directive=\"1 + 1\"` 中，表达式为 `\"1 + 1\"`。\n  - `arg`：传给指令的参数，可选。例如 `v-my-directive:foo` 中，参数为 `\"foo\"`。\n  - `modifiers`：一个包含修饰符的对象。例如：`v-my-directive.foo.bar` 中，修饰符对象为 `{ foo: true, bar: true }`。\n\n- `vnode`：Vue 编译生成的虚拟节点。移步 [VNode API](https://cn.vuejs.org/v2/api/#VNode-接口) 来了解更多详情。\n\n- `oldVnode`：上一个虚拟节点，仅在 `update` 和 `componentUpdated` 钩子中可用。\n\n  除了 `el` 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 [`dataset`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset) 来进行。\n\n```vue\n<div id=\"dynamicexample\">\n  <h3>Scroll down inside this section ↓</h3>\n  <p v-pin:[direction]=\"200\">I am pinned onto the page at 200px to the left.</p>\n</div>\nVue.directive('pin', {\n  bind: function (el, binding, vnode) {\n    el.style.position = 'fixed'\n    var s = (binding.arg == 'left' ? 'left' : 'top')\n    el.style[s] = binding.value + 'px'\n  }\n})\n\nnew Vue({\n  el: '#dynamicexample',\n  data: function () {\n    return {\n      direction: 'left'\n    }\n  }\n})\n```\n\n## 8. 一句话就能回答的面试题\n\n**1.css只在当前组件起作用** 答：在style标签中写入**scoped**即可 例如：\n\n**2.v-if 和 v-show 区别** 答：v-if按照条件是否渲染，v-show是display的block或none；\n\n**3.route和router的区别** 答：route是\"路由信息对象\"，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而router是“路由实例”对象包括了路由的跳转方法，钩子函数等。\n\n**4.vue.js的两个核心是什么？** 答：数据驱动、组件系统\n\n**5.vue几种常用的指令** 答：v-for 、 v-if 、v-bind、v-on、v-show、v-else\n\n**6.vue常用的修饰符？** 答：.prevent: 提交事件不再重载页面；.stop: 阻止单击事件冒泡；.self: 当事件发生在该元素本身而不是子元素的时候会触发；.capture: 事件侦听，事件发生的时候会调用\n\n**7.v-on 可以绑定多个方法吗？** 答：可以\n\n**8.vue中 key 值的作用？** 答：当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。key的作用主要是为了高效的更新虚拟DOM。\n\n**9.什么是vue的计算属性？** 答：在模板中放入太多的逻辑会让模板过重且难以维护，在需要对数据进行复杂处理，且可能多次使用的情况下，尽量采取计算属性的方式。好处：①使得数据处理结构清晰；②依赖于数据，数据更新，处理结果自动更新；③计算属性内部this指向vm实例；④在template调用时，直接写计算属性名即可；⑤常用的是getter方法，获取数据，也可以使用set方法改变数据；⑥相较于methods，不管依赖的数据变不变，methods都会重新计算，但是依赖数据不变的时候computed从缓存中获取，不会重新计算。\n\n**10.vue等单页面应用及其优缺点** 答：优点：Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件，核心是一个响应的数据绑定系统。MVVM、数据驱动、组件化、轻量、简洁、高效、快速、模块友好。 ==**缺点：**不支持低版本的浏览器，最低只支持到IE9；不利于SEO的优化（如果要支持SEO，建议通过服务端来进行渲染组件）；第一次加载首页耗时相对长一些；不可以使用浏览器的导航按钮需要自行实现前进、后退。==\n\n","tags":["VUE"],"categories":["VUE"]},{"title":"Vue使用异步更新队列","url":"/2020/02/09/Vue使用异步更新队列/","content":"\n# Vue使用异步更新队列\n\n## DOM的异步更新\n\n异步更新队列指的是当状态发生变化时，Vue异步执行DOM更新。\n\n我们在项目开发中会遇到这样一种场景：当我们将状态改变之后想获取更新后的DOM，往往我们获取到的DOM是更新前的旧DOM，我们需要使用`vm.$nextTick`方法异步获取DOM，例如：\n\n```javascript\nVue.component('example', {\n  template: '<span>{{ message }}</span>',\n  data: function () {\n    return {\n      message: '没有更新'\n    }\n  },\n  methods: {\n    updateMessage: function () {\n      this.message = '更新完成'\n      console.log(this.$el.textContent) // => '没有更新'\n      this.$nextTick(function () {\n        console.log(this.$el.textContent) // => '更新完成'\n      })\n    }\n  }\n})\n```\n\n我们都知道这样做很麻烦，但为什么Vue还要这样做呢？\n\n首先我们假设Vue是同步执行DOM更新，会有什么问题？\n\n如果同步更新DOM将会有这样一个问题，我们在代码中同步更新数据N次，DOM也会更新N次，伪代码如下：\n\n```javascript\nthis.message = '更新完成' // DOM更新一次\nthis.message = '更新完成2' // DOM更新两次\nthis.message = '更新完成3' // DOM更新三次\nthis.message = '更新完成4' // DOM更新四次\n```\n\n但事实上，我们真正想要的其实只是最后一次更新而已，也就是说前三次DOM更新都是可以省略的，我们只需要等所有状态都修改好了之后再进行渲染就可以减少一些无用功。\n\n而这种无用功在Vue2.0开始变得更为重要，Vue2.0开始引入了Virtualdom，每一次状态发生变化后，状态变化的信号会发送给组件，组件内部使用VirtualDOM进行计算得出需要更新的具体的DOM节点，然后对DOM进行更新操作，每次更新状态后的渲染过程需要更多的计算，而这种无用功也将浪费更多的性能，所以异步渲染变得更加至关重要。\n\n组件内部使用VIrtualDOM进行渲染，也就是说，组件内部其实是不关心哪个状态发生了变化，它只需要计算一次就可以得知哪些节点需要更新。也就是说，如果更改了N个状态，其实只需要发送一个信号就可以将DOM更新到最新。例如：\n\n```javascript\nthis.message = '更新完成'\nthis.age =  23\nthis.name = berwin\n```\n\n代码中我们分三次修改了三种状态，但其实Vue只会渲染一次。因为VIrtualDOM只需要一次就可以将整个组件的DOM更新到最新，它根本不会关心这个更新的信号到底是从哪个具体的状态发出来的。\n\n那如何才能将渲染操作推迟到所有状态都修改完毕呢？很简单，只需要将渲染操作推迟到本轮事件循环的最后或者下一轮事件循环。也就是说，只需要在本轮事件循环的最后，等前面更新状态的语句都执行完之后，执行一次渲染操作，它就可以无视前面各种更新状态的语法，无论前面写了多少条更新状态的语句，只在最后渲染一次就可以了。\n\n将渲染推迟到本轮事件循环的最后执行渲染的时机会比推迟到下一轮快很多，所以Vue优先将渲染操作推迟到本轮事件循环的最后，如果执行环境不支持会降级到下一轮。\n\n当然，Vue的变化侦测机制决定了它必然会在每次状态发生变化时都会发出渲染的信号，但Vue会在收到信号之后检查队列中是否已经存在这个任务，保证队列中不会有重复。如果队列中不存在则将渲染操作添加到队列中。\n\n之后通过异步的方式延迟执行队列中的所有渲染的操作并清空队列，当同一轮事件循环中反复修改状态时，并不会反复向队列中添加相同的渲染操作。\n\n所以我们在使用Vue时，修改状态后更新DOM都是异步的。\n\n## Watcher队列\n\n### update\n\n在`Watcher`的源码中，我们发现`watcher`的`update`其实是异步的。（注：`sync`属性默认为`false`，也就是异步）\n\n```javascript\nupdate () {\n    /* istanbul ignore else */\n    if (this.lazy) {\n        this.dirty = true\n    } else if (this.sync) {\n        /*同步则执行run直接渲染视图*/\n        this.run()\n    } else {\n        /*异步推送到观察者队列中，下一个tick时调用。*/\n        queueWatcher(this)\n    }\n}\n```\n\n### queueWatcher\n\n`queueWatcher(this)`函数的代码如下：\n\n```javascript\n/*将一个观察者对象push进观察者队列，在队列中已经存在相同的id则该观察者对象将被跳过，除非它是在队列被刷新时推送*/\nexport function queueWatcher (watcher: Watcher) {\n    /*获取watcher的id*/\n    const id = watcher.id\n    /*检验id是否存在，已经存在则直接跳过，不存在则标记哈希表has，用于下次检验*/\n    if (has[id] == null) {\n        has[id] = true\n        if (!flushing) {\n            /*如果没有flush掉，直接push到队列中即可*/\n            queue.push(watcher)\n        } else {\n        ...\n        }\n        // queue the flush\n        if (!waiting) {\n            waiting = true\n            nextTick(flushSchedulerQueue)\n        }\n    }\n}\n```\n\n这段源码有几个需要注意的地方：\n\n1. 首先需要知道的是`watcher`执行`update`的时候，默认情况下肯定是异步的，它会做以下的两件事：\n   - 判断`has`数组中是否有这个`watcher`的`id`\n   - 如果有的话是不需要把`watcher`加入`queue`中的，否则不做任何处理。\n2. 这里面的`nextTick(flushSchedulerQueue)`中，`flushScheduleQueue`函数的作用主要是执行视图更新的操作，它会把`queue`中所有的`watcher`取出来并执行相应的视图更新。\n3. 核心其实是`nextTick`函数了，下面我们具体看一下`nextTick`到底有什么用。\n\n### nextTick\n\n`nextTick`函数其实做了两件事情，一是生成一个`timerFunc`，把回调作为`microTask`或`macroTask`参与到事件循环中来。二是把回调函数放入一个`callbacks`队列，等待适当的时机执行。（这个时机和`timerFunc`不同的实现有关）\n\n首先我们先来看它是怎么生成一个`timerFunc`把回调作为`microTask`或`macroTask`的。\n\n```javascript\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n    /*使用Promise*/\n    var p = Promise.resolve()\n    var logError = err => { console.error(err) }\n    timerFunc = () => {\n        p.then(nextTickHandler).catch(logError)\n        // in problematic UIWebViews, Promise.then doesn't completely break, but\n        // it can get stuck in a weird state where callbacks are pushed into the\n        // microTask queue but the queue isn't being flushed, until the browser\n        // needs to do some other work, e.g. handle a timer. Therefore we can\n        // \"force\" the microTask queue to be flushed by adding an empty timer.\n        if (isIOS) setTimeout(noop)\n    }\n} else if (typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n    )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS IE11, iOS7, Android 4.4\n    /*新建一个textNode的DOM对象，用MutationObserver绑定该DOM并指定回调函数，在DOM变化的时候则会触发回调,该回调会进入主线程（比任务队列优先执行），即textNode.data = String(counter)时便会触发回调*/\n    var counter = 1\n    var observer = new MutationObserver(nextTickHandler)\n    var textNode = document.createTextNode(String(counter))\n    observer.observe(textNode, {\n        characterData: true\n    })\n    timerFunc = () => {\n        counter = (counter + 1) % 2\n        textNode.data = String(counter)\n    }\n} else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    /*使用setTimeout将回调推入任务队列尾部*/\n    timerFunc = () => {\n        setTimeout(nextTickHandler, 0)\n    }\n}\n```\n\n值得注意的是，它会按照`Promise`、`MutationObserver`、`setTimeout`优先级去调用传入的回调函数。前两者会生成一个`microTask`任务，而后者会生成一个`macroTask`。（微任务和宏任务）\n\n之所以会设置这样的优先级，主要是考虑到浏览器之间的兼容性（`IE`没有内置`Promise`）。另外，设置`Promise`最优先是因为`Promise.resolve().then`回调函数属于一个**微任务**，浏览器在一个`Tick`中执行完`macroTask`后会清空当前`Tick`所有的`microTask`再进行`UI`渲染，把`DOM`更新的操作放在`Tick`执行`microTask`的阶段来完成，相比使用`setTimeout`生成的一个`macroTask`会少一次`UI`的渲染。\n\n而`nextTickHandler`函数，其实才是我们真正要执行的函数。\n\n```javascript\nfunction nextTickHandler () {\n    pending = false\n    /*执行所有callback*/\n    const copies = callbacks.slice(0)\n    callbacks.length = 0\n    for (let i = 0; i < copies.length; i++) {\n        copies[i]()\n    }\n}\n```\n\n这里的`callbacks`变量供`nextTickHandler`消费。而前面我们所说的`nextTick`函数第二点功能中“等待适当的时机执行”，其实就是因为`timerFunc`的实现方式有差异，如果是`Promise\\MutationObserver`则`nextTickHandler`回调是一个`microTask`，它会在当前`Tick`的末尾来执行。如果是`setTiemout`则`nextTickHandler`回调是一个`macroTask`，它会在下一个`Tick`来执行。\n\n还有就是`callbacks`中的成员是如何被`push`进来的？从源码中我们可以知道，`nextTick`是一个自执行的函数，一旦执行是`return`了一个`queueNextTick`，所以我们在调用`nextTick`其实就是在调用`queueNextTick`这个函数。它的源代码如下：\n\n```javascript\nreturn function queueNextTick (cb?: Function, ctx?: Object) {\n    let _resolve\n    /*cb存到callbacks中*/\n    callbacks.push(() => {\n        if (cb) {\n            try {\n            cb.call(ctx)\n            } catch (e) {\n            handleError(e, ctx, 'nextTick')\n            }\n        } else if (_resolve) {\n            _resolve(ctx)\n        }\n    })\n    if (!pending) {\n        pending = true\n        timerFunc()\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n        return new Promise((resolve, reject) => {\n            _resolve = resolve\n        })\n    }\n}\n```\n\n可以看到，一旦调用`nextTick`函数时候，传入的`function`就会被存放到`callbacks`闭包中，然后这个`callbacks`由`nextTickHandler`消费，而`nextTickHandler`的执行时间又是由`timerFunc`来决定。\n\n回看`Watcher`这里面的`nextTick(flushSchedulerQueue)`中的`flushSchedulerQueue`函数其实就是`watcher`的视图更新。调用的时候会把它`push`到`callbacks`中来异步执行。\n\n另外，关于`waiting`变量，这是很重要的一个标志位，它保证`flushSchedulerQueue`回调只允许被置入`callbacks`一次。\n\n也就是说，默认`waiting`变量为`false`，执行一次后`waiting`为`true`，后续的`this.xxx`不会再次触发`nextTick`的执行，而是把`this.xxx`相对应的`watcher`推入`flushSchedulerQueue`的`queue`队列中。\n\n**所以，也就是说DOM确实是异步更新，但是具体是在下一个Tick更新还是在当前Tick执行microTask的时候更新，具体要看nextTcik的实现方式，也就是具体跑的是Promise/MutationObserver还是setTimeout。**\n\n## 为什么要异步更新\n\n```html\n<template>\n  <div>\n    <div>{{test}}</div>\n  </div>\n</template>\n```\n\n```javascript\nexport default {\n    data () {\n        return {\n            test: 0\n        };\n    },\n    mounted () {\n      for(let i = 0; i < 1000; i++) {\n        this.test++;\n      }\n    }\n}\n```\n\n现在有这样的一种情况，`mounted`的时候`test`的值会被`++`循环执行`1000`次。 每次`++`时，都会根据响应式触发`setter->Dep->Watcher->update->run`。 如果这时候没有异步更新视图，那么每次`++`都会直接操作`DOM`更新视图，这是非常消耗性能的。 所以`Vue`实现了一个`queue`队列，在下一个`Tick`（或者是当前`Tick`的微任务阶段）的时候会统一执行`queue`中`Watcher`的`run`。同时，拥有相同`id`的`Watcher`不会被重复加入到该`queue`中去，所以不会执行`1000`次`Watcher`的`run`。最终更新视图只会直接将`test`对应的`DOM`的`0`变成`1000`。 保证更新视图操作`DOM`的动作是在当前栈执行完以后下一个`Tick`（或者是当前`Tick`的微任务阶段）的时候调用，大大优化了性能。\n\n","tags":["VUE"],"categories":["VUE"]},{"title":"token详解","url":"/2020/02/03/token详解/","content":"\n# token详解\n\n## 1.传统身份验证的方法（session）\n\nHTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。\n\n解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。\n\n上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。\n\n### 基于服务器验证方式暴露的一些问题\n\n1.Seesion：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。\n\n2.可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。\n\n3.CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可能会出现禁止请求的情况。\n\n4.CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。\n\n在这些问题中，可扩展行是最突出的。\n\n## 2.基于 Token 的身份验证方法\n\n使用基于 Token 的身份验证方法是无状态的，在服务端不需要存储用户的登录记录。NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。\n\n大概的流程是这样的：\n\n1. 客户端使用用户名跟密码请求登录\n2. 服务端收到请求，去验证用户名与密码\n3. 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端\n4. 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里\n5. 客户端每次向服务端请求资源的时候需要带着服务端签发的 Token\n6. 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据（token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性`Access-Control-Allow-Origin:* `，让服务器能接受到来自所有域的请求。需要注意的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。）\n\n### 以下几点特性会让你在程序中使用基于Token的身份验证\n\n1. 无状态、可扩展\n\n2. 支持移动设备\n\n3. 跨程序调用\n\n4. 安全\n\n## 3.Tokens的优势\n\n### 无状态、可扩展\n\n在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。\n\n如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。\n\n使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。\n\nTokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。\n\n使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。\n\n### 安全性\n\n请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。 \n\ntoken是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。\n\n### 多平台跨域\n\n我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各样的设备和应用程序。\n\n只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。\n\n### 基于标准\n\n创建token的时候，你可以设定一些选项。我们在后续的文章中会进行更加详尽的描述，但是标准的用法会在JSON Web Tokens体现。\n\n最近的程序和文档是供给JSON Web Tokens的。它支持众多的语言。这意味在未来的使用中你可以真正的转换你的认证机制。\n\n## 4.传统的token组成\n\ntoken也称作令牌，由**uid+time+sign[+固定参数]**组成:\n\n- uid: 用户唯一身份标识\n- time: 当前时间的时间戳\n- sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接\n- 固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库\n\n## 5.JWT token的组成\n\n实施 Token 验证的方法挺多的，还有一些标准方法，比如 JWT，读作：jot ，表示：JSON Web Tokens 。JWT 标准的 Token 有三个部分：\n\n- header\n- payload\n- signature\n\n中间用点分隔开，并且都会使用 Base64 编码，所以真正的 Token 看起来像这样：\n\n```json\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0\nMzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKX\ntabJecpejuef8AqKYMAJc    \n```\n\n### header\n\nheader 部分主要是两部分内容，一个是 Token 的类型，另一个是使用的算法\n\n```json\n{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS256\"\n}\n```\n\n类型就是 JWT，使用的算法是 HS256.\n\n上面的内容要用 Base64 的形式编码一下，所以就变成这样：\n\n```json\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n```\n\n### Payload\n\nPayload 里面是 Token 的具体内容，这些内容里面有一些是标准字段，你也可以添加其它需要的内容。下面是标准字段：\n\n- iss：Issuer，发行者\n- sub：Subject，主题\n- aud：Audience，观众\n- exp：Expiration time，过期时间\n- nbf：Not before\n- iat：Issued at，发行时间\n- jti：JWT ID\n\n```json\n{\n \"iss\": \"ninghao.net\",\n \"exp\": \"1438955445\",\n \"name\": \"wanghao\",\n \"admin\": true\n}\n```\n\n使用 Base64 编码以后就变成了这个样子：\n\n```\neyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0Mzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsI\nmFkbWluIjp0cnVlfQ\n```\n\n### Signature\n\nJWT 的最后一部分是 Signature ，这部分内容有三个部分，先是用 Base64 编码的 header.payload ，再用加密算法加密一下，加密的时候要放进去一个 Secret ，这个相当于是一个密码，这个密码秘密地存储在服务端。\n\n```json\nencodedString = base64UrlEncode(header) + \".\" + base64UrlEncode(payload); \nHMACSHA256(encodedString, 'secret');\n```\n\n处理完成以后看起来像这样：\n\n```json\nSwyHTEx_RQppr97g4J5lKXtabJecpejuef8AqKYMAJc\n```\n\n最后这个在服务端生成并且要发送给客户端的 Token 看起来像这样：\n\n```json\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJuaW5naGFvLm5ldCIsImV4cCI6IjE0\nMzg5NTU0NDUiLCJuYW1lIjoid2FuZ2hhbyIsImFkbWluIjp0cnVlfQ.SwyHTEx_RQppr97g4J5lKX\ntabJecpejuef8AqKYMAJc\n```\n\n","tags":["安全","浏览器"],"categories":["浏览器"]},{"title":"symbol","url":"/2020/01/22/symbol/","content":"\n# symbol\n\n## symbol的特性。\n\n- Symbol 值通过`Symbol`函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。\n\n- 凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。（Symbol 值作为对象属性名时，不能用点运算符。因为点运算符后面总是字符串，所以不会读取`mySymbol`作为标识名所指代的那个值，导致`a`的属性名实际上是一个字符串，而不是一个 Symbol 值。同理，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。）Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。\n\n- 注意，`Symbol`函数前不能使用`new`命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。\n\n- symbol一旦创建后就不可更改。\n\n- 如果 Symbol 的参数是一个对象，就会调用该对象的`toString`方法，将其转为字符串，然后才生成一个 Symbol 值。`Symbol`函数的参数只是表示对当前 Symbol 值的描述，因此相同参数的`Symbol`函数的返回值是不相等的。\n\n- Symbol 值不能与其他类型的值进行运算，会报错。（Symbol 不能自动被转换为字符串，当尝试将一个 Symbol 强制转换为字符串时，将返回一个 TypeError。）\n\n- Symbol 值可以显式转为字符串。\n\n  ```javascript\n  let sym = Symbol('My symbol');\n  \n  String(sym) // 'Symbol(My symbol)'\n  sym.toString() // 'Symbol(My symbol)'\n  ```\n\n  另外，Symbol 值也可以转为布尔值，但是不能转为数值。\n\n  ```javascript\n  let sym = Symbol();\n  Boolean(sym) // true\n  !sym  // false\n  \n  if (sym) {\n    // ...\n  }\n  \n  Number(sym) // TypeError\n  sym + 2 // TypeError\n  ```\n\n- Symbol属性名遍历：Symbol 作为属性名，该属性不会出现在`for...in`、`for...of`循环中，也不会被`Object.keys()`、`Object.getOwnPropertyNames()`、`JSON.stringify()`返回。但是，它也不是私有属性，有一个`Object.getOwnPropertySymbols`方法，可以获取指定对象的所有 Symbol 属性名。\n\n  `Object.getOwnPropertySymbols`方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。\n\n  ```javascript\n  const obj = {};\n  \n  let foo = Symbol(\"foo\");\n  \n  Object.defineProperty(obj, foo, {\n    value: \"foobar\",\n  });\n  \n  for (let i in obj) {\n    console.log(i); // 无输出\n  }\n  \n  Object.getOwnPropertyNames(obj)\n  // []\n  \n  Object.getOwnPropertySymbols(obj)\n  // [Symbol(foo)]\n  ```\n\n  `Reflect.ownKeys`方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。\n\n  ```javascript\n  let obj = {\n    [Symbol('my_key')]: 1,\n    enum: 2,\n    nonEnum: 3\n  };\n  \n  Reflect.ownKeys(obj)\n  //  [\"enum\", \"nonEnum\", Symbol(my_key)]\n  ```\n\n  由于以 Symbol 值作为名称的属性，不会被常规方法遍历得到。我们可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。\n\n## 获取 Symbol 的三种方法\n\n- **Symbol()** 每次调用时都返回一个唯一的 Symbol。\n- **Symbol.for(string) 、Symbol.keyFor()**`Symbol.For`从 Symbol 注册表中返回相应的 Symbol，与上个方法不同的是，Symbol 注册表中的 Symbol 是共享的。也就是说，如果你调用 `Symbol.for(\"cat\")` 三次，都将返回相同的 Symbol。当不同页面或同一页面不同模块需要共享 Symbol 时，注册表就非常有用。（`Symbol.for()`与`Symbol()`这两种写法，都会生成新的 Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。比如，如果你调用`Symbol.for(\"cat\")`30 次，每次都会返回同一个 Symbol 值，但是调用`Symbol(\"cat\")`30 次，会返回 30 个不同的 Symbol 值。）`Symbol.keyFor`方法返回一个已登记的 Symbol 类型值的`key`。\n- **Symbol.iterator** 返回语言预定义的一些 Symbol，每个都有其特殊的用途。\n\n## Symbol 在 ES6 规范中的应用\n\n我们已经知道可以使用 Symbol 来避免代码冲突。之前在[介绍 iterator](https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/) 时，我们还解析了 `for (var item of myArray)` 内部是以调用 `myArray[Symbol.iterator]()` 开始的，当时我提到这个方法可以使用 `myArray.iterator()` 来代替，但是使用 Symbol 的后向兼容性更好。\n\n在 ES6 中还有一些地方使用到了 Symbol。（这些特性还没有在 FireFox 中实现。）\n\n- **使 instanceof 可扩展**。在 ES6 中，`object instanceof constructor` 表达式被标准化为构造函数的一个方法：`constructor[Symbol.hasInstance](object)`，这意味着它是可扩展的。\n- **消除新特性和旧代码之间的冲突**。\n- **支持新类型的字符串匹配**。在 ES5 中，调用 `str.match(myObject)` 时，首先会尝试将 `myObject` 转换为 `RegExp` 对象。在 ES6 中，首先将检查 `myObject` 中是否有 `myObject[Symbol.match](str)` 方法，在所有正则表达式工作的地方都可以提供一个自定义的字符串解析方法。\n\n##symbol的11个内置值\n\n- `Symbol.hasInstance`方法，会被`instanceof`运算符调用。构造器对象用来识别一个对象是否是其实例。\n- `Symbol.isConcatSpreadable`布尔值，表示当在一个对象上调用`Array.prototype.concat`时，这个对象的数组元素是否可展开。\n- `Symbol.iterator`方法，被`for-of`语句调用。返回对象的默认迭代器。\n- `Symbol.match`方法，被`String.prototype.match`调用。正则表达式用来匹配字符串。\n- `Symbol.replace`方法，被`String.prototype.replace`调用。正则表达式用来替换字符串中匹配的子串。\n- `Symbol.search`方法，被`String.prototype.search`调用。正则表达式返回被匹配部分在字符串中的索引。\n- `Symbol.species`函数值，为一个构造函数。用来创建派生对象。\n- `Symbol.split`方法，被`String.prototype.split`调用。正则表达式来用分割字符串。\n- `Symbol.toPrimitive`方法，被`ToPrimitive`抽象操作调用。把对象转换为相应的原始值。\n- `Symbol.toStringTag`方法，被内置方法`Object.prototype.toString`调用。返回创建对象时默认的字符串描述。\n- `Symbol.unscopables`对象，它自己拥有的属性会被`with`作用域排除在外。\n\n（详解可见阮一峰ES6入门http://es6.ruanyifeng.com/#docs/symbol）\n\n## 模拟实现symbol\n\n### 回顾特性\n\n**1. Symbol 值通过 Symbol 函数生成，使用 typeof，结果为 \"symbol\"**\n\n```javascript\nvar s = Symbol();\nconsole.log(typeof s); // \"symbol\"\n```\n\n**2. Symbol 函数前不能使用 new 命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。**\n\n**3. instanceof 的结果为 false**\n\n```javascript\nvar s = Symbol('foo');\nconsole.log(s instanceof Symbol); // false\n```\n\n**4. Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。**\n\n```javascript\nvar s1 = Symbol('foo');\nconsole.log(s1); // Symbol(foo)\n```\n\n**5. 如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值。**\n\n```javascript\nconst obj = {\n  toString() {\n    return 'abc';\n  }\n};\nconst sym = Symbol(obj);\nconsole.log(sym); // Symbol(abc)\n```\n\n**6. Symbol 函数的参数只是表示对当前 Symbol 值的描述，相同参数的 Symbol 函数的返回值是不相等的。**\n\n```javascript\n// 没有参数的情况\nvar s1 = Symbol();\nvar s2 = Symbol();\n\nconsole.log(s1 === s2); // false\n\n// 有参数的情况\nvar s1 = Symbol('foo');\nvar s2 = Symbol('foo');\n\nconsole.log(s1 === s2); // false\n```\n\n**7. Symbol 值不能与其他类型的值进行运算，会报错。**\n\n```javascript\nvar sym = Symbol('My symbol');\n\nconsole.log(\"your symbol is \" + sym); // TypeError: can't convert symbol to string\n```\n\n**8. Symbol 值可以显式转为字符串。**\n\n```javascript\nvar sym = Symbol('My symbol');\n\nconsole.log(String(sym)); // 'Symbol(My symbol)'\nconsole.log(sym.toString()); // 'Symbol(My symbol)'\n```\n\n**9. Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。**\n\n```javascript\nvar mySymbol = Symbol();\n\n// 第一种写法\nvar a = {};\na[mySymbol] = 'Hello!';\n\n// 第二种写法\nvar a = {\n  [mySymbol]: 'Hello!'\n};\n\n// 第三种写法\nvar a = {};\nObject.defineProperty(a, mySymbol, { value: 'Hello!' });\n\n// 以上写法都得到同样结果\nconsole.log(a[mySymbol]); // \"Hello!\"\n```\n\n**10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。**\n\n```javascript\nvar obj = {};\nvar a = Symbol('a');\nvar b = Symbol('b');\n\nobj[a] = 'Hello';\nobj[b] = 'World';\n\nvar objectSymbols = Object.getOwnPropertySymbols(obj);\n\nconsole.log(objectSymbols);\n// [Symbol(a), Symbol(b)]\n```\n\n**11. 如果我们希望使用同一个 Symbol 值，可以使用 Symbol.for。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。**\n\n```javascript\nvar s1 = Symbol.for('foo');\nvar s2 = Symbol.for('foo');\n\nconsole.log(s1 === s2); // true\n```\n\n**12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。**\n\n```javascript\nvar s1 = Symbol.for(\"foo\");\nconsole.log(Symbol.keyFor(s1)); // \"foo\"\n\nvar s2 = Symbol(\"foo\");\nconsole.log(Symbol.keyFor(s2) ); // undefined\n```\n\n### 当调用 Symbol 的时候，发生什么？\n\n当调用 Symbol 的时候，会采用以下步骤：\n\n1. 如果使用 new ，就报错\n2. 如果 description 是 undefined，让 descString 为 undefined\n3. 否则 让 descString 为 ToString(description)\n4. 如果报错，就返回\n5. 返回一个新的唯一的 Symbol 值，它的内部属性 [[Description]] 值为 descString\n\n### 第一版\n\n```javascript\n// 第一版\n(function() {\n    var root = this;\n\n    var SymbolPolyfill = function Symbol(description) {\n\n        // 实现第2点特性：Symbol 函数前不能使用 new 命令\n        if (this instanceof SymbolPolyfill) throw new TypeError('Symbol is not a constructor');\n\n        // 实现第 5 点特性：如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，将其转为字符串，然后才生成一个 Symbol 值。\n        var descString = description === undefined ? undefined : String(description)\n\n        var symbol = Object.create(null)\n\n        Object.defineProperties(symbol, {\n            '__Description__': {\n                value: descString,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            }\n        });\n\n        // 实现第 6 点特性，因为调用该方法，返回的是一个新对象，两个对象之间，只要引用不同，就不会相同\n        return symbol;\n    }\n\n    root.SymbolPolyfill = SymbolPolyfill;\n})();\n```\n\n### 第二版\n\n**1. 使用 typeof，结果为 \"symbol\"。**\n\n利用 ES5，我们并不能修改 typeof 操作符的结果，所以这个无法实现。\n\n**3. instanceof 的结果为 false**\n\n因为不是通过 new 的方式实现的，所以 instanceof 的结果自然是 false。\n\n**4.Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述。主要是为了在控制台显示，或者转为字符串时，比较容易区分。**\n\n当我们打印一个原生 Symbol 值的时候：\n\n```\nconsole.log(Symbol('1')); // Symbol(1)\n```\n\n可是我们模拟实现的时候返回的却是一个对象，所以这个也是无法实现的，当然你修改 console.log 这个方法是另讲。\n\n**8.Symbol 值可以显式转为字符串。**\n\n```javascript\nvar sym = Symbol('My symbol');\n\nconsole.log(String(sym)); // 'Symbol(My symbol)'\nconsole.log(sym.toString()); // 'Symbol(My symbol)'\n```\n\n当调用 String 方法的时候，如果该对象有 toString 方法，就会调用该 toString 方法，所以我们只要给返回的对象添加一个 toString 方法，即可实现这两个效果。\n\n```javascript\n// 第二版\n\n// 前面面代码相同 ……\n\nvar symbol = Object.create({\n    toString: function() {\n        return 'Symbol(' + this.__Description__ + ')';\n    },\n});\n\n// 后面代码相同 ……\n```\n\n### 第三版\n\n**Symbol 值可以作为标识符，用于对象的属性名，可以保证不会出现同名的属性。**\n\n看着好像没什么，这点其实和第 8 点是冲突的，这是因为当我们模拟的所谓 Symbol 值其实是一个有着 toString 方法的 对象，当对象作为对象的属性名的时候，就会进行隐式类型转换，还是会调用我们添加的 toString 方法，对于 Symbol('foo') 和 Symbol('foo')两个 Symbol 值，虽然描述一样，但是因为是两个对象，所以并不相等，但是当作为对象的属性名的时候，都会隐式转换为 `Symbol(foo)` 字符串，这个时候就会造成同名的属性。举个例子：\n\n```javascript\nvar a = SymbolPolyfill('foo');\nvar b = SymbolPolyfill('foo');\n\nconsole.log(a ===  b); // false\n\nvar o = {};\no[a] = 'hello';\no[b] = 'hi';\n\nconsole.log(o); // {Symbol(foo): 'hi'}\n```\n\n为了防止不会出现同名的属性，毕竟这是一个非常重要的特性，迫不得已，我们需要修改 toString 方法，让它返回一个唯一值，所以第 8 点就无法实现了，而且我们还需要再写一个用来生成 唯一值的方法，就命名为 generateName，我们将该唯一值添加到返回对象的 __Name__ 属性中保存下来。\n\n```javascript\n// 第三版\n(function() {\n    var root = this;\n\n    var generateName = (function(){\n        var postfix = 0;\n        return function(descString){\n            postfix++;\n            return '@@' + descString + '_' + postfix\n        }\n    })()\n\n    var SymbolPolyfill = function Symbol(description) {\n\n        if (this instanceof SymbolPolyfill) throw new TypeError('Symbol is not a constructor');\n\n        var descString = description === undefined ? undefined : String(description)\n\n        var symbol = Object.create({\n            toString: function() {\n                return this.__Name__;\n            }\n        })\n\n        Object.defineProperties(symbol, {\n            '__Description__': {\n                value: descString,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            },\n            '__Name__': {\n                value: generateName(descString),\n                writable: false,\n                enumerable: false,\n                configurable: false\n            }\n        });\n\n        return symbol;\n    }\n\n\n    root.SymbolPolyfill = SymbolPolyfill;\n\n})()\n```\n\n此时再看下这个例子：\n\n```javascript\nvar a = SymbolPolyfill('foo');\nvar b = SymbolPolyfill('foo');\n\nconsole.log(a ===  b); // false\n\nvar o = {};\no[a] = 'hello';\no[b] = 'hi';\n\nconsole.log(o); // Object { \"@@foo_1\": \"hello\", \"@@foo_2\": \"hi\" }\n```\n\n### 第四版\n\n**7.Symbol 值不能与其他类型的值进行运算，会报错。**\n\n以 `+` 操作符为例，当进行隐式类型转换的时候，会先调用对象的 valueOf 方法，如果没有返回基本值，就会再调用 toString 方法，所以我们考虑在 valueOf 方法中进行报错，比如：\n\n```javascript\nvar symbol = Object.create({\n    valueOf: function() {\n        throw new Error('Cannot convert a Symbol value')\n    }\n})\n\nconsole.log('1' + symbol); // 报错\n```\n\n看着很简单的解决了这个问题，可是如果我们是显式调用 valueOf 方法呢？对于一个原生的 Symbol 值：\n\n```javascript\nvar s1 = Symbol('foo')\nconsole.log(s1.valueOf()); // Symbol(foo)\n```\n\n是的，对于原生 Symbol，显式调用 valueOf 方法，会直接返回该 Symbol 值，而我们又无法判断是显式还是隐式的调用，所以这个我们就只能实现一半，要不然实现隐式调用报错，要不然实现显式调用返回该值，那……我们选择不报错的那个吧，即后者。\n\n我们迫不得已的修改 valueOf 函数：\n\n```javascript\n// 第四版\n// 前面面代码相同 ……\n\nvar symbol = Object.create({\n    toString: function() {\n        return this.__Name__;\n    },\n    valueOf: function() {\n        return this;\n    }\n});\n// 后面代码相同 ……\n```\n\n### 第五版\n\n**10. Symbol 作为属性名，该属性不会出现在 for...in、for...of 循环中，也不会被 Object.keys()、Object.getOwnPropertyNames()、JSON.stringify() 返回。但是，它也不是私有属性，有一个 Object.getOwnPropertySymbols 方法，可以获取指定对象的所有 Symbol 属性名。**\n\n嗯，无法实现。\n\n**11. 有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。**\n\n这个实现类似于函数记忆，我们建立一个对象，用来储存已经创建的 Symbol 值即可。\n\n**12. Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key。**\n\n遍历 forMap,查找该值对应的键值即可。\n\n```javascript\n// 第五版\n// 前面代码相同 ……\nvar SymbolPolyfill = function() { ... }\n\nvar forMap = {};\n\nObject.defineProperties(SymbolPolyfill, {\n    'for': {\n        value: function(description) {\n            var descString = description === undefined ? undefined : String(description)\n            return forMap[descString] ? forMap[descString] : forMap[descString] = SymbolPolyfill(descString);\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true\n    },\n    'keyFor': {\n        value: function(symbol) {\n            for (var key in forMap) {\n                if (forMap[key] === symbol) return key;\n            }\n        },\n        writable: true,\n        enumerable: false,\n        configurable: true\n    }\n});\n// 后面代码相同 ……\n```\n\n### 完整实现\n\n综上所述：\n\n无法实现的特性有：1、4、7、8、10\n\n可以实现的特性有：2、3、5、6、9、11、12\n\n最后的实现如下:\n\n```javascript\n(function() {\n    var root = this;\n\n    var generateName = (function(){\n        var postfix = 0;\n        return function(descString){\n            postfix++;\n            return '@@' + descString + '_' + postfix\n        }\n    })()\n\n    var SymbolPolyfill = function Symbol(description) {\n\n        if (this instanceof SymbolPolyfill) throw new TypeError('Symbol is not a constructor');\n\n        var descString = description === undefined ? undefined : String(description)\n\n        var symbol = Object.create({\n            toString: function() {\n                return this.__Name__;\n            },\n            valueOf: function() {\n                return this;\n            }\n        })\n\n        Object.defineProperties(symbol, {\n            '__Description__': {\n                value: descString,\n                writable: false,\n                enumerable: false,\n                configurable: false\n            },\n            '__Name__': {\n                value: generateName(descString),\n                writable: false,\n                enumerable: false,\n                configurable: false\n            }\n        });\n\n        return symbol;\n    }\n\n    var forMap = {};\n\n    Object.defineProperties(SymbolPolyfill, {\n        'for': {\n            value: function(description) {\n                var descString = description === undefined ? undefined : String(description)\n                return forMap[descString] ? forMap[descString] : forMap[descString] = SymbolPolyfill(descString);\n            },\n            writable: true,\n            enumerable: false,\n            configurable: true\n        },\n        'keyFor': {\n            value: function(symbol) {\n                for (var key in forMap) {\n                    if (forMap[key] === symbol) return key;\n                }\n            },\n            writable: true,\n            enumerable: false,\n            configurable: true\n        }\n    });\n\n    root.SymbolPolyfill = SymbolPolyfill;\n\n})()\n```","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"ES6类以及继承的实现原理","url":"/2020/01/17/ES6类以及继承的实现原理/","content":"\n# ES6类以及继承的实现原理\n\n## ES6创建一个类的过程\n\nES6中通过class关键字，定义类\n\n```javascript\nclass Parent {\n    constructor(name,age){\n        this.name = name;\n        this.age = age;\n    }\n    speakSomething(){\n        console.log(\"I can speek chinese\");\n    }\n}\n```\n\n经过babel转码之后\n\n```javascript\n\"use strict\";\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n    };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Parent = function () {\n    function Parent(name, age) {\n        _classCallCheck(this, Parent);\n\n        this.name = name;\n        this.age = age;\n    }\n\n    _createClass(Parent, [{\n        key: \"speakSomething\",\n        value: function speakSomething() {\n            console.log(\"I can speek chinese\");\n        }\n    }]);\n\n    return Parent;\n}();\n```\n\n**ES6类的底层还是通过构造函数去创建的**\n\n可见class的底层依然是构造函数：\n\n1. 调用_classCallCheck方法判断当前函数调用前是否有new关键字。\n\n   构造函数执行前有new关键字，会在构造函数内部创建一个空对象，将构造函数的proptype指向这个空对象的_proto_,并将this指向这个空对象。如上，_classCallCheck中：this instanceof Parent 返回true。\n\n   若构造函数前面没有new则构造函数的proptype不会不出现在this的原型链上，返回false。\n\n   通过ES6创建的类，是不允许你直接调用的。在ES5中，构造函数是可以直接运行的，比如`Parent()`。但是在ES6就不行。我们可以看到转码的构造函数中有`_classCallCheck(this, Parent)`语句,这句话是防止你通过构造函数直接运行的。你直接在ES6运行`Parent()`,这是不允许的,ES6中抛出`Class constructor Parent cannot be invoked without 'new'`错误。转码后的会抛出`Cannot call a class as a function`.我觉得这样的规范挺好的，能够规范化类的使用方式。\n\n2. 将class内部的变量和函数赋给this。\n\n   转码中`_createClass`方法，它调用`Object.defineProperty`方法去给新创建的`Parent`添加各种属性。`defineProperties(Constructor.prototype, protoProps)`是给原型添加属性。如果你有静态属性，会直接添加到构造函数上`defineProperties(Constructor, staticProps)`。\n\n3. 执行constuctor内部的逻辑。\n\n4. return this (构造函数默认在最后我们做了)。\n\n## ES6实现继承\n\n**1.调用_inherits函数继承父类的proptype。**\n\n**2.用一个闭包保存父类引用，在闭包内部做子类构造逻辑。**\n\n**3.new检查。**\n\n**4.用当前this调用父类构造函数。**\n\n**5.将行子类class内部的变量和函数赋给this。**\n\n**6.执行子类constuctor内部的逻辑。**\n\nes6实际上是为我们提供了一个“组合寄生继承”的简单写法。\n\n```javascript\nclass Parent {\n    static height = 12\n    constructor(name,age){\n        this.name = name;\n        this.age = age;\n    }\n    speakSomething(){\n        console.log(\"I can speek chinese\");\n    }\n}\nParent.prototype.color = 'yellow'\n\n\n//定义子类，继承父类\nclass Child extends Parent {\n    static width = 18\n    constructor(name,age){\n        super(name,age);\n    }\n    coding(){\n        console.log(\"I can code JS\");\n    }\n}\n\nvar c = new Child(\"job\",30);\nc.coding()\n```\n\n转码之后的代码变成了这样\n\n```javascript\n\"use strict\";\n\nvar _createClass = function () {\n    function defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n        }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) defineProperties(Constructor, staticProps);\n        return Constructor;\n    };\n}();\n\n//校验this是否被初始化，super是否调用，并返回父类已经赋值完的this。\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n\nvar Parent = function () {\n    function Parent(name, age) {\n        _classCallCheck(this, Parent);\n\n        this.name = name;\n        this.age = age;\n    }\n\n    _createClass(Parent, [{\n        key: \"speakSomething\",\n        value: function speakSomething() {\n            console.log(\"I can speek chinese\");\n        }\n    }]);\n\n    return Parent;\n}();\n\nParent.height = 12;\n\nParent.prototype.color = 'yellow';\n\n//定义子类，继承父类\n\nvar Child = function (_Parent) {\n    _inherits(Child, _Parent);\n\n    function Child(name, age) {\n        _classCallCheck(this, Child);\n\n      /**用当前this调用父类构造函数。\n      * 这里的Child.proto || Object.getPrototypeOf(Child)实际上是父构造函数(_inherits最后的操作)，\n      * 然后通过call将其调用方改为当前this，并传递参数。（这里感觉可以直接用参数传过来的Parent）*/\n        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).call(this, name, age));\n    }\n\n    _createClass(Child, [{\n        key: \"coding\",\n        value: function coding() {\n            console.log(\"I can code JS\");\n        }\n    }]);\n\n    return Child;\n}(Parent);\n\nChild.width = 18;\n\n\nvar c = new Child(\"job\", 30);\nc.coding();\n```\n\n我们可以看到，构造类的方法都没变，只是添加了`_inherits`核心方法来实现继承\n\n### `_inherits`核心方法\n\n(1) 校验父构造函数。\n\n(2) 典型的寄生继承：用父类构造函数的proptype创建一个空对象，并将这个对象指向子类构造函数的proptype。\n\n(3) 将父构造函数指向子构造函数的_proto_（这步是做什么的不太明确，感觉没什么意义。）\n\n首先是判断父类的类型，然后\n\n```javascript\nsubClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n```\n\n这段代码翻译下来就是\n\n```javascript\nfunction F(){}\nF.prototype = superClass.prototype\nsubClass.prototype = new F()\nsubClass.prototype.constructor = subClass\n```\n\n接下来`subClass.__proto__ = superClass`\n`_inherits`核心思想就是下面两句\n\n```javascript\nsubClass.prototype.__proto__ = superClass.prototype\nsubClass.__proto__ = superClass\n```\n\n首先 `subClass.prototype.__proto__ = superClass.prototype`保证了`c instanceof Parent`是true,Child的实例可以访问到父类的属性，包括内部属性，以及原型属性。其次，`subClass.__proto__ = superClass`，保证了Child.height也能访问到，也就是静态方法。\n\n### super\n\nsuper代表父类构造函数。\n\nsuper.fun1() 等同于 Parent.fun1() 或 Parent.prototype.fun1()。\n\n**super() 等同于Parent.prototype.construtor()**\n\n默认的构造函数中会主动调用父类构造函数，并默认把当前constructor传递的参数传给了父类。\n\n所以当我们声明了constructor后必须主动调用super(),否则无法调用父构造函数，无法完成继承。\n\n典型的例子就是Reatc的Component中，我们声明constructor后必须调用super(props)，因为父类要在构造函数中对props做一些初始化操作。","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"yarn&npm","url":"/2020/01/07/yarn&npm/","content":"\n# yarn&npm\n\nFacebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 — Yarn，是为了弥补 npm 的一些缺陷而出现的：\n\n* npm 安装包（packages）的速度不够快，拉取的 packages 可能版本不同\n* npm 允许在安装 packages 时执行代码，这就埋下了安全隐患\n\nYarn 没想要完全替代 npm，它只是一个新的 CLI 工具，拉取的 packages 依然来自 npm 仓库。仓库本身不会变，所以获取或者发布模块的时候和原来一样。\n\n## yarn vs npm：特性差异\n\n### **yarn.lock 文件**\n\nnpm 和 Yarn 都是通过 package.json 记录项目需要拉取的依赖模块，不过在使用时，往往 package.json 中模块的版本号不太会写得非常确切，通常是定个版本范围。这样你就能自行选择使用模块的大版本或者小版本，也允许 npm 拉取模块最新的修复了 bug 的版本。\n\n#### npm\n\n*给定一个版本号：主版本号.次版本号.补丁版本号， 以下这三种情况需要增加相应的版本号:*\n\n- *主版本号： 当API发生改变，并与之前的版本不兼容的时候*\n- *次版本号： 当增加了功能，但是向后兼容的时候*\n- *补丁版本号： 当做了向后兼容的缺陷修复的时候*\n\n```json\n\"dependencies\": {\n    \"lodash\": \"^4.17.4\"\n}\n```\n\n在版本号lodash之前有个^字符。这个字符告诉npm，安装主版本等于4的任意一个版本即可。所以如果我现在运行npm进行安装，npm将安装lodash的主版本为4的最新版，可能是 lodash@4.25.5（@是npm约定用来确定包名的指定版本的）。\n\n在理想的[语义化版本](https://link.zhihu.com/?target=http%3A//semver.org/lang/zh-CN/)世界中，新版是不会有颠覆旧版本的改变，然而现实并非如此。这就导致了**使用 npm 拉取依赖时，即使用的是相同的 package.json，在不同的设备上拉到的 packages 版本不一，这就可能为项目引入 bug。**\n\n#### yarn\n\n为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。\n\nnpm 其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 **npm shrinkwrap** 命令。这个命令将会生成一个锁定文件，在执行 npm install 的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm 和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过 shrinkwrap 命令生成 npm-shrinkwrap.json 文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。\n\n### **并行安装**\n\n无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。\n\n#### npm\n\nnpm 是按照队列执行每个 package，也就是说必须要等到当前 package 成功安装之后，才能继续后面的安装。\n\n这种方法的缺点是，npm必须首先遍历所有的项目依赖关系，然后再决定如何生成扁平的node_modules目录结构。npm必须为所有使用到的模块构建一个完整的依赖关系树，这是一个耗时的操作，是[npm安装速度慢的一个很重要的原因](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fnpm%2Fnpm%2Fissues%2F8826)。\n\n#### yarn\n\nYarn 是同步执行所有任务，提高了性能。\n\n由于yarn是崭新的经过重新设计的npm客户端，它能让开发人员并行化处理所有必须的操作，并添加了一些其他改进，这使得运行速度得到了显著的提升，整个安装时间也变得更少。\n\n#### 比较\n\n通过拉取 [express](https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/express) 依赖，我比较了 npm 和 Yarn 的效率，在没有用任何锁定文件（也就是没有缓存）的前提下，一共安装 42 个依赖：\n\n1. npm 耗时 9 秒\n2. Yarn 耗时 1.37 秒\n\n这耗时……我没法相信自己的眼睛了，反复尝试几次，得到的结果也差不多。于是我又试着安装了有195个依赖的 [gulp](https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/gulp)，这一次：\n\n1. npm 耗时 11 秒\n2. Yarn 耗时 7.81 秒\n\n看来 npm 和 Yarn 在安装包的速度差异和要安装的包个数强相关，不过不管怎么样，Yarn 都比 npm 要快。\n\n### **更简洁的输出**\n\n#### npm\n\nnpm 的输出信息比较冗长。在执行 npm install <package> 的时候，命令行里会不断地打印出所有被安装上的依赖。\n\n#### yarn\n\n相比之下，Yarn 简洁太多：默认情况下，结合了 emoji （Windows 上 emoji 不可见）直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7go968d0mj30k00dp75u.jpg)\n\n### **多注册来源处理**\n\n所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。\n\n### **更好的语义化**\n\n yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。\n\n## CLI 区别\n\n除了特性上的区别，相比于 npm 的命令，Yarn 命令有增有减还有一些更改。\n\n### **yarn global**\n\nnpm 的全局操作命令要加上 -g 或者 --global 参数，Yarn 的全局命令则需要加上 global。和 npm 类似，项目特定的依赖，就不需要全局安装了。\n\n当执行 yarn add、yarn bin、yarn ls 和 yarn remove 时添加 global 前缀才是有全局作用。除了 yarn add 之外，其他三个命令和 npm 的一样。\n\n[yarn global 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/global)\n\n### **yarn install**\n\nnpm install 命令安装的是 package.json 中的依赖，如果开发者在 package.json 中添加了新的依赖，npm install 也一样安装。然而，yarn install 会优先安装 yarn.lock 中记录的依赖，没有这样的锁定文件时，才会去安装 package.json 中的依赖。\n\n[yarn install 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/install)\n\n[npm install 文档](https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/install)\n\n### **yarn add [–dev]**\n\n和 npm install 类似，yarn add 命令允许你添加并安装依赖。通过这个命令添加的依赖都会被自动加到 package.json 中，和我们在 npm 命令中使用 --save 参数一样。Yarn 的-dev 则等同于 npm 的 --save-dev。\n\n[yarn add 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/add)\n\n[npm install 文档](https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/install)\n\n### **yarn licenses [ls|generate-disclaimer]**\n\n在写这篇文章的时候，npm 没有等同的命令。yarn licenses ls 用于罗列出所有被安装的 package 所持有的执照情况。yarn licenses generate-disclaimer 将生成一个对所有依赖的免责声明。有些执照要求开发者一定要在项目中包含这些它们，这个命令就是为这样的场景存在的。\n\n[yarn licenses 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/licenses)\n\n### **yarn why**\n\n这条命令能帮助开发者理清安装的 package 之间的关系。拉取了各种依赖以后，有些 package 是你显式安装的，有些包则是递归依赖的。\n\n[yarn why 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/why)\n\n### **yarn upgrade [package]**\n\n这条命令将根据 package.json 将 package 升级到最新版本，并更新 yarn.lock，和 npm update 相似。\n\n有意思的是，如果指定了 [package] 参数，Yarn 会将 package 升级到最新版本，并更新 package.json 中该 package 的版本号字段。\n\n[yarn upgrade 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/upgrade)\n\n### **yarn generate-lock-entry**\n\n这条命令将会生成一份基于 package.json 的 yarn.lock 文件，作用和 npm shrinkwrap 类似。不过由于执行 yarn add andyarn upgrade 时都会更新 yarn.lock 文件，所以要慎重执行 yarn generate-lock-entry 命令\n\n[yarn generate-lock-entry 文档](https://link.zhihu.com/?target=https%3A//yarnpkg.com/en/docs/cli/generate-lock-entry)\n\n[npm shrinkwrap 文档](https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/shrinkwrap)\n\n## yarn和npm命令对比\n\n```text\nnpm install === yarn \nnpm install taco --save === yarn add taco\nnpm uninstall taco --save === yarn remove taco\nnpm install taco --save-dev === yarn add taco --dev\nnpm update --save === yarn upgrade\n```\n\n## npm的未来：npm5.0\n\n有了yarn的压力之后，npm做了一些类似的改进。\n\n1. 默认新增了类似yarn.lock的 package-lock.json；\n2. git 依赖支持优化：这个特性在需要安装大量内部项目（例如在没有自建源的内网开发），或需要使用某些依赖的未发布版本时很有用。在这之前可能需要使用指定 commit*id 的方式来控制版本。*\n3. *文件依赖优化：在之前的版本，如果将本地目录作为依赖来安装，将会把文件目录作为副本拷贝到 node*modules 中。而在 npm5 中，将改为使用创建 symlinks 的方式来实现（使用本地 tarball 包除外），而不再执行文件拷贝。这将会提升安装速度。目前yarn还不支持。","tags":["yarn","npm"],"categories":["git"]},{"title":"关于01的2019","url":"/2019/12/31/关于01的2019/","content":"# 关于01的2019\n这是 01 第一篇非技术的博客，想记录一下我的 2019 年，因为这一年对我来说，真的意义非凡、与众不同。这篇博客，可能絮絮叨叨，可能思路不清。没有期待看到的你会生出什么样的情绪，只是对自己的一个小小交代，希望自己可以记得这一年来的欢笑与艰难。\n\n为什么说 2019 年，对我来说意义非凡与众不同呢？首先，这一年，是我 24 岁的本命年。不同于上一次 12 岁的那一年，24 岁，我拥有了更清晰的对世界和周遭的认识，有了属于自己独立的看法与见解，也变得在一些时候开始封建迷信，啊哈哈哈哈。比如，老老实实带起了保命红绳，认认真真买了火红的内衣，换上了「猪事顺利」的红色手机壳，疯狂的为各种事儿转发了各种功能性锦鲤。当然，更重要的是，2019 年里，真的发生了很多大事儿。有的是我从未想到也不敢想象的事儿，有的是即将改变我人生轨迹的事儿。那么，我们一件一件缓缓道来。\n\n最重要的，放在第一个来说。这件事儿，叫做「爸爸」。我不知道该怎么开始写这件事儿，那就直接一点。2019 年 3 月 3 日，我爸爸去世了。那是一个平常的星期天，前一天，我刚染了蓝色的头发，早上我在厕所里拍了第一张蓝头发的自拍，洗脸刷牙，化妆，中午和好朋友约了一顿海底捞，点了很多菜，等着火锅开涮，一个陌生的号码打进了我的手机，是一个带着哭腔的声音，很像我小姑。海底捞里很吵，听不清电话那头都说了些什么，就听清一句，“你爸死了，你赶快回来”。嗯，我是懵的，本能的觉得，应该是个诈骗电话吧。走出海底捞，给奶奶家的座机打了个电话，接电话的人不是奶奶是我大姑父，我心里想，真的出事儿了。挂了电话买了一张晚上的机票回家。那时候的我，真的反应不过来发生了什么，甚至还安静的吃完了那顿海底捞。\n\n我其实不能接受这件事儿，一直到现在。\n\n回到家，奶奶抱着我哭了，我没有哭。小姑哭的泣不成声，我没有哭。烧纸的时候，我妈说，你要喊你爸来拾钱，我喊不出来，我一句话也说不出来，我就沉默的跪在那儿。身边知道这件事儿的朋友问我，我都是笑着说一句没事儿啊，你看我不是好好的吗。在火葬场，我看见我爸穿戴整齐的躺在那儿，西装皮鞋，是我不熟悉的样子，很安详，却一点也不像睡着了，我爸睡觉才不会这么规矩，明明呼噜震天响。我说了悼词，说的乱七八糟，毕竟这是我第一次说悼词，都不知道要说些什么内容，甚至还在控诉他一点都不是一个负责任的好爸爸。我抱着我爸的骨灰盒，真的很沉，得用手指死死抠着才能保证在走到墓地前的这段路上，我不会把他摔下去。\n\n我以为我没什么事儿，我以为我消化的了，毕竟我之前 23 年的人生，也不怎么平坦。处理完丧事儿回到学校，在操场上，是我第一次崩溃的放声大哭。一边哭一边笑，笑完哭的更大声，想小时候，也想，我真的没有爸爸了。真的就像过电影一样，记忆在这件事儿之后变得异常鲜活，很多以前想不起来的小细节都变得十分清晰。我记得我感冒发烧咳嗽到话也说不出来，却任性的要爸爸去给我买黄桃罐头。我记得小时候我爸开出租我坐在副驾驶玩耍睡觉。我记得每次爸爸让我帮他跑腿下楼买包醋的时候都会多给我五毛钱的跑腿费。我也记得去年和爸爸奶奶一起坐在床上玩激萌的时候他看着那些可爱的表情加在他脸上时笑的有多憨厚。太多太多，都只有回忆了。再也没有人在火车站外期盼放假回家的我，带着刚下火车的我去吃一碗牛肉拉面。再也没有人叫我臭小子，打来电话十分腼腆的说句“老爸想你了”。也不会有人明明厨艺很好，却要在每次做饭的时候不停的呼喊我去厨房给他试菜，想要听我的那句“再加点醋”或者“刚刚好、完美！”。我一直想要带他去看场电影，imax或者3D的，想要挣钱给他买辆好车，也想过他老了我推着他晒太阳的场景。从小到大，我爸，都是那个最惯着我的人。他还说，他在网上学了好多菜，要做给我吃。可是，我还没放假回家，爸爸，你去哪儿了呢？\n\n我以为，哭过这一场之后，我还是那个积极坚强的 01，生活还是如常。但是这一次，好像真的有些难。\n\n本命年第二件事儿，彻底和过去的感情说再见。其实这是个开心的事儿，只不过经历的过程惨痛了些。感情上的事儿嘛，总是剪不断理还乱，更何况我还是一个念旧又烂好心的人。我有个异国的前男友，我们之间有很多故事，很多折磨我的故事。之所以是折磨我的故事，显然是三个人的故事，之所以有很多，显然是我的不甘心和泛滥的同情心在作祟。很老套的情节，很多时候，放不下的只是自己在这份感情里的付出加上一张会骗人的渣男的嘴。即便分手了。\n\n我不得不承认，我这个前男友对我的影响有多大。他让我变得小心翼翼，变得更加没有安全感。对于一些情侣间的小事儿，却搞的小心谨慎，总是朝着最不利的方向去想。换情侣头像或者在社交平台上秀恩爱，不再是为所欲为凭自己开心，而是谨小慎微的试探对方的心思，因为一条微博换来的可能是争吵到心寒。对于节日或者纪念日的仪式感耿耿于怀，我喜欢，他却不在意，OK，那我一定要过的隆重，只是不是和他。对于向身边的人大方公开我在谈恋爱，不可能，因为他只会把我藏起来谈地下情，那么我只能追求变态的公平。分手后的烂好心，又让我继续沦为一个被欺骗的“朋友”，拖拖拉拉没个完。对于感情，我期待的很少，甚至只希望，对方能是个好人，我们能做到善待彼此，就好了。我埋藏自己的想法，用“善解人意”来对待每一个人。我知道我变得越来越扭曲，越来越不是自己喜欢的 01。\n\n在感情里日渐扭曲把自己往角落里逼的我，在家里发生大变故下终于意识到我彻底失去了爱我的爸爸的我，在春招如火如荼进行却才意识到我该开始学习了还什么都不会的我，彻底崩溃了。\n\n2019 年 3 月 3 日到 2019 年 8 月 3 日。我其实记不清我这五个月具体都发生了什么，我还是正常的实习上班、为秋招学习、跟朋友扯淡逗逼。但是我知道，我不太正常。我记得我走着走着路就崩溃到蹲在马路边大哭。我记得我在公交车上看到对面的中年男人穿着和我爸爸一样的 polo 衫眼泪就止不住而引起了旁边人的奇怪的眼神。我记得我每隔一天就会做梦梦到爸爸，压抑的喘不过气难受的哭醒。我记得我下班不想回宿舍在操场放空一圈一圈的走着。每一次哭完我都以为，这次哭完就好了，可是没有。我恶语怼着身边关心我的人，也在偶尔清闲的工作日下午非常丧的想着工作的无趣、生活的无聊。我做了很多份网上抑郁症的测试，非常真实的填了答案，看着最后抑郁的结果。真的时刻都在叹气，随时陷入对人生的大思考。我疯狂的找各种人聊天诉说，但是没有缓解。我出去旅行，在微博上开了一个穿搭话题，希望自己每天至少能有一点开心和寄托。每次给家里打电话，都要做很久的心里准备，因为每次打完电话，我都会更丧一些，我能听到奶奶在电话里每一句话中间都夹杂着的叹气，我能听到她的孤单，她一遍遍强调的“以后你只能靠着你自己了，家里也没人能帮你了”，我还能感受到来自很多关心我的人的心疼与可怜。说实话，这些，都挺令我窒息的。可能是我矫情，但是有时候我就是执拗的想着，我才 24 岁，还没有到大多数人面对父母离去的年纪，为什么，我就没有爸爸了。\n\n对不起，到这里，我都只写了不好的事儿与矫情的压抑。在这儿，我还是想说句，Fuck you！我的本命年，真的很丧。\n\n但是我想说的第三件事儿，是件幸福的小事儿。我不想吝啬我能想到的任何语言来表达我的开心与幸福，还有对这趴主角的感谢。他叫李煊。存在于我博客「关于」中的男孩子。他是我的老友，以前。是一个我可以随意跟他说生活三两事儿的老友。我认识他多久呢？两三年。见过几次面？约过几次饭？啊哈哈哈哈，我印象中真的没几次。但是你要问我他在我的朋友中排名几何，我真的会说，是在好友榜的前几位。我对他的评价很高，一个相处舒服，温柔绅士且优秀的男孩子。2019 年 8 月 3 号，一个平常的周五，又跟他在微信上逼逼了一天。然后，他表白了，所以，现在，他是我的男朋友。\n\n他好像是开玩笑的表白，随口说了句，要不你直接当我女朋友算了。我的回答也是啊哈哈哈哈哈哈 我懵逼了。然后，我开始开心，开始走心，开始认认真真动了心。微博里，我秀了恩爱，说了很多我喜欢他的故事，玩他喜欢的游戏，听他喜欢的电台和歌曲，尝试他喜欢的酒。但在这里，我想说说我感受到的他的喜欢和温柔。在网易云，我建了一个歌单，叫「给煊宝的」，里面收藏了一些我听到的甜甜的歌，我没告诉他，但是他自己看到了，就默默的添加了收藏。他会在聊天中不经意的表达爱意与喜欢，说一些彩虹屁，夸我的照骗好看的一匹，说衣服一般但主要还是看谁穿。在我磨叽他的时候突然的语气温柔，说“别闹了～乖～”。他会在我跟他说可能还有两个月才能见面的时候语气失落。也会在被工作折磨的苦逼不堪的时候给我打电话疯狂吐槽三万字。会认真把我脱下来乱放的鞋整齐的摆在鞋柜前。会温柔的吻我抱紧我笑着捏我身上的肉肉挠我的痒痒。会在我追星大喊千玺老公的时候给予我一句包容的“小傻子”。也会在我因为误解他的话闹别扭的时候一句句的认真解释，告诉我他想让我在去找他的时候住的舒服，过得开心，他焦虑着因为工作太忙而陪伴我的时间太少。会默默的记住我害怕蟑螂，在帮我找房子看房子的时候仔细甄选。会用心的给我准备节日礼物。会在繁忙的工作中尽可能的抽时间陪我。他的温柔很多，我，在慢慢感受。我们从未认真讨论过以后，承诺过至死不渝，但是在我为不知道能不能去他的城市工作结束异地而不安的时候，他看似随便的告诉我，如果我不能去，他就来。他让我感受到踏实与安定。我从未遇到过一个男人可以如此温柔。虽然我是一个非典型工科女，也会说矫情的话，可是我真的想不到还有什么比一句我爱你更加深情的表达。看着他的眼睛，三秒我就败下阵来，忍不住笑开了花。听着他的声音，我希望不要停下来，我要听他说好多好多话，情话和废话。\n\n我说他是我的幸运星，是来帮我「冲喜」的。啊哈哈哈哈哈哈。是因为，从他表白之后，我的生活真的在一点点变好。他解救了我丧气的心情。而且，2019 年第四件事儿，一个决定了我离开学校步入社会的生活轨迹的事儿，来了。秋招，offer，工作。很想骄傲的说，做一个小小的 offer 收割机，真好。除了字节无缘，面试过的公司，百度、京东、滴滴、美团、顺丰、华为、快手，还有我的秋招初心，腾讯，全都发了 offer。没错，这里，我就是来秀的。在 2019 年的愿望清单里，我有写到，想要在深圳找到一份满意的工作。现在年度总结里，我想说，我做到了。拿到了自己心仪的 offer，去自己喜欢的城市，还有，那座城市里，有他～真的很开心。\n\n现在的 01，很好。在努力的消化着爸爸的离去，也在认真的朝着自己想要的生活努力。我爱我亲爱的家人，也真心的谢谢那些一直陪伴着我的好朋友们～我的鹭宝宝，我的群群脑婆，我的大喵，我的龙龙北北，3308 的小仙女们，梁良，晓宇，志强，朱雪，还有我洋葱的小伙伴们和美团的弟弟、老哥们。01 一直都很幸运，一路都有很多人陪，不管是相伴到如今的挚友，还是同行一段路的曾经的朋友。\n\n我还是很爱自己，爱这个爱笑的 01。\n\n2019 年度总结的最后，是 2020 年的愿望清单：\n\n- 顺利完成论文，顺利毕业\n- 拍好看的毕业照\n- 去日本毕业旅行\n- 在深圳租个不错的房子，室友 nice\n- 养一只猫\n- 健身是永恒的主题\n- 多看些书\n\n2020年，祝顺利。\n","tags":["年度总结"],"categories":["01的小生活"]},{"title":"Vue计算属性(computed)和侦听属性(watch)","url":"/2019/12/29/Vue计算属性(computed)和侦听属性(watch)/","content":"\n# Vue计算属性(computed)和侦听属性(watch)\n\n## 计算属性\n\n### 介绍\n\n计算属性是自动监听依赖值的变化，从而动态返回内容，监听是一个过程，在监听的值变化时，可以触发一个回调，并做一些事情。它有以下几个特点：\n\n- 数据可以进行逻辑处理，减少模板中计算逻辑。\n- 对计算属性中的数据进行监视\n- 依赖固定的数据类型（响应式数据）\n\n计算属性由两部分组成：get和set，分别用来获取计算属性和设置计算属性。默认只有get，如果需要set，要自己添加。另外set设置属性，并不是直接修改计算属性，而是修改它的依赖。\n\n```javascript\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      //this.fullName = newValue 这种写法会报错\n      var names = newValue.split(' ')\n      this.firstName = names[0]//对它的依赖进行赋值\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n```\n\n### 计算属性 vs 普通属性\n\n可以像绑定普通属性一样在模板中绑定计算属性，在定义上有区别：计算属性的属性值必须是一个函数。\n\n```javascript\ndata:{ //普通属性\n  msg:'浪里行舟',\n},\ncomputed:{ //计算属性\n  msg2:function(){ //该函数必须有返回值，用来获取属性，称为get函数\n    return '浪里行舟';\n  },\n  reverseMsg:function(){\n  //可以包含逻辑处理操作，同时reverseMsg依赖于msg,一旦msg发生变化，reverseMsg也会跟着变化\n    return this.msg.split(' ').reverse().join(' ');\n }\n```\n\n### 计算属性 vs 方法\n\n**两者最主要的区别：computed 是可以缓存的，methods 不能缓存；**\n\n**只要相关依赖没有改变，多次访问计算属性得到的值是之前缓存的计算结果，不会多次执行。**网上有种说法就是方法可以传参，而计算属性不能，其实并不准确，计算属性可以通过闭包来实现传参：\n\n```javascript\n:data=\"closure(item, itemName, blablaParams)\"\ncomputed: {\n closure () {\n   return function (a, b, c) {\n        /** do something */\n        return data\n    }\n }\n}\n```\n\n## 侦听属性\n\nVue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性watch。**watch中可以执行任何逻辑，如函数节流，Ajax异步获取数据，甚至操作 DOM（不建议）。**\n\n### 常规用法\n\n```vue\n<template>\n  <div class=\"attr\">\n    <h1>watch属性</h1>\n    <h2>{{ $data }}</h2>\n    <button @click=\"() => (a += 1)\">修改a的值</button>\n  </div>\n</template>\n<script>\nexport default {\n  data() {\n    return {\n      a: 1,\n      b: { c: 2, d: 3 },\n      e: {\n        f: {\n          g: 4\n        }\n      },\n      h: []\n    };\n  },\n  watch: {\n    a: function(val, oldVal) {\n      this.b.c += 1;\n    },\n    \"b.c\": function(val, oldVal) {\n      this.b.d += 1;\n    },\n    \"b.d\": function(val, oldVal) {\n      this.e.f.g += 1;\n    },\n    e: {\n      handler: function(val, oldVal) {\n        this.h.push(\"浪里行舟\");\n      },\n      deep: true //用于监听e对象内部值的变化\n    }\n  }\n};\n</script>\n```\n\n### 使用 watch 的深度遍历和立即调用功能\n\n使用 watch 来监听数据变化的时候除了常用到 handler 回调，其实其还有两个参数，便是：\n\n- deep 设置为 true 用于监听对象内部值的变化\n- immediate 设置为 true 将立即以表达式的当前值触发回调\n\n```vue\n<template>\n    <button @click=\"obj.a = 2\">修改</button>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            obj: {\n                a: 1,\n            }\n        }\n    },\n    watch: {\n        obj: {\n            handler: function(newVal, oldVal) {\n                console.log(newVal); \n            },\n            deep: true,\n            immediate: true \n        }\n    }\n}\n</script>\n```\n\n以上代码我们修改了 obj 对象中 a 属性的值，我们可以触发其 watch 中的 handler 回调输出新的对象，而如果不加 deep: true，我们只能监听 obj 的改变，并不会触发回调。同时我们也添加了 immediate: true 配置，其会立即以 obj 的当前值触发回调。\n\n## computed和watch两者之间对比\n\n![](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5tpjgacj30ip078q2z.jpg)\n\n从上面流程图中，我们可以看出它们之间的区别：\n\n- watch：监测的是属性值， 只要属性值发生变化，其都会触发执行回调函数来执行一系列操作。\n- computed：监测的是依赖值，依赖值不变的情况下其会直接读取缓存进行复用，变化的情况下才会重新计算。\n\n除此之外，有点很重要的区别是：**计算属性不能执行异步任务，计算属性必须同步执行**。也就是说计算属性不能向服务器请求或者执行异步任务。如果遇到异步任务，就交给侦听属性。watch也可以检测computed属性。\n\n计算属性适合用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。\n\n- computed能做的，watch都能做，反之则不行\n- 能用computed的尽量用computed","tags":["VUE"],"categories":["VUE"]},{"title":"深入浅出Node.js学习笔记（二）","url":"/2019/12/19/深入浅出Node.js学习笔记（二）/","content":"\n# 深入浅出Node.js学习笔记（二）\n\n## 第四章 异步编程\n\n### 函数式编程\n\n#### 高阶函数\n\n高阶函数是可以把函数作为参数，或是将函数作为返回值的函数\n\n```javascript\nfunction foo(x) { \n  return function () {\n    return x; \n  };\n}\n```\n\n后续传递风格(Continuation Passing Style)的结果接收 方式，而非单一的返回值形式。后续传递风格的程序编写将函数的业务重点从返回值转移到了回调函数中。\n\n##### 例子\n\nECMAScript5中提供的一些数组方法(sort()、forEach()、 map()、reduce()、reduceRight()、filter()、every()、some())十分典型\n\n#### 偏函数用法\n\n偏函数用法是指创建一个调用另外一个部分——参数或变量已经预置的函数——的函数的用法\n\n```javascript\nvar toString = Object.prototype.toString;\nvar isString = function (obj) {\n  return toString.call(obj) == '[object String]';\n};\nvar isFunction = function (obj) {\n  return toString.call(obj) == '[object Function]'; \n};\n```\n\n我们需要重复去定义一些相似的函数，如果有更多的isXXX()，就会出现更多的冗余代码.\n\n```javascript\nvar isType = function (type) { \n  return function (obj) {\n    return toString.call(obj) == '[object ' + type + ']'; \n  };\n};\nvar isString = isType('String');\nvar isFunction = isType('Function');\n```\n\n这 种通过指定部分参数来产生一个新的定制函数的形式就是偏函数\n\n### 异步编程的优势与难点\n\n#### 优势\n\n最大的特性：基于事件驱动的非阻塞I/O模型\n\n非阻塞I/O可以使CPU与I/O并不相互依赖等待，让资源得到更好的利用\n\n并行带来的想象空间更大，延展而开的是分布式和云。并行使得各个单点之间能够更有效地组织起来\n\n![image-20191213111035164](https://tva1.sinaimg.cn/large/006tNbRwgy1g9ux6kboyzj30qc0iu3zv.jpg)\n\n#### 难点\n\n##### 难点1:异常处理\n\n异步I/O的实现主要包含两个阶段:提交请求和处理结果。这两个阶段中间有事件循环的调度，两者彼此不关联。异步方法则通常在第一个阶段提交请求后立即返回，因为异常并不一定发生在这个阶段，try/catch的功效在此处不会发挥任何作用。\n\n```javascript\nvar async = function (callback) {\n  process.nextTick(callback);\n};\n```\n\n```javascript\ntry {\n  async(callback); \n} catch (e) { \n  // TODO\n}\n```\n\n调用async()方法后，callback被存放起来，直到下一个事件循环(Tick)才会取出来执行。尝试对异步方法进行try/catch操作只能捕获当次事件循环内的异常，对callback执行时抛出的异常将无能为力。\n\nNode在处理异常上形成了一种约定，将异常作为回调函数的第一个实参传回，如果为空值，则表明异步调用没有异常抛出：\n\n```javascript\nasync(function (err, results) { \n  // TODO\n});\n```\n\n自行编写的异步方法上，需要去遵循这样一些原则: \n\n* 原则一:必须执行调用者传入的回调函数; \n* 原则二:正确传递回异常供调用者判断。\n\n##### 难点2:函数嵌套过深\n\n##### 难点3:阻塞代码\n\n没有sleep()这样的线程沉睡功能\n\nsetInterval()和setTimeout()并不能阻塞后续代码的持续执行\n\n##### 难点4:多线程编程\n\n对于服务器端而言，如果服务器是多核CPU，单个Node进程实质上是没有充分利用多核CPU的。\n\nNode借鉴了这个模式，child_process是其基础API，cluster模块是更深层次的应用。借助Web Workers的模式，开发人员要更多地去面临跨线程的编程，这对于以往的JavaScript编程经验是较少考虑的。\n\n##### 难点5:异步转同步\n\nNode中试图同步式编程，但并不能得到原生支持，需要借助库或者编译等手段来实现\n\n### 异步编程解决方案\n\n#### 事件发布/订阅模式\n\n事件监听器模式是一种广泛用于异步编程的模式，是回调函数的事件化，又称发布/订阅模式\n\n```javascript\n// 订阅\nemitter.on(\"event1\", function (message) {\n  console.log(message); \n});\n// 发布\nemitter.emit('event1', \"I am message!\");\n```\n\n事件发布/订阅模式可以实现一个事件与多 个回调函数的关联，这些回调函数又称为事件侦听器。通过emit()发布事件后，消息会立即传递给当前事件的所有侦听器执行。侦听器可以很灵活地添加和删除，使得事件和具体处理逻辑之间可以很轻松地关联和解耦。\n\nNode对事件发布/订阅的机制做了一些额外的处理，这大多是基于健壮性而考虑的:\n\n* 如果对一个事件添加了超过10个侦听器，将会得到一条警告。这一处设计与Node自身单线程运行有关，设计者认为侦听器太多可能导致内存泄漏，所以存在这样一条警告。调用emitter.setMaxListeners(0);可以将这个限制去掉。另一方面，由于事件发布会引起一系列侦听器执行，如果事件相关的侦听器过多，可能存在过多占用CPU的情景。\n* 为了处理异常，EventEmitter对象对error事件进行了特殊对待。如果运行期间的错误触发了error事件，EventEmitter会检查是否有对error事件添加过侦听器。如果添加了，这个错误将会交由该侦听器处理，否则这个错误将会作为异常抛出。如果外部没有捕获这个异常，将会引起线程退出。一个健壮的EventEmitter实例应该对error事件做处理。\n\n##### 1. 继承events模块\n\n```javascript\nvar events = require('events');\nfunction Stream() { \n  events.EventEmitter.call(this);\n}\nutil.inherits(Stream, events.EventEmitter);\n```\n\nNode在util模块中封装了继承的方法，所以此处可以很便利地调用。开发者可以通过这样的方式轻松继承EventEmitter类，利用事件机制解决业务问题。在Node提供的核心模块中，有近半数都继承自EventEmitter。\n\n##### 2. 利用事件队列解决雪崩问题\n\n雪崩问题，就是在高访问量、大并发量的情况下缓存失效的情景，此时大量的请求同时涌入数据库中，数据库无法同时承受如此大的查询请求，进而往前影响到网站整体的响应速度\n\n```javascript\nvar proxy = new events.EventEmitter();\nvar status = \"ready\";\nvar select = function (callback) {\n  proxy.once(\"selected\", callback); \n  if (status === \"ready\") {\n    status = \"pending\";\n    db.select(\"SQL\", function (results) {\n      proxy.emit(\"selected\", results);\n      status = \"ready\"; \n    });\n } \n};\n```\n\n利用了once()方法，将所有请求的回调都压入事件队列中，利用其执行一次就会将监视器移除的特点，保证每一个回调只会被执行一次。对于相同的SQL语句，保证在同一个查询开始到结束的过程中永远只有一次。\n\n##### 3. 多异步之间的协作方案\n\n由于多个异步场景中回调函数的执行并不能保证顺序，且回调函数之间互相没有任何交集，所以需要借助一个第三方函数和第三方变量来处理异步协作的结果。通常，我们把这个用于检测次数的变量叫做哨兵变量\n\n##### 4. EventProxy的原理\n\nEventProxy来自于Backbone的事件模块，Backbone的事件模块是Model、View模块的基础功能，在前端有广泛的使用。它在每个非all事件触发时都会触发一次all事件\n\n```javascript\n// Trigger an event, firing all bound callbacks. Callbacks are passed the \n// same arguments as `trigger` is, apart from the event name.\n// Listening for `\"all\"` passes the true event name as the first argument \ntrigger : function(eventName) {\n  var list, calls, ev, callback, args;\n  var both = 2;\n  if (!(calls = this._callbacks)) return this;\n  while (both--) {\n    ev = both ? eventName : 'all'; \n    if (list = calls[ev]) {\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (!(callback = list[i])) {\n          list.splice(i, 1); i--; l--; \n        } else {\n          args = both ? Array.prototype.slice.call(arguments, 1) : arguments;\n\n          callback[0].apply(callback[1] || this, args); \n        }\n      }\n    }\n  }\n  return this; \n}\n```\n\nEventProxy则是将all当做一个事件流的拦截层，在其中注入一些业务来处理单一事件无法解决的异步处理问题。类似的扩展方法还有all()、tail()、after()、not()和any()等。\n\n##### 5. EventProxy的异常处理\n\n```javascript\nexports.getContent = function (callback) { \n  var ep = new EventProxy();\n  ep.all('tpl', 'data', function (tpl, data) { \n    // 成功回调\n    callback(null, {\n      template: tpl,\n      data: data \n    });\n}); \n  //绑定错误处理函数 \n  ep.fail(callback);\n  fs.readFile('template.tpl', 'utf-8', ep.done('tpl'));\n  db.get('some sql', ep.done('data')); \n};\n```\n\nEventProxy提供了fail()和done()这两个实例方法来优化异常处理，使得开发者将精力关注在业务部分，而不是在异常捕获上。\n\n###### fail()方法的实现\n\n```javascript\nep.fail(callback);\n```\n\n等价于：\n\n```javascript\nep.fail(function (err) { \n  callback(err);\n});\n```\n\n又等价于:\n\n```javascript\nep.bind('error', function (err) { \n  // 卸载掉所有处理函数 \n  ep.unbind();\n  // 异常回调\n  callback(err); \n});\n```\n\n###### done()方法的实现\n\n```javascript\nep.done('tpl');\n```\n\n等价于:\n\n```javascript\nfunction (err, content) { \n  if (err) {\n  // 一旦发生异常，一律交给error事件处理函数处理\n  return ep.emit('error', err); \n  }\n  ep.emit('tpl', content); \n}\n```\n\n#### Promise/Deferred模式\n\n先执行异步调用，延迟传递处理的方式\n\n```javascript\n$.get('/api') \n  .success(onSuccess) \n  .error(onError) \n  .complete(onComplete);\n```\n\n这使得即使不调用success()、error()等方法，Ajax也会执行，这样的调用方式比预先传入回调让人觉得舒适一些。\n\n在原始的API中，一个事件只能处理一个回调，而通过Deferred对象，可以对事件加入任意的业务处理逻辑。\n\n```javascript\n$.get('/api') \n  .success(onSuccess1) \n  .success(onSuccess2);\n```\n\nCommonJS草案目前已经抽象出了Promises/A、 Promises/B、Promises/D这样典型的异步Promise/Deferred模型，这使得异步操作可以以一种优雅的方式出现。\n\n##### Promises/A\n\n- Promise操作只会处在3种状态的一种:未完成态、完成态和失败态。\n- Promise的状态只会出现从未完成态向完成态或失败态转化，不能逆反。完成态和失败态不能互相转化。\n- Promise的状态一旦转化，将不能被更改。\n\n![image-20191216113903367](https://tva1.sinaimg.cn/large/006tNbRwgy1g9yev5y4i1j30gs0c4q3v.jpg)\n\n###### Promise对象的then()\n\n一个Promise对象只要具备then()方法即可\n\n* 接受完成态、错误态的回调方法。在操作完成或出现错误时，将会调用对应方法。\n* 可选地支持progress事件回调作为第三个方法。\n* then()方法只接受function对象，其余对象将被忽略。 \n* then()方法继续返回Promise对象，以实现链式调用。\n\n###### Deferred，延迟对象\n\n触发执行这些回调函数的地方，实现这些功能的对象通常被称为Deferred，即延迟对象\n\n###### Promise和Deferred的差别\n\nDeferred主要是用于内部， 用于维护异步模型的状态;Promise则作用于外部，通过then()方法暴露给外部以添加自定义逻辑。\n\n![image-20191216114535955](https://tva1.sinaimg.cn/large/006tNbRwgy1g9yf1x7tvnj30ws0coabq.jpg)\n\n##### Promise中的多异步协作\n\n通过all()方法抽象多个异步操作。只有所有异步操作成功，这个异步操作才算成功， 一旦其中一个异步操作失败，整个异步操作就失败。\n\n##### Promise的进阶知识\n\n* 支持序列执行的Promise\n\n  ```javascript\n  promise()\n    .then(obj.api1) \n    .then(obj.api2) \n    .then(obj.api3) \n    .then(obj.api4) \n    .then(function (value4) {\n    // Do something with value4 \n  }, function (error) {\n    // Handle any error from step1 through step4 \n  })\n    .done();\n  \n  ```\n\n  改造一下代码以实现链式调用\n\n  ```javascript\n  var Deferred = function () { \n    this.promise = new Promise();\n  };\n  \n  // 完成态\n  Deferred.prototype.resolve = function (obj) {\n    var promise = this.promise;\n    var handler;\n    while ((handler = promise.queue.shift())) {\n      if (handler && handler.fulfilled) { \n        var ret = handler.fulfilled(obj); \n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue; \n          this.promise = ret; \n          return;\n        } \n      }\n    } \n  };\n  \n  // 失败态\n  Deferred.prototype.reject = function (err) {\n    var promise = this.promise;\n    var handler;\n    while ((handler = promise.queue.shift())) {\n      if (handler && handler.error) { \n        var ret = handler.error(err); \n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue; \n          this.promise = ret;\n          return; \n        }\n      } \n    }\n  };\n  \n   // 生成回调函数 \n  Deferred.prototype.callback = function () {\n    var that = this;\n    return function (err, file) {\n      if (err) {\n        return that.reject(err);\n      }\n      that.resolve(file); \n    };\n  };\n  \n  var Promise = function () {\n    // 队列用于存储待执行的回调函数 \n    this.queue = [];\n    this.isPromise = true;\n  };\n  \n  Promise.prototype.then = function (fulfilledHandler, errorHandler, progressHandler) { \n    var handler = {};\n    if (typeof fulfilledHandler === 'function') {\n      handler.fulfilled = fulfilledHandler; \n    }\n    if (typeof errorHandler === 'function') { \n      handler.error = errorHandler;\n    } \n    this.queue.push(handler); \n    return this;\n  };\n  ```\n\n读取第二个文件是依 赖于第一个文件中的内容的\n\n```javascript\nvar readFile1 = function (file, encoding) {\n  var deferred = new Deferred();\n  fs.readFile(file, encoding, deferred.callback());\n  return deferred.promise;\n};\nvar readFile2 = function (file, encoding) {\n  var deferred = new Deferred();\n  fs.readFile(file, encoding, deferred.callback());\n  return deferred.promise;\n};\nreadFile1('file1.txt', 'utf8').then(function (file1) { \n  return readFile2(file1.trim(), 'utf8');\n}).then(function (file2) { \n  console.log(file2);\n});\n```\n\n要让Promise支持链式执行，主要通过以下两个步骤。\n (1) 将所有的回调都存到队列中。\n (2) Promise完成时，逐个执行回调，一旦检测到返回了新的Promise对象，停止执行，然后将当前Deferred对象的promise引用改变为新的Promise对象，并将队列中余下的回调转交给它。\n\n* 将API Promise化\n\n可以 批量将方法Promise化\n\n```javascript\n// smooth(fs.readFile);\nvar smooth = function (method) {\n  return function () {\n    var deferred = new Deferred();\n    var args = Array.prototype.slice.call(arguments, 0); \n    args.push(deferred.callback());\n    method.apply(null, args);\n    return deferred.promise;\n  }; \n};\n```\n\n于是前面的两次文件读取的构造可以简化为:\n\n```javascript\nvar readFile = smooth(fs.readFile);\n```\n\n于是代码锐减到：\n\n```javascript\nvar readFile = smooth(fs.readFile); readFile('file1.txt', 'utf8').then(function (file1) {\n  return readFile(file1.trim(), 'utf8'); }).then(function (file2) {\n  // file2 => I am file2\n  console.log(file2); \n});\n```\n\n#### 流程控制库\n\n##### 1. 尾触发与Next\n\n需要手工调用才能持续执行后续调用的\n\n![image-20191216150057148](https://tva1.sinaimg.cn/large/006tNbRwgy1g9ykp64h0pj314a0bggn2.jpg)\n\n中间件机制使得在处理网络请求时，可以像面向切面编程一样进行过滤、验证、日志等功能， 而不与具体业务逻辑产生关联，以致产生耦合\n\n尽管中间件这种尾触发模式并不要求每个中间方法都是异步的，但是如果每 个步骤都采用异步来完成，实际上只是串行化的处理，没办法通过并行的异步调用来提升业务的 处理效率。流式处理可以将一些串行的逻辑扁平化，但是并行逻辑处理还是需要搭配事件或者 Promise完成的，这样业务在纵向和横向都能够各自清晰。\n\n在Connect中，尾触发十分适合处理网络请求的场景。将复杂的处理逻辑拆解为简洁、单一 的处理单元，逐层次地处理请求对象和响应对象。\n\n##### 2. async\n\n###### 异步的串行执行\n\n```javascript\nasync.series([\n  function (callback) {\n    fs.readFile('file1.txt', 'utf-8', callback); \n  },\n  function (callback) {\n    fs.readFile('file2.txt', 'utf-8', callback);\n  }\n], function (err, results) {\n  // results => [file1.txt, file2.txt] \n});\n```\n\n这段代码等价于:\n\n```javascript\nfs.readFile('file1.txt', 'utf-8', function (err, content) { \n  if (err) {\n    return callback(err); \n  }\n  fs.readFile('file2.txt ', 'utf-8', function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, [content, data]); \n  });\n});\n```\n\nseries()方法中传入的函数callback()并非由使用者指定。事实上，此处的回调函数由async通过高阶函数的方式注入，这里隐含了特殊的逻 辑。每个callback()执行时会将结果保存起来，然后执行下一个调用，直到结束所有调用。最终的回调函数执行时，队列里的异步调用保存的结果以数组的方式传入。这里的异常处理规则是一 旦出现异常，就结束所有调用，并将异常传递给最终回调函数的第一个参数。\n\n###### 异步的并行执行\n\n当我们需要通过并行来提升性能时，async提供了parallel()方法，用以并行执行一些异步操作。\n\n```javascript\nasync.parallel([ \n  function (callback) {\n    fs.readFile('file1.txt', 'utf-8', callback); \n  },\n  function (callback) {\n    fs.readFile('file2.txt', 'utf-8', callback);\n  }\n], function (err, results) {\n  // results => [file1.txt, file2.txt] \n});\n```\n\n上面这段代码等价于下面的代码:\n\n```javascript\nvar counter = 2;\nvar results = [];\nvar done = function (index, value) {\n  results[index] = value; \n  counter--;\n  if (counter === 0) {\n    callback(null, results); \n  }\n};\n\n// 只传递第一个异常\nvar hasErr = false;\nvar fail = function (err) {\n  if (!hasErr) { \n    hasErr = true; \n    callback(err);\n  } \n};\nfs.readFile('file1.txt', 'utf-8', function (err, content) { \n  if (err) {\n    return fail(err); \n  }\n  done(0, content); \n});\nfs.readFile('file2.txt', 'utf-8', function (err, data) { \n  if (err) {\n    return fail(err); \n  }\n  done(1, data); \n});\n```\n\n通过async编写的代码既没有深度的嵌套，也没有复杂的状态判断，它的诀窍依然来 自于注入的回调函数\n\nparallel()方法对于异常的判断依然是一旦某个异步调用产生了异常，就 会将异常作为第一个参数传入给最终的回调函数。只有所有异步调用都正常完成时，才会将结果 以数组的方式传入。\n\n###### 异步调用的依赖处理\n\nseries()适合无依赖的异步串行执行，但当前一个的结果是后一个调用的输入时，series()方法就无法满足需求了\n\nasync提供了**waterfall()**方法来满足\n\n```javascript\nasync.waterfall([ \n  function (callback) {\n    fs.readFile('file1.txt', 'utf-8', function (err, content) { \n      callback(err, content);\n    }); \n  },\n  function (arg1, callback) {\n    // arg1 => file2.txt\n    fs.readFile(arg1, 'utf-8', function (err, content) {\n      callback(err, content); \n    });\n  },\n  function(arg1, callback){ \n    // arg1 => file3.txt\n    fs.readFile(arg1, 'utf-8', function (err, content) {\n      callback(err, content); \n    });\n  }\n], function (err, result) {\n  // result => file4.txt \n});\n```\n\n* 自动依赖处理\n\nauto()方法能根据依赖关系自动分析，以最佳的顺序执行业务\n\n```javascript\nasync.auto(deps);\n```\n\n##### 3. Step\n\n```javascript\nStep(task1, task2, task3);\n```\n\nStep接受任意数量的任务，所有的任务都将会串行依次执行。\n\n```javascript\nStep(\n  function readFile1() {\n    fs.readFile('file1.txt', 'utf-8', this);\n  },\n  function readFile2(err, content) {\n    fs.readFile('file2.txt', 'utf-8', this);\n  },\n  function done(err, content) {\n    console.log(content); \n  }\n);\n```\n\nStep用到了this关键字。事实上，它是Step内部的一个next()方法，将异步调用的结果传递给下一个任务作为参 数，并调用执行。\n\n* 并行任务执行\n\nthis具有一个parallel()方法，它告诉Step，需要等所有任务完成时才进行下一个任务\n\n```javascript\nStep(\n  function readFile1() {\n    fs.readFile('file1.txt', 'utf-8', this.parallel());\n    fs.readFile('file2.txt', 'utf-8', this.parallel()); \n  },\n  function done(err, content1, content2) { \n    // content1 => file1\n    // content2 => file2 \n    console.log(arguments);\n  } \n);\n```\n\n使用parallel()的时候需要小心的是，如果异步方法的结果传回的是多个参数，Step将只会取前两个参数\n\nStep的parallel()方法的原理是每次执行时将内部的计数器加1，然后返回一个回调函数，这个回调函数在异步调用结束时才执行。当回调函数执行时，将计数器减1。当计数器为0的时候， 告知Step所有异步调用结束了，Step会执行下一个方法。\n\nStep与async相同的是异常处理，一旦有一个异常产生，这个异常会作为下一个方法的第一个 参数传入\n\n* 结果分组\n\n```javascript\nStep(\n  function readDir() {\n    fs.readdir(__dirname, this); \n  },\n  function readFiles(err, results) {\n    if (err) throw err;\n    // Create a new group\n    var group = this.group();\n    results.forEach(function (filename) {\n      if (/\\.js$/.test(filename)) {\n        fs.readFile(__dirname + \"/\" + filename, 'utf8', group());\n      } \n    });\n  },\n  function showAll(err, files) {\n    if (err) throw err;\n    console.dir(files); \n  }\n);\n```\n\n我们注意到有两次group()的调用。第一次调用是告知Step要并行执行，第二次调用的结果将会生成一个回调函数，而回调函数接受的返回值将会按组存储。\n\nparallel()传递给下一个任务的 结果是如下形式:\n\n```javascript\nfunction (err, result1, result2, ...);\n```\n\ngroup()传递的结果是:\n\n```javascript\nfunction (err, results);\n```\n\n这个函数返回的数据保存在数组中。\n\n##### 4. wind\n\n* 异步任务定义\n\n```javascript\neval(Wind.compile(\"async\", function() {}));\nWind.Async.sleep(20);\n```\n\nWind.compile()会将普通的函数进行编译，然后交给eval()执行。\n\neval(Wind.compile(\"async\", function () {}));定义了异步任务。Wind.Async.sleep();内置了对setTimeout()的封装。\n\n除了通过eval(Wind.compile(\"async\", function () {}));定义任务外，正式的任务创建方法为Task.create()。\n\n* $await()与任务模型\n\n```javascript\n$await()\n```\n\n事实上，它并不是一个方法，也不存在于上下文中，只是一个等待的占位符，告之编译器这里需要等待。\n\n$await()接受的参数是一个任务对象，表示等待任务结束后才会执行后续操作。每一个异步 操作都可以转化为一个任务，wind正是基于任务模型实现的。\n\nwind提供了whenAll()来处理并发，通过$await关键字将等待配置的所有任务完成后才向下继续执行。\n\n```javascript\nvar parallel = eval(Wind.compile(\"async\", function () { \n  var result = $await(Task.whenAll({\n    file1: readFileAsync('file1.txt', 'utf-8'),\n    file2: readFileAsync('file2.txt', 'utf-8') \n  }));\n  console.log(result.file1);\n  \n  console.log(result.file2); }));\nparallel().start();\n//得到输出:\nfile1 file2\n```\n\n* 异步方法转换辅助函数\n\n这种近同步编程的体验需要我们额外 或者提前完成的事情是:将异步方法任务化。\n\nwind提供了两个 方法来辅助转换:\n\n1. Wind.Async.Binding.fromCallback 用于转换这类无异常的异步调用为wind中的任务\n2. Wind.Async.Binding.fromStandard 用于转换这类带异常的异步调用到wind中的任务。\n\n### 异步并发控制\n\n同步I/O因为每个I/O都是彼此阻塞的，在循环体 中，总是一个接着一个调用，不会出现耗用文件描述符太多的情况，同时性能也是低下的;对于 异步I/O，虽然并发容易实现，但是由于太容易实现，依然需要控制。换言之，尽管是要压榨底 层系统的性能，但还是需要给予一定的过载保护，以防止过犹不及。\n\n#### bagpipe的解决方案\n\n* 通过一个队列来控制并发量。\n* 如果当前活跃(指调用发起但未执行回调)的异步调用量小于限定值，从队列中取出执行。 \n* 如果活跃调用达到限定值，调用暂时存放在队列中。\n* 每个异步调用结束时，从队列中取出新的异步调用执行\n\n用户传入的回调函数被真正执行前，被封装替换过。这个封装的回调函数内部的逻辑将活跃 值的计数器减1后，主动调用next()执行后续等待的异步调用。\n\nbagpipe类似于打开了一道窗口，允许异步调用并行进行，但是严格限定上限。仅仅在调用 push()时分开传递，并不对原有API有任何侵入。\n\n##### 拒绝模式\n\n```javascript\n// 设定最大并发数为10\nvar bagpipe = new Bagpipe(10, {\n  refuse: true \n});\n```\n\n在拒绝模式下，如果等待的调用队列也满了之后，新来的调用就直接返给它一个队列太忙的 拒绝异常。\n\n##### 超时控制\n\n造成队列拥塞的主要原因是异步调用耗时太久，调用产生的速度远远高于执行的速度。为了防止某些异步调用使用了太多的时间，我们需要设置一个时间基线，将那些执行时间太久的异步调用 清理出活跃队列，让排队中的异步调用尽快执行。否则在拒绝模式下，会有太多的调用因为某个执 行得慢，导致得到拒绝异常。\n\n超时控制是为异步调用设置一个时间阈值，如果异步调用 没有在规定时间内完成，我们先执行用户传入的回调函数，让用户得到一个超时异常，以尽早返 回。然后让下一个等待队列中的调用执行。\n\n```javascript\n// 设定最大并发数为10\nvar bagpipe = new Bagpipe(10, {\n  timeout: 3000 \n});\n```\n\n#### async的解决方案\n\nasync也提供了一个方法用于处理异步调用的限制:parallelLimit()\n\n```javascript\nasync.parallelLimit([ \n  function (callback) {\n    fs.readFile('file1.txt', 'utf-8', callback); \n  },\n  function (callback) {\n    fs.readFile('file2.txt', 'utf-8', callback);\n  }\n], 1, function (err, results) {\n  // TODO \n});\n```\n\nparallelLimit()与parallel()类似，但多了一个用于限制并发数量的参数，使得任务只能同 时并发一定数量，而不是无限制并发。\n\nparallelLimit()方法的缺陷在于无法动态地增加并行任务。async提供了queue()方法 来满足该需求.\n\n```javascript\nvar q = async.queue(function (file, callback) {\n  fs.readFile(file, 'utf-8', callback);\n},2);\nq.drain=function(){\n  // 完成了队列中的所有任务 \n};\nfs.readdirSync('.').forEach(function (file) {\n  q.push(file, function (err, data) {\n    // TODO \n  });\n});\n```\n\n尽管queue()实现了动态添加并行任务，但是相比parallelLimit()，由于queue()接收的参数是固定的，它丢失了parallelLimit()的多样性\n\n## 第五章 内存控制\n\n### V8 的垃圾回收机制与内存限制\n\n#### V8 的内存限制\n\n在Node中通过JavaScript 使用内存时就会发现只能使用部分内存(64位系统下约为1.4 GB，32位系统下约为0.7 GB)。在 这样的限制下，将会导致Node无法直接操作大内存对象。\n\n造成这个问题的主要原因在于Node基于V8构建，所以在Node中使用的JavaScript对象基本上 都是通过V8自己的方式来进行分配和管理的。V8的这套内存管理机制在浏览器的应用场景下使 用起来绰绰有余，足以胜任前端页面中的所有需求。但在Node中，这却限制了开发者随心所欲使 用大内存的想法。\n\n#### V8 的对象分配\n\n##### 内存使用量的查看\n\n在V8中，所有的JavaScript对象都是通过堆来进行分配的。Node提供了V8中内存使用量的查 看方式，执行下面的代码，将得到输出的内存信息:\n\n```javascript\n$ node\n> process.memoryUsage(); \n{ rss: 14958592,\n  heapTotal: 7195904, \n  heapUsed: 2821496 \n}\n```\n\nheapTotal和heapUsed是V8的堆内存使用情况，前者是已申请到的堆内存，后者是当前使用的量。\n\n当我们在代码中声明变量并赋值时，所使用对象的内存就分配在堆中。如果已申请的堆空闲 内存不够分配新的对象，将继续申请堆内存，直到堆的大小超过V8的限制为止。\n\n##### V8限制堆大小的原因\n\n以1.5 GB的垃圾回收堆内存为例，V8做一次小的垃圾回收需要50毫秒以上，做一 次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JavaScript线程暂停执行的时间，在 这样的时间花销下，应用的性能和响应能力都会直线下降。这样的情况不仅仅后端服务无法接受， 前端浏览器也无法接受。因此，在当时的考虑下直接限制堆内存是一个好的选择。\n\n##### 调整内存限制的大小\n\n```javascript\nnode --max-old-space-size=1700 test.js // 单位为MB \n// 或者\nnode --max-new-space-size=1024 test.js // 单位为KB\n```\n\n#### V8 的垃圾回收机制\n\n##### V8主要的垃圾回收算法\n\nV8的垃圾回收策略主要基于分代式垃圾回收机制\n\n* V8的内存分代\n\n  在V8中，主要将内存分为新生代和老生代两代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。\n\n  ![image-20191219183341084](https://tva1.sinaimg.cn/large/006tNbRwgy1ga27phiuq7j30r005q74q.jpg)\n\n  V8堆的整体大小就是新生代所用内存空间加上老生代的内存空间。前面我们提及的 --max-old-space-size命令行参数可以用于设置老生代内存空间的最大值，--max-new-space-size 命令行参数则用于设置新生代内存空间的大小的。比较遗憾的是，这两个最大值需要在启动时就 指定。这意味着V8使用的内存没有办法根据使用情况自动扩充，当内存分配过程中超过极限值 时，就会引起进程出错。\n\n  * 对于新生代内存，它由两个reserved_semispace_size_所构成.按机器位数不同，reserved_semispace_size_在64位系统和32位系统上分别为16 MB和8 MB。所以新生 代内存的最大值在64位系统和32位系统上分别为32 MB和16 MB。\n  * 默认情况下，V8堆内存的最大值在64位系统上为1464 MB，32位系统上则为732 MB。 这个数值可以解释为何在64位系统下只能使用约1.4 GB内存和在32位系统下只能使用约0.7 GB 内存。\n\n* Scavenge算法\n\n  新生代中的对象主要通过Scavenge算法进行垃圾回收。在Scavenge的具体实现中，主要采用了Cheney算法。\n\n  * Cheney算法是一种采用复制的方式实现的垃圾回收算法。它将堆内存一分为二，每一部分空间称为semispace。在这两个semispace空间中，只有一个处于使用中，另一个处于闲置状态。处 于使用状态的semispace空间称为From空间，处于闲置状态的空间称为To空间。当我们分配对象 时，先是在From空间中进行分配。当开始进行垃圾回收时，会检查From空间中的存活对象，这 些存活对象将被复制到To空间中，而非存活对象占用的空间将会被释放。完成复制后，From空 间和To空间的角色发生对换。简而言之，在垃圾回收的过程中，就是通过将存活对象在两个 semispace空间之间进行复制。\n\n  * Scavenge的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但 Scavenge由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时 间效率上有优异的表现。\n\n  ![image-20191219184025403](https://tva1.sinaimg.cn/large/006tNbRwgy1ga27wgek1uj30rm07wq3m.jpg)\n\n  当一个对象经过多次复制依然存活时，它将会被认为是生命周期较长的对象。这种较长生命周期的对象随后会被移动到老生代中，采用新的算法进行管理。对象从新生代中移动到老生代中 的过程称为晋升。\n\n  在分代式垃圾回收的前提下，From空间中的存活对 象在复制到To空间之前需要进行检查。在一定条件下，需要将存活周期长的对象移动到老生代中， 也就是完成对象晋升。\n\n  对象晋升的条件主要有两个，一个是对象是否经历过Scavenge回收，一个是To空间的内存占用比超过限制。当要从From空间复制一个对象到To空间时，如果 To空间已经使用了超过25%，则这个对象直接晋升到老生代空间中\n\n  （设置25%这个限制值的原因是当这次Scavenge回收完成后，这个To空间将变成From空间，接 下来的内存分配将在这个空间中进行。如果占比过高，会影响后续的内存分配。）\n\n* Mark-Sweep & Mark-Compact\n\n  Mark-Sweep在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。**Scavenge中只复制活着的对象，而Mark-Sweep只清理死亡对象。**\n\n  Mark-Sweep最大的问题是在进行一次标记清除回收后，内存空间会出现不连续的状态。这种 内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有 的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。\n\n  在整理的 过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。\n\n  ![image-20191219184724646](https://tva1.sinaimg.cn/large/006tNbRwgy1ga283qesgnj317y08sq4f.jpg)\n\n  V8主要使用Mark-Sweep，在空间不足以对从新 生代中晋升过来的对象进行分配时才使用Mark-Compact。\n\n* Incremental Marking\n\n  为了避免出现JavaScript应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全 停顿”(stop-the-world)。\n\n  为了降低全堆垃圾回收带来的停顿时间，V8先从标记阶段入手，将原本要一口气停顿完成 的动作改为增量标记(incremental marking)，也就是拆分为许多小“步进”，每做完一“步进” 就让JavaScript应用逻辑执行一小会儿，垃圾回收与应用逻辑交替执行直到标记阶段完成。\n\n  ![image-20191219185100781](https://tva1.sinaimg.cn/large/006tNbRwgy1ga287h5jwqj30sk09qt9k.jpg)\n\n  V8在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。\n\n  V8后续还引入了延迟清理(lazy sweeping)与增量式整理(incremental compaction)，让清 理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低 每次停顿的时间。\n\n#### 查看垃圾回收日志\n\n查看垃圾回收日志的方式主要是在启动时添加--trace_gc参数。在进行垃圾回收时，将会从 标准输出中打印垃圾回收的日志信息。通过分析垃圾回收日志，可以了解垃圾回收的运行状况，找出垃圾回收的哪些阶段比较耗时， 触发的原因是什么。\n\n通过在Node启动时使用--prof参数，可以得到V8执行时的性能分析数据，其中包含了垃圾 回收执行时占用的时间。\n\n（V8提供了linux-tick-processor工具用于统计日志信息。该工具可以从Node源码的 deps/v8/tools目录下找到，Windows下的对应命令文件为windows-tick-processor.bat。将该目录添 加到环境变量PATH中，即可直接调用）\n\n### 高效使用内存\n\n#### 作用域\n\n##### 1. 标识符查找\n\n标识符，可以理解为变量名。\n\n##### 2. 作用域链\n\nJavaScript在执行时会去查找该变量定义在哪里。它最先查找的是当前作用域，如果在当前作 用域中无法找到该变量的声明，将会向上级的作用域里查找，直到查到为止。这样的查找方式使得作 用域像一个链条。由于标识符的查找方向是向上的，所以变量只能向外访问，而不能向内访问。\n\n##### 3. 变量的主动释放\n\n* 如果变量是全局变量(不通过var声明或定义在global变量上)，由于全局作用域需要直到 进程退出才能释放，此时将导致引用的对象常驻内存(常驻在老生代中)。如果需要释放常驻内 存的对象，可以通过delete操作来删除引用关系。或者将变量重新赋值，让旧的对象脱离引用关系。在接下来的老生代内存清除和整理的过程中，会被回收释放。\n\n* 在非全局作用域中，想主动释放变量引用的对象，也可以通过这样的方式。\n* 虽然 delete操作和重新赋值具有相同的效果，但是在V8中通过delete删除对象的属性有可能干扰V8 的优化，所以通过赋值方式解除引用更好。\n\n#### 闭包\n\n实现外部作用域访问内部作用域中变量的方法叫做闭包(closure)\n\n这得益 于高阶函数的特性:函数可以作为参数或者返回值。\n\n一旦有变量引用这个中间函数，这个中间函数将不会释放，同时也会使原始的作用域不会得到释放，作用域 中产生的内存占用也不会得到释放。除非不再有引用，才会逐步释放。\n\n### 内存指标\n\nos模块中的 totalmem()和freemem()方法也可以查看内存使用情况\n\n#### 查看内存使用情况\n\n##### 1. 查看进程的内存占用\n\n调用process.memoryUsage()可以看到Node进程的内存占用情况\n\n```javascript\n$ node\n> process.memoryUsage() \n{ rss: 13852672,\n  heapTotal: 6131200, \n  heapUsed: 2757120 \n}\n```\n\nrss是resident set size的缩写，即进程的常驻内存部分。进程的内存总共有几部分，一部分是 rss，其余部分在交换区(swap)或者文件系统(filesystem)中。\n\n除了rss外，heapTotal和heapUsed对应的是V8的堆内存信息。heapTotal是堆中总共申请的内 存量，heapUsed表示目前堆中使用中的内存量。这3个值的单位都是字节。\n\n##### 2. 查看系统的内存占用\n\nos模块中的totalmem()和freemem()这两个方法用于查看操作系统的内存使用情况，它们分别返回系统的总内存和闲置内存，以字节为单位。\n\n```javascript\n$ node\n> os.totalmem() \n8589934592\n> os.freemem() \n4527833088\n>\n```\n\n#### 堆外内存\n\n堆中的内存用量总是小于进程的常驻内存用 量，这意味着Node中的内存使用并非都是通过V8进行分配的。我们将那些不是通过V8分配的内存称为堆外内存。\n\nBuffer对象不同于其他对象，它不经过V8的内存分配机制，所以也不 会有堆内存的大小限制。\n\n利用堆外内存可以突破内存限制的问题。\n\n**Node的内存构成主要由通过V8进行分配的部分和Node自行分配的 部分。受V8的垃圾回收限制的主要是V8的堆内存。**\n\n### 内存泄漏\n\n造成内存泄漏的原因：\n\n* 缓存。\n* 队列消费不及时。\n* 作用域未释放。\n\n#### 慎将内存当做缓存\n\n* 在Node中，缓存并非物美价廉。一旦一个对象被当做缓存来使用，那就意味着它将会常 驻在老生代中。缓存中存储的键越多，长期存活的对象也就越多，这将导致垃圾回收在进行扫描 10 和整理时，对这些对象做无用功\n\n* JavaScript开发者通常喜欢用对象的键值对来缓存东西，但这与严格意义上 的缓存又有着区别，严格意义的缓存有着完善的过期策略，而普通对象的键值对并没有。\n\n##### 1. 缓存限制策略\n\n为了解决缓存中的对象永远无法释放的问题，需要加入一种策略来限制缓存的无限增长。\n\n模块机制：为了加速模块的引入，所有模块都会通 过编译执行，然后被缓存起来。由于通过exports导出的函数，可以访问文件模块中的私有变量， 这样每个文件模块在编译执行后形成的作用域因为模块缓存的原因，不会被释放。\n\n##### 2. 缓存的解决方案\n\n进 程之间无法共享内存。如果在进程内使用缓存，这些缓存不可避免地有重复，对物理内存的使用 是一种浪费。\n\n采用进程外的缓存，进程自身不存储状态。外 部的缓存软件有着良好的缓存过期淘汰策略以及自有的内存管理，不影响Node进程的性能。\n\n在Node中主要可以解决以下两个问题。\n\n(1) 将缓存转移到外部，减少常驻内存的对象的数量，让垃圾回收更高效。\n (2) 进程之间可以共享缓存。\n\n市面上较好的缓存有Redis和Memcached\n\n#### 关注队列状态\n\n队列在消费者-生产者模型中经常充当中间产物。一旦消费速度低于生产速度， 将会形成堆积。\n\n深度的解决方案应该是监控队列的长度，一旦堆积，应当通过监控系统产生报警并通知相关 人员。另一个解决方案是任意异步调用都应该包含超时机制，一旦在限定的时间内未完成响应， 通过回调函数传递超时异常，使得任意异步调用的回调都具备可控的响应时间，给消费速度一个 下限值。\n\n### 内存泄漏排查\n\n常见的定位Node应用的内存泄漏的工具：\n\n* v8-profiler。由Danny Coates提供，它可以用于对V8堆内存抓取快照和对CPU进行分析，但该项目已经有3年没有维护了。\n* node-heapdump。这是Node核心贡献者之一Ben Noordhuis编写的模块，它允许对V8堆内存抓取快照，用于事后分析。\n\n- node-mtrace。由Jimb Esser提供，它使用了GCC的mtrace工具来分析堆的使用。\n- dtrace。在Joyent的SmartOS系统上，有完善的dtrace工具用来分析内存泄漏。\n- node-memwatch。来自Mozilla的Lloyd Hilaiel贡献的模块，采用WTFPL许可发布。\n\n#### node-heapdump\n\n先构造如下一份包含内存泄 漏的代码示例，并将其存为server.js文件：\n\n```javascript\nvar leakArray = [];\nvar leak = function () {\n  leakArray.push(\"leak\" + Math.random()); \n};\nhttp.createServer(function (req, res) { \n  leak();\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n'); \n}).listen(1337);\n  console.log('Server running at http://127.0.0.1:1337/');\n```\n\n在上面这段代码中，每次访问服务进程都将引起leakArray数组中的元素增加，而且得不到回收。我们可以用curl工具输入http://127.0.0.1:1337/命令来模拟用户访问。\n\n##### 安装node-heapdump\n\n```markdown\n$ npm install heapdump\n```\n\n安装node-heapdump后，在代码的第一行添加如下代码将其引入:\n\n```\nvar heapdump = require('heapdump');\n```\n\n引入node-heapdump后，就可以启动服务进程，并接受客户端的请求。访问多次之后， leakArray中就会具备大量的元素。这个时候我们通过向服务进程发送SIGUSR2信号，让 10 node-heapdump抓拍一份堆内存的快照。发送信号的命令如下:\n\n```\n$ kill -USR2 <pid>\n```\n\n这份抓取的快照将会在文件目录下以heapdump-<sec>.<usec>.heapsnapshot的格式存放。这是一份较大的JSON文件，需要通过Chrome的开发者工具打开查看。\n\n![image-20191220142253073](https://tva1.sinaimg.cn/large/006tNbRwgy1ga362sgilrj31400qmwq7.jpg)\n\n可以看到有大量的leak字符串存在，这些字符串就是一直未能得到回收的数据。 通过在开发者工具的面板中查看内存分布，我们可以找到泄漏的数据，然后根据这些信息找到造 成泄漏的代码。\n\n#### node-memwatch\n\n```javascript\nvar memwatch = require('memwatch'); memwatch.on('leak', function (info) {\n  console.log('leak:');\n  console.log(info); \n});\nmemwatch.on('stats', function (stats) {\n  console.log('stats:') \n  console.log(stats);\n});\nvar http = require('http');\nvar leakArray = [];\nvar leak = function () {\n  leakArray.push(\"leak\" + Math.random()); \n};\nhttp.createServer(function (req, res) { \n  leak();\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n'); \n}).listen(1337);\nconsole.log('Server running at http://127.0.0.1:1337/');\n```\n\n##### 1. stats事件\n\n在进程中使用node-memwatch之后，每次进行全堆垃圾回收时，将会触发一次stats事件，这 4 个事件将会传递内存的统计信息。\n\n![image-20191220142653590](https://tva1.sinaimg.cn/large/006tNbRwgy1ga366z9jroj30mi0a6q4r.jpg)\n\nnum_full_gc和num_inc_gc比较直观地反应了垃圾回收的情况\n\n##### 2. leak事件\n\n如果经过连续5次垃圾回收后，内存仍然没有被释放，这意味着有内存泄漏的产生，node-memwatch会出发一个leak事件。\n\n![image-20191220143429405](https://tva1.sinaimg.cn/large/006tNbRwgy1ga36evbve4j30uk05wgmj.jpg)\n\n这个数据能显示5次垃圾回收的过程中内存增长了多少。\n\n##### 3. 堆内存比较\n\n最终得到的leak事件的信息只能告知我们应用中存在内存泄漏，具体问题产生在何处还需要从V8的堆内存上定位。node-memwatch提供了抓取快照和比较快照的功能，它能够比较堆上对象 的名称和分配数量，从而找出导致内存泄漏的元凶。\n\n```javascript\nvar memwatch = require('memwatch');\nvar leakArray = [];\nvar leak = function () { \n  leakArray.push(\"leak\" + Math.random());\n};\n\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\nfor (var i = 0; i < 10000; i++) { \n  leak();\n}\n// Take the second snapshot and compute the diff \nvar diff = hd.end(); \nconsole.log(JSON.stringify(diff, null, 2));\n```\n\n执行上面这段代码，得到的输出结果如下所示:\n\n```json\n$ node diff.js \n{\n  \"before\": {\n    \"nodes\": 11719,\n    \"time\": \"2013-10-07T06:32:07.000Z\",\n    \"size_bytes\": 1493304,\n    \"size\": \"1.42 mb\"\n  }, \n  \"after\": {\n    \"nodes\": 31618,\n    \"time\": \"2013-10-07T06:32:07.000Z\", \n    \"size_bytes\": 2684864,\n    \"size\": \"2.56 mb\"\n  }, \n  \"change\": {\n    \"size_bytes\": 1191560, \n    \"size\": \"1.14 mb\", \n    \"freed_nodes\": 129, \n    \"allocated_nodes\": 20028,\n    \"details\": [\n      {\n        \"what\": \"Array\", \n        \"size_bytes\": 323720, \n        \"size\": \"316.13 kb\", \n        \"+\": 15,\n        \"-\": 65\n      }, \n      {\n        \"what\": \"Code\", \n        \"size_bytes\": -10944,\n        \"size\": \"-10.69 kb\",\n        \"+\": 8,\n        \"-\": 28 \n      },\n      {\n        \"what\": \"String\",\n        \"size_bytes\": 879424,\n        \"size\": \"858.81 kb\",\n        \"+\": 20001,\n        \"-\": 1\n      } \n    ]\n  }\n}\n```\n\nchange节点下的freed_nodes和allocated_nodes，它们记录了 释放的节点数量和分配的节点数量。这里由于有内存泄漏，分配的节点数量远远多余释放的节点 数量。在details下可以看到具体每种类型的分配和释放数量。\n\n加号和减号分别表示分配和释放的字符串对象数量。\n\n### 大内存应用\n\n**Node提供了stream模块用于处理大文件**\n\nstream模块是Node的原生模块，直接引用即可。stream继承自EventEmitter，具备基本的自 定义事件功能，同时抽象出标准的事件和方法。它分可读和可写两种。Node中的大多数模块都有 stream的应用，比如fs的createReadStream()和createWriteStream()方法可以分别用于创建文件 的可读流和可写流，process模块中的stdin和stdout则分别是可读流和可写流的示例。\n\n## 第六章 理解Buffer\n\n### Buffer 结构\n\nBuffer是一个像Array的对象，但它主要用于操作字节。\n\n#### 模块结构\n\nBuffer是一个典型的JavaScript与C++结合的模块，它将性能相关部分用C++实现，将非性能相关的部分用JavaScript实现\n\n![image-20191220145535868](https://tva1.sinaimg.cn/large/006tNbRwgy1ga370u7oazj30ja09ewf3.jpg)\n\nNode在进程启动时就已经加载了它，并将其放在全局对象(global) 上。所以在使用Buffer时，无须通过require()即可直接使用\n\n#### Buffer 对象\n\nBuffer对象类似于数组，它的元素为16进制的两位数，即0到255的数值。\n\n```javascript\nvar str = \"深入浅出node.js\";\nvar buf = new Buffer(str, 'utf-8');\nconsole.log(buf);\n// => <Buffer e6 b7 b1 e5 85 a5 e6 b5 85 e5 87 ba 6e 6f 64 65 2e 6a 73>\n```\n\n不同编码的字符串占用的元素个数各不相同，上面代码中的中文字在 UTF-8编码下占用3个元素，字母和半角标点符号占用1个元素。\n\nBuffer可以访问length属性得到长度，也可以通过下标访问元素，在构造对象时也与Array相似。\n\n```javascript\nvar buf = new Buffer(100); \nconsole.log(buf.length); // => 100\nconsole.log(buf[10]);//会得到一个比较奇怪的结果，它的元素值是一个0到255的随机值。\n```\n\n如果给元素赋值不是0到255的整数而是小数时会怎样呢?\n\n```javascript\nbuf[20] = -100;\nconsole.log(buf[20]); // 156 \nbuf[21] = 300; \nconsole.log(buf[21]); // 44 \nbuf[22] = 3.1415; \nconsole.log(buf[22]); // 3\n```\n\n给元素的赋值如果小于0，就将该值逐次加256，直到得到一个0到255之间的整数。如果得到 的数值大于255，就逐次减256，直到得到0~255区间内的数值。如果是小数，舍弃小数部分，只 保留整数部分。\n\n#### Buffer 内存分配\n\nBuffer对象的内存分配不是在V8的堆内存中，而是在Node的C++层面实现内存的申请的。因 为处理大量的字节数据不能采用需要一点内存就向操作系统申请一点内存的方式，这可能造成大 量的内存申请的系统调用，对操作系统有一定压力。为此Node在内存的使用上应用的是在C++ 层面申请内存、在JavaScript中分配内存的策略。\n\nNode采用了slab分配机制，slab是一种动态内存管理机制。slab就是一块申请好的固定大小的内存区域。slab具有如下3种状态。 \n\n* full:完全分配状态。\n* partial:部分分配状态。\n* empty:没有被分配状态。\n\n```javascript\nnew Buffer(size);\n```\n\nNode以8 KB为界限来区分Buffer是大对象还是小对象。8 KB的值也就是每个slab的大小值，在JavaScript层面，以它作为单位单元进行内存的分配。\n\n##### 1. 分配小Buffer对象\n\n如果指定Buffer的大小少于8 KB，Node会按照小对象的方式进行分配。Buffer的分配过程中主要使用一个局部变量pool作为中间处理对象，处于分配状态的slab单元都指向它\n\n```javascript\nvar pool;\nfunction allocPool() {\n  pool = new SlowBuffer(Buffer.poolSize); \n  pool.used = 0;\n}\n```\n\n![image-20191220200835681](https://tva1.sinaimg.cn/large/006tNbRwgy1ga3g2jgvmhj30x408ot97.jpg)\n\n**slab处于empty状态。**\n\n```javascript\nnew Buffer(1024);\n```\n\n这次构造将会去检查pool对象，如果pool没有被创建，将会创建一个新的slab单元指向它:\n\n```javascript\nif (!pool || pool.length - pool.used < this.length) allocPool();\n```\n\n同时当前Buffer对象的parent属性指向该slab，并记录下是从这个slab的哪个位置(offset) 开始使用的，slab对象自身也记录被使用了多少字节\n\n```javascript\nthis.parent = pool;\nthis.offset = pool.used;\npool.used += this.length;\nif (pool.used & 7) pool.used = (pool.used + 8) & ~7;\n```\n\n![image-20191220201258838](https://tva1.sinaimg.cn/large/006tNbRwgy1ga3g75sbkjj30w80ccmy1.jpg)\n\n**这时候的slab状态为partial。**\n\n当再次创建一个Buffer对象时，构造过程中将会判断这个slab的剩余空间是否足够。如果足 够，使用剩余空间，并更新slab的分配状态。如果slab剩余的空间不够，将会构造新的slab，原slab中剩余的空间会造成浪费。\n\n由于同一个slab可能分配给多个Buffer对象使用，只有这些小Buffer对 象在作用域释放并都可以回收时，slab的8 KB空间才会被回收。尽管创建了1个字节的Buffer对象， 但是如果不释放它，实际可能是8 KB的内存没有释放。\n\n##### 2. 分配大Buffer对象\n\n如果需要超过8 KB的Buffer对象，将会直接分配一个SlowBuffer对象作为slab单元，这个slab 单元将会被这个大Buffer对象独占。\n\n```javascript\n// Big buffer, just alloc one\nthis.parent = new SlowBuffer(this.length); this.offset = 0;\n```\n\n### Buffer 的转换\n\nBuffer对象可以与字符串之间相互转换。目前支持的字符串编码类型有如下这几种。\n\n* ASCII\n* UTF-8\n* UTF-16LE/UCS-2\n* Base64\n* Binary\n* Hex\n\n#### 字符串转Buffer\n\n字符串转Buffer对象主要是通过构造函数完成的\n\n```javascript\nnew Buffer(str, [encoding]);\n```\n\n通过构造函数转换的Buffer对象，存储的只能是一种编码类型。encoding参数不传递时，默认按UTF-8编码进行转码和存储。\n\n一个Buffer对象可以存储不同编码类型的字符串转码的值，调用write()方法可以实现该目的\n\n```javascript\nbuf.write(string, [offset], [length], [encoding])\n```\n\n由于可以不断写入内容到Buffer对象中，并且每次写入可以指定编码，所以Buffer对象中可 以存在多种编码转化后的内容。需要小心的是，每种编码所用的字节长度不同，将Buffer反转回 字符串时需要谨慎处理。\n\n#### Buffer 转字符串\n\nBuffer对象的toString()可以将Buffer对象转换为字符串\n\n```javascript\nbuf.toString([encoding], [start], [end])\n```\n\n可以设置encoding(默认为UTF-8)、start、end这3个参数实现整体或局部的转换。如果Buffer对象由多种编码写入，就需要在局部指定不同的编码，才能转换回正常的编码。\n\n#### Buffer 不支持的编码类型\n\nBuffer提供了一个isEncoding()函数来判断编码是否支持转换\n\n```javascript\nBuffer.isEncoding(encoding)\n```\n\n将编码类型作为参数传入上面的函数，如果支持转换返回值为true，否则为false。\n\n### Buffer 的拼接\n\nBuffer在使用场景中，通常是以一段一段的方式传输。\n\n#### 乱码是如何产生的\n\n```javascript\nvar fs = require('fs');\nvar rs = fs.createReadStream('test.md');\nvar data = '';\nrs.on(\"data\", function (chunk){ \n  data += chunk; });\nrs.on(\"end\", function () { \n  console.log(data);\n});\n```\n\n`data += chunk;`这句代码里隐藏了toString()操作，等价于`data = data.toString() + chunk.toString();`\n\n```javascript\nvar rs = fs.createReadStream('test.md', {highWaterMark: 11});\n```\n\n搭配该代码的测试数据为李白的《静夜思》。执行该程序，将会得到以下输出:\n\n```text\n床前明���光，疑���地上霜;举头���明月，���头思故乡。\n```\n\n产生这个输出结果的原因在于文件可读流在读取时会逐个读取Buffer。这首诗的原始Buffer应存储为:\n\n```javascript\n<Buffer e5 ba 8a e5 89 8d e6 98 8e e6 9c 88 e5 85 89 ef bc 8c e7 96 91 e6 98 af e5 9c b0 e4 b8 8a e9 9c 9c ef bc 9b e4 b8 be e5 a4 b4 e6 9c 9b e6 98 8e e6 9c 88 ...>\n```\n\n由于我们限定了Buffer对象的长度为11，因此只读流需要读取7次才能完成完整的读取，结果 是以下几个Buffer对象依次输出:\n\n```javascript\n<Buffer e5 ba 8a e5 89 8d e6 98 8e e6 9c> \n<Buffer 88 e5 85 89 ef bc 8c e7 96 91 e6> \n...\n```\n\nbuf.toString()方法默认以UTF-8为编码，中文字在UTF-8下占3个字节。所以第 一个Buffer对象在输出时，只能显示3个字符，Buffer中剩下的2个字节(e6 9c)将会以乱码的形 式显示。第二个Buffer对象的第一个字节也不能形成文字，只能显示乱码。于是形成一些文字无 法正常显示的问题。\n\n在这个示例中我们构造了11这个限制，但是对于任意长度的Buffer而言，宽字节字符串都有 可能存在被截断的情况，只不过Buffer的长度越大出现的概率越低而已，但该问题依然不可忽视。\n\n#### setEncoding()与 string_decoder()\n\n可读流还有一个设置编码的方法setEncoding()，该方法的作用是让data事件中传递的不再是一个Buffer对象，而是编码后的字符串。\n\n```javascript\nreadable.setEncoding(encoding)\n```\n\n```javascript\nvar rs = fs.createReadStream('test.md', { highWaterMark: 11});\nrs.setEncoding('utf8');\n```\n\n重新执行程序，得到输出:\n\n`床前明月光，疑是地上霜;举头望明月，低头思故乡。`\n\n**设置编码并未改变按 段读取的基本方式。**在调用setEncoding()时，可读流对象在内部设置了一个decoder对象。每次data事 件都通过该decoder对象进行Buffer到字符串的解码，然后传递给调用者。置编码后，data 不再收到原始的Buffer对象。\n\ndecoder对象来自于string_decoder 模块StringDecoder的实例对象。StringDecoder在得到编码后，知道宽字节字符串在UTF-8编码下是 以3个字节的方式存储的，所以第一次write()时，只输出前9个字节转码形成的字符，“月”字的 前两个字节被保留在StringDecoder实例内部。第二次write()时，会将这2个剩余字节和后续11 个字节组合在一起，再次用3的整数倍字节进行转码。于是乱码问题通过这种中间形式被解决了。\n\n**string_decoder目前只能处理UTF-8、Base64和 UCS-2/UTF-16LE这3种编码。**\n\n#### 正确拼接Buffer\n\n```javascript\nvar chunks = [];\nvar size = 0;\nres.on('data', function (chunk) {\n  chunks.push(chunk);\n  size += chunk.length;\n})\nres.on('end', function(){\n  var buf = Buffer.concat(chunks, size); \n  var str = iconv.decode(buf, 'utf8');\n  console.log(str);\n})\n```\n\n正确的拼接方式是用一个数组来存储接收到的所有Buffer片段并记录下所有片段的总长度， 然后调用Buffer.concat()方法生成一个合并的Buffer对象。Buffer.concat()方法封装了从小 Buffer对象向大Buffer对象的复制过程，实现十分细腻\n\n```javascript\nBuffer.concat = function(list, length) { \n  if (!Array.isArray(list)) {\n    throw new Error('Usage: Buffer.concat(list, [length])'); \n  }\n  if (list.length === 0) { \n    return new Buffer(0);\n  } else if (list.length === 1) { \n    return list[0];\n  }\n  if (typeof length !== 'number') {\n    length = 0;\n    for (var i = 0; i < list.length; i++) {\n      var buf = list[i];\n      length += buf.length; \n    }\n  }\n  var buffer = new Buffer(length);\n  var pos = 0;\n  for (var i = 0; i < list.length; i++) {\n    var buf = list[i]; \n    buf.copy(buffer, pos); \n    pos += buf.length;\n  }\n  return buffer; \n};\n```\n\n### Buffer 与性能\n\n一旦在网络中传输，都需要转换为Buffer，以进行二进制数据传输。\n\n通过预先转换静态内容为Buffer对象，可以有效地减少CPU的重复使用，节省服务器资源。 在Node构建的Web应用中，可以选择将页面中的动态内容和静态内容分离，静态内容部分可以通 过预先转换为Buffer的方式，使性能得到提升。由于文件自身是二进制数据，所以在不需要改变 内容的场景下，尽量只读取Buffer，然后直接传输，不做额外的转换，避免损耗。\n\n#### 文件读取\n\n在文件的读取时，有一个highWaterMark设置对性能的影响至关重要。\n\n在fs.createReadStream(path, opts)时，我们可以传入一些参数\n\n```javascript\n{\n  flags: 'r',\n  encoding: null,\n  fd: null,\n  mode: 0666, \n  highWaterMark: 64 * 1024\n}\n```\n\n还可以传递start和end来指定读取文件的位置范围\n\n```javascript\n{start: 90, end: 99}\n```\n\nfs.createReadStream()的工作方式是在内存中准备一段Buffer，然后在fs.read()读取时逐步 从磁盘中将字节复制到Buffer中。完成一次读取时，则从这个Buffer中通过slice()方法取出部分 数据作为一个小Buffer对象，再通过data事件传递给调用方。如果Buffer用完，则重新分配一个; 如果还有剩余，则继续使用。\n\n分配一个新的Buffer对象的操作:\n\n```javascript\nvar pool;\nfunction allocNewPool(poolSize) { \n  pool = new Buffer(poolSize); \n  pool.used = 0;\n}\n```\n\n在理想的状况下，每次读取的长度就是用户指定的highWaterMark。但是有可能读到了文件结尾，或者文件本身就没有指定的highWaterMark那么大，这个预先指定的Buffer对象将会有部分 剩余，不过好在这里的内存可以分配给下次读取时使用。pool是常驻内存的，只有当pool单元剩 余数量小于128(kMinPoolSpace)字节时，才会重新分配一个新的Buffer对象。\n\nhighWaterMark的大小对性能有两个影响的点\n\n* highWaterMark设置对Buffer内存的分配和使用有一定影响。\n* highWaterMark设置过小，可能导致系统调用次数过多。\n\n文件流读取基于Buffer分配，Buffer则基于SlowBuffer分配\n\n由于fs.createReadStream()内部采用fs.read()实现，将会引起对磁盘的系统调用，对于大 文件而言，highWaterMark的大小决定会触发系统调用和data事件的次数。\n\n读取一个相同的大文件时，highWaterMark值的大小与读取速 度的关系:该值越大，读取速度越快。","tags":["Node.js"],"categories":["Node.js"]},{"title":"深入浅出Node.js学习笔记（一）","url":"/2019/12/13/深入浅出Node.js学习笔记（一）/","content":"\n# 深入浅出Node.js学习笔记（一）\n\n高并发、高性能\n\n## 第一章 Node简介\n\n* 高性能、符合事件驱动、没有历史包袱这3个主要原因，JavaScript成为了Node的实现语言。\n\n* Node发展为一个强制不共享任何资源的 单线程、单进程系统，包含十分适宜网络的库，为构建大型分布式应用程序提供基础设施，其目 标也是成为一个构建快速、可伸缩的网络应用平台。它自身非常简单，通过通信协议来组织许多 Node，非常容易通过扩展来达成构建大型网络应用的目的。每一个Node进程都构成这个网络应 用中的一个节点，这是它名字所含意义的真谛。\n\n* 它们都是基于事件驱动的异步架构，浏览器通过事件驱动来服务界面上的交互，Node通过事件驱 动来服务I/O\n\n  ![image-20191206112453524](https://tva1.sinaimg.cn/large/006tNbRwgy1g9mu9fwye3j30s80g875q.jpg)\n\n### Node的特点\n\n#### 异步I/O\n\n* 在Node中，绝大多数的操作都以异步的方式进行调用。\n\n* 在Node中，我们可 以从语言层面很自然地进行并行I/O操作。每个调用之间无须等待之前的I/O调用结束。\n\n#### 事件与回调函数\n\n* 事件的编程方式具有轻量级、松耦合、只关注事务点等优势，但是在多个异步任务的场景下， 事件与事件之间各自独立，如何协作是一个问题。\n\n* 回调函数无处不在。回调函数是最好的接受异步调用返回数据的方式\n\n#### 单线程\n\nNode保持了JavaScript在浏览器中单线程的特点。\n\n* 在Node中，JavaScript与其余线程是无 法共享任何状态的。（单线程的最大好处是不用像多线程编程那样处处在意状态的同步问题，这里 没有死锁的存在，也没有线程上下文交换所带来的性能上的开销。）\n* 单线程的弱点：\n  * 无法利用多核CPU\n  * 错误会引起整个应用退出，应用的健壮性值得考验\n  * 大量计算占用CPU导致无法继续调用异步I/O\n\n* 在Node中，长时间的CPU占用也会导致后续的异步I/O发不出调用，已完成的异步I/O的 回调函数也会得不到及时执行。解决单线程中大计算量的问题——child_process\n* 子进程的出现，意味着Node可以从容地应对单线程在健壮性和无法利用多核CPU方面的问 题。通过将计算分发到各个子进程，可以将大量计算分解掉，然后再通过进程之间的事件消息来 传递结果，这可以很好地保持应用模型的简单和低依赖。通过Master-Worker的管理方式，也可以 很好地管理各个工作进程，以达到更高的健壮性。\n\n#### 跨平台\n\n![image-20191206142014972](https://tva1.sinaimg.cn/large/006tNbRwgy1g9mzbqn9c1j30l80fct9g.jpg)\n\n它在操作系统与Node上层模块 系统之间构建了一层平台层架构，即libuv。（libuv已经成为许多系统实现跨平台的基础组件）\n\n### Node 的应用场景\n\n#### I/O 密集型\n\nNode擅长I/O密集型的应用场景。Node面向网络且擅长并行I/O，能够有效 地组织起更多的硬件资源，从而提供更多好的服务。\n\nI/O密集的优势主要在于Node利用事件循环的处理能力，而不是启动每一个线程为每一个请 求服务，资源占用极少。\n\n#### CPU密集型\n\nCPU密集型应用给Node 带来的挑战主要是:由于JavaScript单线程的原因，如果有长时间运行的计算(比如大循环)，将 会导致CPU时间片不能释放，使得后续I/O无法发起。但是适当调整和分解大型运算任务为多个 小任务，使得运算能够适时释放，不阻塞I/O调用的发起，这样既可同时享受到并行异步I/O的好 处，又能充分利用CPU。\n\n* Node可以通过编写C/C++扩展的方式更高效地利用CPU，将一些V8不能做到性能极致的地方通过C/C++来实现。由上面的测试结果可以看到，通过C/C++扩展的方式实现斐波那契数列计算，速度比Java还快。\n* 如果单线程的Node不能满足需求，甚至用了C/C++扩展后还觉得不够，那么通过子进程的方式，将一部分Node进程当做常驻服务进程用于计算，然后利用进程间的消息来传递结果，将计算与I/O分离，这样还能充分利用多CPU。\n\n**CPU密集不可怕，如何合理调度是诀窍。**\n\n#### 分布式应用\n\nNode高效利用并行I/O的过程，也是高效使用数 据库的过程\n\n## 第二章 模块机制\n\n### CommonJS\n\n#### JavaScript缺陷\n\n* 没有模块系统\n* 标准库较少\n* 没有标准接口\n* 缺乏包管理系统\n\nCommonJS规范的提出，主要是为了弥补当前JavaScript没有标准的缺陷\n\n![image-20191206205027614](https://tva1.sinaimg.cn/large/006tNbRwgy1g9nalsobqcj310m0awq4f.jpg)\n\n#### CommonJS 的模块规范\n\n* 模块引用\n\n```javascript\nvar math = require('math');\n```\n\n* 模块定义\n\n上下文提供了 exports对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。\n\n在模块中，还存在 一个module对象，它代表模块自身，而exports是module的属性。\n\n在Node中，一个文件就是一个 模块，将方法挂载在exports对象上作为属性即可定义导出的方式。\n\n```javascript\n// math.js\nexports.add = function () {\n\tvar sum = 0, \n      i = 0,\n\t\t\targs = arguments,\n\t\t\tl = args.length; \n  while (i < l) {\n\t\tsum += args[i++]; \n  }\n\treturn sum; \n};\n```\n\n* 模块标识\n\n模块标识其实就是传递给require()方法的参数，它必须是符合小驼峰命名的字符串，或者 以.、..开头的相对路径，或者绝对路径。它可以没有文件名后缀.js。\n\n它的意义在于将类聚的方法和变量等限定在私有的 作用域中，同时支持引入和导出功能以顺畅地连接上下游依赖。\n\n![image-20191209111442609](https://tva1.sinaimg.cn/large/006tNbRwgy1g9qatnbzkaj30mi0byt98.jpg)\n\n### Node 的模块实现\n\n在Node中引入模块，需要经历如下3个步骤。\n\n* 路径分析\n* 文件定位\n* 编译执行\n\n在Node中，模块分为两类:一类是Node提供的模块，称为核心模块;另一类是用户编写的模块，称为文件模块。\n\n* 核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动 时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编 译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最 快的。\n* 文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速 度比核心模块慢。\n\n#### 优先从缓存加载\n\nNode对引入过的模块都会进行缓存，以减少二次引入时的开销。Node缓存的事编译和执行之后的对象。\n\n不论是核心模块还是文件模块，require()方法对相同模块的二次加载都一律采用缓存优先的 方式，这是第一优先级的。不同之处在于核心模块的缓存检查先于文件模块的缓存检查。\n\n#### 路径分析和文件定位\n\n##### 模块路径\n\n模块路径是Node在定位文件模块的具体文件时制定的查找策略，具体表现为一个路径组成的数组。\n\n模块路径的生成规则：\n\n* 当前文件目录下的node_modules目录。\n* 父目录下的node_modules目录。\n* 父目录的父目录下的node_modules目录。\n* 沿路径向上逐级递归，直到根目录下的node_modules目录。\n\n##### 模块标识符分析\n\n模块标识符在Node中主要分为以下几类。\n\n* 核心模块，如http、fs、path等。\n* .或..开始的相对路径文件模块。\n* 以/开始的绝对路径文件模块。\n* 非路径形式的文件模块，如自定义的connect模块。\n\n1. 核心模块\n\n   核心模块的优先级仅次于缓存加载，它在Node的源代码编译过程中已经编译为二进制代码， 其加载过程最快。\n\n   （如果加载一个与核心模块标识符相同的自定义模块，不会成功。如果自己编写了一个http用户模块，想要加载成功，必须选择不同的标识符或换用路径方式）\n\n2. 路径形式的文件模块\n\n   在分析文件模块时，require()方法会将路径转为真实路径，并以真实路径作为索引，将编译执行后的结果存放到缓存中，以使二 次加载时更快。\n\n   （文件模块指明了确切的文件位置，在查找中会节约时间，加载速度慢于核心模块）\n\n3. 自定义模块\n\n   它是一种特殊的文件模块，可能是一个文件或者包的形式。这类模块的查找是最费时的，也是所有方式中最慢的一种。\n\n   在加载的过程中，Node 会逐个尝试模块路径中的路径，直到找到目标文件为止。可以看出，当前文件的路径越深，模块查找耗时会越多，这是自定义模块的加载速度是最慢的原因。\n\n##### 文件定位\n\n* 文件扩展名分析：\n\n  require()在分析标识符的过程中，会出现标识符中不包含文件扩展名的情况。CommonJS模块规范也允许在标识符中不包含文件扩展名，这种情况下，**Node会按.js、.json、.node的次序补 足扩展名，依次尝试。**\n\n  **在尝试的过程中，需要调用fs模块同步阻塞式地判断文件是否存在。**因为Node是单线程的， 所以这里是一个会引起性能问题的地方。\n\n  （如果是.node和.json文件，在传递给require() 的标识符中带上扩展名，会加快一点速度。同步配合缓存，可以大幅度缓解Node 单线程中阻塞式调用的缺陷。）\n\n* 目录分析和包\n\n  在分析标识符的过程中，require()通过分析文件扩展名之后，可能**没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时Node会将目录当做一个包来处理。**\n\n  * Node在当前目录下 查找package.json(CommonJS包规范定义的包描述文件)，通过JSON.parse()解析出包描述对象， 从中取出main属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。\n  * 而如果main属性指定的文件名错误，或者压根没有package.json文件，Node会将index当做默 认文件名，然后依次查找index.js、index.json、index.node。\n  * 如果在目录分析的过程中没有定位成功任何文件，则自定义模块进入下一个模块路径进行查 找。\n  * 如果模块路径数组都被遍历完毕，依然没有查找到目标文件，则会抛出查找失败的异常。\n\n#### 模块编译\n\n在Node中，每个文件模块都是一个对象\n\n定位到具体的文件后，Node会新建一个模块对 象，然后根据路径载入并编译。对于不同的文件扩展名，其载入方法有所不同\n\n* .js文件。通过fs模块同步读取文件后编译执行。\n* .node文件。这是用C/C++编写的扩展文件，通过dlopen()方法加载最后编译生成的文件。\n* .json文件。通过fs模块同步读取文件后，用JSON.parse()解析返回结果。\n* 其余扩展名文件。它们都被当做.js文件载入。\n\n每一个编译成功的模块都会将其文件路径作为索引缓存在Module._cache对象上，以提高二 次引入的性能。\n\n在确定文件的扩展名之后，Node将调用具体的编译方式来将文件执行后返回给调用者。\n\n##### JavaScript模块的编译\n\n在编译的过程中，Node对获取的JavaScript文件内容进行了头尾包装。\n\n* 在头部添加 了(function (exports, require, module, __filename, __dirname) {\\n，在尾部添加了\\n});。\n\n  ```javascript\n  (function (exports, require, module, __filename, __dirname) { \n    var math = require('math');\n    exports.area = function (radius) {\n      return Math.PI * radius * radius; \n    };\n   });\n  ```\n\n  这样每个模块文件之间都进行了作用域隔离。\n\n* 包装之后的代码会通过vm原生模块的runInThisContext()方法执行(类似eval，只是具有明确上下文，不污染全局)，返回一个具体的 function对象。\n\n* 将当前模块对象的exports属性、require()方法、module(模块对象自身)， 以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个function()执行。\n\nexports对象是通过形参的方式传入的，直接赋值形参会改变形参的引用，但并不能改变作用域外的值。(**如果要达到require引入一个类的效果，请赋值给module.exports对象。**)\n\n##### C/C++模块的编译\n\nNode调用process.dlopen()方法进行加载和执行。在Node的架构下，dlopen()方法在Windows 和*nix平台下分别有不同的实现，通过libuv兼容层进行了封装。\n\n它是编写C/C++模块之后编译生成的，所以这 里只有加载和执行的过程。在执行的过程中，模块的exports对象与.node模块产生联系，然后返 回给调用者。\n\n* 优势：执行效率\n* 劣势：编写门槛高\n\n##### JSON文件的编译\n\nNode利用fs模块同步读取JSON文件的内容之 后，调用JSON.parse()方法得到对象，然后将它赋给模块对象的exports，以供外部调用。\n\n（定义了一个JSON文件作为配置，那就 不必调用fs模块去异步读取和解析，直接调用require()引入即可）\n\n### 核心模块\n\n核心模块C/C++文件存放在Node项目的src目录下， JavaScript文件存放在lib目录下。\n\n#### JavaScript 核心模块的编译过程\n\n##### 转存为C/C++代码\n\nNode采用了V8附带的js2c.py工具，将所有内置的JavaScript代码(src/node.js和lib/*.js)转换 成C++里的数组，生成node_natives.h头文件\n\nJavaScript代码以字符串的形式存储在node命名空间中，是不可直接执行的。\n\n在启动Node进程时，JavaScript代码直接加载进内存中。在加载的过程中，JavaScript核心模块经 历标识符分析后直接定位到内存中，比普通的文件模块从磁盘中一处一处查找要快很多。\n\n##### 编译JavaScript核心模块\n\nlib目录下的所有模块文件也没有定义require、module、exports这些变量。在引入JavaScript 核心模块的过程中，也经历了头尾包装的过程，然后才执行和导出了exports对象。与文件模块有区别的地方在于:**获取源代码的方式(核心模块是从内存中加载的)以及缓存执行结果的位置。**\n\n源文件通过process.binding('natives')取出， 编译成功的模块缓存到NativeModule._cache对象上，文件模块则缓存到Module._cache对象上\n\n#### C/C++核心模块的编译过程\n\nC++模块主内完成核心，JavaScript 主外实现封装的模式是Node能够提高性能的常见方式。\n\n由纯C/C++编写的部分统一称为**内建模块**，因为它们通常不被用户直接调 用。\n\n##### 内建模块\n\nNode提供了get_builtin_module()方法从node_module_list 数组中取出这些模块\n\n###### 内建模块的优势在于：\n\n* 它们本身由C/C++编写，性能上优于脚本语言\n* 在进行文件编译时，它们被编译进二进制文件。一旦Node开始执行，它们被直接加载进内存中，无须再 次做标识符定位、文件定位、编译等过程，直接就可执行。\n\n在Node的所有模块类型中，存在着如图2-4所示的一种依赖层级关系，即文件模块可能会依 赖核心模块，核心模块可能会依赖内建模块。\n\n![image-20191210195732891](https://tva1.sinaimg.cn/large/006tNbRwgy1g9rvjz8pitj30gc0gsmxx.jpg)\n\n###### 加载内建模块：\n\n* 在加载内建模块时，先创建一个exports空对象\n* 然后调用get_builtin_module()方法取 出内建模块对象，通过执行register_func()填充exports对象\n* 最后将exports对象按模块名缓存，并返回给调用方完成导出。\n\n#### 核心模块的引入流程\n\n![image-20191210201250065](https://tva1.sinaimg.cn/large/006tNbRwgy1g9rvzu27c2j30m40qa75t.jpg)\n\n#### 编写核心模块\n\n* 编写头文件\n* 编写C/C++文件\n\n### C/C++扩展模块\n\nC/C++扩展模块属于文件模块中的一类。\n\n为了实现跨平台，dlopen()方法在内部实现时区 分了平台，分别用的是加载.so和.dll的方式。（一个平台下的.node文件在另一个平台下是无法加载执行的，必须重新用各 自平台下的编译器编译为正确的.node文件。）\n\n![image-20191210202239589](https://tva1.sinaimg.cn/large/006tNbRwgy1g9rwa1zemkj30p60wi0vf.jpg)\n\nrequire()在引入.node文件的过程中：\n\n* 调用uv_dlopen()方法去打开动态链接库\n* 调用uv_dlsym()方法找到动态链接库中通过NODE_MODULE宏定义的方法地址\n\n这 两个过程都是通过libuv库进行封装的:在*nix平台下实际上调用的是dlfcn.h头文件中定义的 dlopen()和dlsym()两个方法;在Windows平台则是通过LoadLibraryExW()和GetProcAddress()这两 个方法实现的，它们分别加载.so和.dll文件(实际为.node文件)。\n\n![image-20191210205752782](https://tva1.sinaimg.cn/large/006tNbRwgy1g9rxappw9mj30pq0lkdhm.jpg)\n\n### 模块调用栈\n\n![image-20191211174120316](https://tva1.sinaimg.cn/large/006tNbRwgy1g9sxcy1mw1j30qm0hy3zw.jpg)\n\n* C/C++内建模块属于最底层的模块，它属于核心模块，主要提供API给JavaScript核心模块和 第三方JavaScript文件模块调用。\n* JavaScript核心模块主要扮演的职责有两类:\n  * 一类是作为C/C++内建模块的封装层和桥接层， 供文件模块调用;\n  * 一类是纯粹的功能模块\n* 文件模块通常由第三方编写，包括普通JavaScript模块和C/C++扩展模块，主要调用方向为普通JavaScript模块调用扩展模块。\n\n### 包与NPM\n\n![image-20191211184259742](https://tva1.sinaimg.cn/large/006tNbRwgy1g9sz0nu3v7j30uc0laq4c.jpg)\n\n由包结构和包描述文件两个部分组成，前者用于组织包中的各种文件，后者则用于描述包的相关信息，以供外部读取分析。\n\n#### 包结构\n\n包实际上是一个存档文件，即一个目录直接打包为.zip或tar.gz格式的文件，安装后解压还原为目录。\n\n完全符合CommonJS规范的包目录应该包含如下这些文件：\n\n* package.json:包描述文件。\n* bin:用于存放可执行二进制文件的目录。 \n* lib:用于存放JavaScript代码的目录。\n* doc:用于存放文档的目录。\n* test:用于存放单元测试用例的代码。\n\n#### 包描述文件与NPM\n\n包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件——package.json，位于 包的根目录下，是包的重要组成部分。\n\n##### 必需字段：\n\n* name。包名。规范定义它需要由小写的字母和数字组成，可以包含.、_和-，但不允许出现空格。包名必须是唯一的，以免对外公布时产生重名冲突的误解。除此之外，NPM还建议不要在包名中附带上node或js来重复标识它是JavaScript或Node模块。\n* description。包简介。\n* version。版本号。一个语义化的版本号，该版本号十分重要，常常用于一些版本控制的场合。\n* keywords。关键词数组，NPM中主要用来做分类搜索。一个好的关键词数组有利于用户快速找到你编写的包。\n* maintainers。包维护者列表。每个维护者由name、email和web这3个属性组成。NPM通过该属性进行权限认证。\n* contributors。贡献者列表。列表中的第一个贡献应当是包的作者本人。它的格式与维护者列表相同。\n* bugs。一个可以反馈bug的网页地址或邮件地址。\n* licenses。当前包所使用的许可证列表，表示这个包可以在哪些许可证下使用。\n* repositories。托管源代码的位置列表，表明可以通过哪些方式和地址访问包的源代码。\n* dependencies。使用当前包所需要依赖的包列表。这个属性十分重要，NPM会通过这个属性帮助自动加载依赖的包。\n\n##### 可选字段：\n\n* homepage。当前包的网站地址。\n* os。操作系统支持列表。这些操作系统的取值包括aix、freebsd、linux、macos、solaris、vxworks、windows。如果设置了列表为空，则不对操作系统做任何假设。\n* cpu。CPU架构的支持列表，有效的架构名称有arm、mips、ppc、sparc、x86和x86_64。同os一样，如果列表为空，则不对CPU架构做任何假设。\n* engine。支持的JavaScript引擎列表，有效的引擎取值包括ejs、flusspferd、gpsee、jsc、spidermonkey、narwhal、node和v8。\n* builtin。标志当前包是否是内建在底层系统的标准组件。 \n* directories。包目录说明。\n* implements。实现规范的列表。标志当前包实现了CommonJS的哪些规范。\n* scripts。脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包。\n\n**在包描述文件的规范中，NPM实际需要的字段主要有name、version、description、keywords、 repositories、author、bin、main、scripts、engines、dependencies、devDependencies。**\n\n* author。包作者。 \n* bin。一些包作者希望包可以作为命令行工具使用。配置好bin字段后，通过npm install package_name -g命令可以将脚本添加到执行路径中，之后可以在命令行中直接执行。前面的node-gyp即是这样安装的。通过-g命令安装的模块包称为全局模式。\n* main。模块引入方法require()在引入包时，会优先检查这个字段，并将其作为包中其余 模块的入口。如果不存在这个字段，require()方法会查找包目录下的index.js、index.node、index.json文件作为默认入口。\n* devDependencies。一些模块只在开发时需要依赖。配置这个属性，可以提示包的后续开发者安装依赖包。\n\n### 前后端共用模块\n\n#### AMD 规范\n\nAMD规范是CommonJS模块规范的一个延伸\n\n```javascript\ndefine(id?, dependencies?, factory);\n```\n\n它的模块id和依赖是可选的，与Node模块相似的地方在于factory的内容就是实际代码的内容。\n\n```javascript\ndefine(function() {\n  var exports = {}; \n  exports.sayHello = function() {\n    alert('Hello from module: ' + module.id); };\n  return exports; \n});\n```\n\n不同之处在于AMD模块需要用define来明确定义一个模块，而在Node实现中是隐式包装的， 它们的目的是进行作用域隔离，仅在需要的时候被引入，避免掉过去那种通过全局变量或者全局 命名空间的方式，以免变量污染和不小心被修改。另一个区别则是内容需要通过返回的方式实现 导出。\n\n#### CMD 规范\n\n与AMD规范的主要区别在于定义模块和依赖引入的部分。\n\nAMD需要在声明模块的时候指定所有的依赖，通过形参传递依赖到模块内容中。\n\n在依赖部分，CMD支持动态引入。\n\n## 第三章 异步I/O\n\n### 为什么要异步I/O\n\n#### 用户体验\n\n* 前端通过异步可以消除掉UI阻塞的现象。但是前端获取资源的速度也取决于后端的响应速度。采用异步方式，第一个资源的获取并不会阻塞第二个资源。\n\n* 随着网站或应用不断膨胀，数据将会分布到多台服务器上，分布式将会是常态。分布也意味着M与N的值（M/N分别为两个请求消耗的时间）会线性增长，这也会放大异步和同步在性能方面的差异。\n\n  ![image-20191212150038480](https://tva1.sinaimg.cn/large/006tNbRwgy1g9ty7mwa38j317s0ce400.jpg)\n\n只有后端能够快速响应资源，才能让前端的体验变好。\n\n#### 资源分配\n\n利用单线程，远离多线程死锁、状态同步等问题;利用异 步I/O，让单线程远离阻塞，以更好地使用CPU。\n\nNode提供了类似前端浏览器中Web Workers的子 进程，该子进程可以通过工作进程高效地利用CPU和I/O\n\n![image-20191212171933363](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2861hzfj30lu0lit9x.jpg)\n\n### 异步I/O实现现状\n\n#### 异步I/O与非阻塞I/O\n\n异步/同步和阻塞/非阻塞实际上是两回事\n\n操作系统内核对于I/O只有两种方式:阻塞与非阻塞。\n\n##### 阻塞：\n\n在调用阻塞I/O时，应用程序需要等待 I/O完成才返回结果\n\n![image-20191212172518477](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2e5a4fnj30j80k6t9l.jpg)\n\n* 特点：调用之后一定要等到系统内核层面完成所有操作后，调用才结束。\n\n* 阻塞I/O造成CPU等待I/O，浪费等待时间，CPU的处理能力不能得到充分利用\n\n##### 非阻塞：\n\n非阻塞I/O跟阻塞I/O的差别为调用之后会立即返回\n\n![image-20191212172706537](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2g0l7cmj30jm0kkq3q.jpg)\n\n* 非阻塞I/O返回之后，CPU的时间片可以用来处理其他事务，此时的性能提升是明显的。\n\n* 问题：由于完整的I/O并没有完成，立即返回的并不是业务层期望的 数据，而仅仅是当前调用的状态。为了获取完整的数据，应用程序需要重复调用I/O操作来确认 是否完成。这种重复调用判断操作是否完成的技术叫做轮询。\n\n* 轮询技术：\n\n  * read。它是最原始、性能最低的一种，通过重复调用来检查I/O的状态来完成完整数据的读取。在得到最终数据前，CPU一直耗用在等待上。\n\n    ![image-20191212173038848](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2jpnno5j30ku0l8gmy.jpg)\n\n  * select。它是在read的基础上改进的一种方案，通过对文件描述符上的事件状态来进行判断。\n\n    ![image-20191212173129915](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2klirw7j30k20l6wfu.jpg)\n\n    select轮询具有一个较弱的限制，那就是由于它采用一个1024长度的数组来存储状态， 所以它最多可以同时检查1024个文件描述符。\n\n  * poll。该方案较select有所改进，采用链表的方式避免数组长度的限制，其次它能避免不需要的检查。但是当文件描述符较多的时候，它的性能还是十分低下的。\n\n    ![image-20191212173248351](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2ly78zij30j40km75l.jpg)\n\n  * epoll。该方案是Linux下效率最高的I/O事件通知机制，在进入轮询的时候如果没有检查到 I/O事件，将会进行休眠，直到事件发生将它唤醒。它是真实利用了事件通知、执行回调 的方式，而不是遍历查询，所以不会浪费CPU，执行效率较高\n\n    ![image-20191212173403901](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2na09ynj30jw0leta2.jpg)\n\n  * kqueue。该方案的实现方式与epoll类似，不过它仅在FreeBSD系统下存在。\n\n#### 现实的异步I/O\n\n通过让部分线程进行阻塞I/O或者非阻塞I/O加 轮询技术来完成数据获取，让一个线程进行计算处理，通过线程之间的通信将I/O得到的数据进 行传递，这就轻松实现了异步I/O\n\n![image-20191212173804605](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2rft4wij30pq0iwgmo.jpg)\n\n* ibeio 实质上依然是采用线程池与阻塞I/O模拟异步I/O\n* IOCP：调用异步方法，等待I/O完成之后的通知，执行回调，用户无须考虑轮询。但是它的 内部其实仍然是线程池原理，不同之处在于这些线程池由系统内核接手管理。\n\n![image-20191212174138825](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u339w1rrj30g80ekq3m.jpg)\n\nNode是单线程的，这里的单线程仅仅只是 JavaScript执行在单线程中罢了。在Node中，无论是*nix还是Windows平台，内部完成I/O任务的 另有线程池。\n\n### Node 的异步 I/O\n\n事件循环、观察者、请求对象、I/O线程池这四者共同构成了Node异步I/O模型的基本要素。\n\nWindows下主要通过IOCP来向系统内核发送I/O调用和从内核获取已完成的I/O操作，配以事 件循环，以此完成异步I/O的过程。在Linux下通过epoll实现这个过程，FreeBSD下通过kqueue实 现，Solaris下通过Event ports实现。不同的是线程池在Windows下由内核(IOCP)直接提供，*nix 系列下由libuv自行实现。\n\n#### 事件循环\n\n**Node自身的执行模型——事件循环**\n\n每执行一次循环体的过程我 们称为Tick。每个Tick的过程就是查看是否有事件待处理，如果有，就取出事件及其相关的回调 函数。如果存在关联的回调函数，就执行它们。然后进入下个循环，如果不再有事件处理，就退出进程。\n\n![image-20191212174548717](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u2zihuruj30km0o6dhb.jpg)\n\n#### 观察者\n\n每个事件循环中有一个或者多个观察者，而判断是否有事件要处理的过程就是向这些观察者询问 是否有要处理的事件。\n\n* 观察者将事件进行分类。在Node中，事件主要来源于网络请求、文件I/O等，这些事件对应的 观察者有文件I/O观察者、网络I/O观察者等。\n* 在Windows下，这个循环基于IOCP创建，而在*nix下则基于多线程创建。\n\n#### 请求对象\n\n从JavaScript发起调用到内核执行完I/O操作的 过渡过程中，存在一种中间产物，它叫做请求对象。\n\n```javascript\nfs.open = function(path, flags, mode, callback) { \n  // ...\n  binding.open(pathModule._makeLong(path), stringToFlags(flags),mode,callback); \n};\n```\n\n![image-20191212175431157](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u38jib15j30ss0q40uj.jpg)\n\n* 从JavaScript调用Node的核心模块，核心模块调用C++内建模块，内建模块通过libuv进行系统调用\n\n* 这里libuv作为封装层，有两个平台的实现，实质上是调 用了uv_fs_open()方法。在uv_fs_open()的调用过程中，我们创建了一个FSReqWrap请求对象\n\n* 回调函数则 被设置在这个对象的oncomplete_sym属性上\n\n  ```javascript\n  req_wrap->object_->Set(oncomplete_sym, callback);\n  ```\n\n* 对象包装完毕后，在Windows下，则调用QueueUserWorkItem()方法将这个FSReqWrap对象推入线程池中等待执行\n\n  * QueueUserWorkItem()方法接受3个参数:第一个参数是将要执行的方法的引用，这里引用的是uv_fs_thread_proc，第二个参数是uv_fs_thread_proc方法运行时所需要的参数;第三个参数是 执行的标志。\n\n* 当线程池中有可用线程时，我们会调用uv_fs_thread_proc()方法。uv_fs_thread_ proc()方法会根据传入参数的类型调用相应的底层函数\n\n* 至此，JavaScript调用立即返回，由JavaScript层面发起的异步调用的第一阶段就此结束。\n\nJavaScript线程可以继续执行当前任务的后续操作。当前的I/O操作在线程池中等待执行，不管它 是否阻塞I/O，都不会影响到JavaScript线程的后续执行，如此就达到了异步的目的。\n\n**请求对象是异步I/O过程中的重要中间产物，所有的状态都保存在这个对象中**，包括送入线程池等待执行以及I/O操作完毕后的回调处理\n\n#### 执行回调\n\n* 线程池中的I/O操作调用完毕之后，会将获取的结果储存在req->result属性上，然后调用 PostQueuedCompletionStatus()通知IOCP，告知当前对象操作已经完成\n\n```javascript\nPostQueuedCompletionStatus((loop)->iocp, 0, 0, &((req)->overlapped))\n```\n\n* PostQueuedCompletionStatus()方法的作用是向IOCP提交执行状态，并将线程归还线程池。通过PostQueuedCompletionStatus()方法提交的状态，可以通过GetQueuedCompletionStatus()提取。\n\n* 在每次Tick的执行中，它会调用 IOCP相关的GetQueuedCompletionStatus()方法检查线程池中是否有执行完的请求，如果存在，会将请求对象加入到I/O观察者的队列中，然后将其当做事件处理。\n* I/O观察者回调函数的行为就是取出请求对象的result属性作为参数，取出oncomplete_sym属性作为方法，然后调用执行，以此达到调用JavaScript中传入的回调函数的目的\n\n ![image-20191212192431768](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u5u87afbj30uu0u0q6o.jpg)\n\n### 非I/O的异步API\n\nI/O无关的异步API:setTimeout()、setInterval()、 setImmediate()和process.nextTick()\n\n#### 定时器\n\nsetTimeout()和setInterval()\n\n它们的实现原理与异步I/O比较类似，只是不需要I/O线程池的参与。\n\n调用setTimeout()或者 setInterval()创建的定时器会被插入到定时器观察者内部的一个红黑树中。每次Tick执行时，会 从该红黑树中迭代取出定时器对象，检查是否超过定时时间，如果超过，就形成一个事件，它的 回调函数将立即执行。\n\n![image-20191212194435097](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u6f2b0goj30u60nu76w.jpg)\n\n#### process.nextTick()\n\n```javascript\nprocess.nextTick = function(callback) { \n  // on the way out, don't bother.\n  // it won't get fired anyway\n  if (process._exiting) return;\n  \n  if (tickDepth >= process.maxTickDepth) \n    maxTickWarn();\n  \n  var tock = { callback: callback };\n  if (process.domain) tock.domain = process.domain;\n  nextTickQueue.push(tock);\n  if (nextTickQueue.length) {\n    process._needTickCallback(); \n  }\n};\n```\n\n每次调用process.nextTick()方法，只会将回调函数放入队列中，在下一轮Tick时取出执行。 定时器中采用红黑树的操作时间复杂度为O(lg(n))，nextTick()的时间复杂度为O(1)。相较之下，process.nextTick()更高效。\n\n#### setImmediate()\n\n```javascript\nprocess.nextTick(function () { \n  console.log('nextTick延迟执行');\n});\nsetImmediate(function () {\n  console.log('setImmediate延迟执行'); \n});\nconsole.log('正常执行'); \n```\n\n其执行结果如下:\n\n```json\n正常执行 \nnextTick延迟执行 \nsetImmediate延迟执行\n```\n\n* process.nextTick()中的回调函数执行的优先级要高于setImmediate()。\n\n* 原因在于事件循环对观察者的检查是有先后顺序的，process.nextTick()属于idle观察者， setImmediate()属于check观察者。在每一个轮循环检查中，idle观察者先于I/O观察者，I/O观察者先于check观察者。\n* process.nextTick()的回调函数保存在一个数组中，setImmediate()的结果 则是保存在链表中\n* 在行为上，process.nextTick()在每轮循环中会将数组中的回调函数全部执行完，而setImmediate()在每轮循环中执行链表中的一个回调函数。\n* 之所以这样设计，是为了保证每轮循环能够较快地执行结束，防止CPU占用过多而阻塞后续I/O 调用的情况。\n\n### 事件驱动与高性能服务器\n\n事件驱动的实质：\n\n通过主循环加事件触发的方式来运行程序。\n\n![image-20191212201217702](https://tva1.sinaimg.cn/large/006tNbRwgy1g9u77vrg44j30vo0nm77g.jpg)\n\n#### 几种经典的服务器模型，对比优缺点\n\n* 同步式。对于同步式的服务，一次只能处理一个请求，并且其余请求都处于等待状态。 \n* 每进程/每请求。为每个请求启动一个进程，这样可以处理多个请求，但是它不具备扩展性，因为系统资源只有那么多。\n* 每线程/每请求。为每个请求启动一个线程来处理。尽管线程比进程要轻量，但是由于每个线程都占用一定内存，当大并发请求到来时，内存将会很快用光，导致服务器缓慢。\n\n#### 高性能：\n\nNode通过事件驱动的方式处理请求，无须为 每一个请求创建额外的对应线程，可以省掉创建线程和销毁线程的开销，同时操作系统在调度任 务时因为线程较少，上下文切换的代价很低。这使得服务器能够有条不紊地处理请求，即使在大量连接的情况下，也不受线程上下文切换开销的影响，这是Node高性能的一个原因。","tags":["Node.js"],"categories":["Node.js"]},{"title":"scrollWidth,clientWidth,offsetWidth的区别","url":"/2019/12/07/scrollWidth,clientWidth,offsetWidth的区别/","content":"\n# scrollWidth,clientWidth,offsetWidth的区别\n\n## 总体说明\n\n### 元素对象：\n\n- offsetLeft、offsetTop属性：获取元素相对于文档左上角的坐标位置。\n\n* scrollWidth：对象的**实际内容**的宽度，不包括边线宽度，会随对象中内容超过可视区后而变大。\n\n  scrollWidth=元素的width+padding\n\n* clientWidth：对象内容的**可视区的宽度**，不包括滚动条等边线，会随对象显示大小的变化而改变。\n\n  clientWidth=元素的width+padding\n\n* offsetWidth：对象**整体的实际宽度**，包括滚动条等边线，会随对象显示大小的变化而改变。\n\n  offsetWidth=元素的width+padding+border\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7aq0kktmyj30gx0gqtam.jpg)\n\n###window对象：\n\n* innerWidth：窗口中文档显示区域的宽度，不包括菜单栏、工具栏等部分。该属性可读可写。浏览器窗口的内部宽度（对于IE9+、Chrome、Firefox、Opera 以及 Safari）\n* pageXOffset：整数只读属性，表示文档向右滚动过的像素数。IE不支持该属性，使用body元素的scrollLeft属性替代。\n\n* \n\n##情况一\n\n元素内无内容或者内容不超过可视区，滚动不出现或不可用的情况下。\n\n* scrollWidth=clientWidth，两者皆为内容可视区的宽度。\n* offsetWidth为元素的实际宽度。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7aoj7ezc9j30eo07hjs6.jpg)\n\n##情况二\n\n元素的内容超过可视区，滚动条出现和可用的情况下。\n\n* scrollWidth>clientWidth。\n* scrollWidth为实际内容的宽度。\n* clientWidth是内容可视区的宽度。\n* offsetWidth是元素的实际宽度。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7aokjodirj30h40a1q41.jpg)\n\n## 针对文档(document)的各个height、width、top、left的说明\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7apu7784cj30dw0fa0tw.jpg)\n\n## 针对网页中一个div的各个属性值的说明\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7apvi51ygj30jg0ga400.jpg)","tags":["CSS"],"categories":["CSS"]},{"title":"循环中的异步操作问题小结","url":"/2019/11/26/JS事件机制 copy/","content":"\n# 循环中的异步操作问题小结\n\n循环的异步操作主要有两个问题：\n\n- 如何确保循环的所有异步操作完成之后执行某个其他操作\n- 循环中的下一步操作依赖于前一步的操作，如何解决\n\n## 不需等待结果\n\n要处理这个问题，我们可以把这个匿名函数定义为异步的：\n\n```javascript\nasync function processArray(array){\n  array.forEach(async (item)=>{\n    await delayedLog(item)\n  })\n  console.log('Done!')\n}\n```\n\n但是这样的话 forEach 方法就相当于异步的了，不会等待遍历完所有的 item 将会输出：\n\n```text\nDone!\n1\n2\n3\n```\n\n如果你不需要等待这个循环完成，这样就已经可以了。但是大部分情况我们还是需要等待这个循环完成才进行之后的操作。\n\n## 如何确保循环的所有异步操作完成之后执行某个其他操作\n\n### 方法一：设置一个flag，在每个异步操作中对flag进行检测\n\n```javascript\nlet flag = 0;\nfor(let i = 0; i < len; i++) {\n  flag++;\n  Database.save_method().exec().then((data) => {\n      if(flag === len) {\n            // your code\n      }\n  })\n}\n```\n\n### 方法二：将所有的循环放在一个promise中，使用then处理\n\n```javascript\n new Promise(function(resolve){\n      resolve()\n }).then(()=> {\n     for(let i = 0; i < len; i++) {\n           Database.save_method().exec()\n     }\n}).then(() => {\n    // your code\n})\n```\n\n### 方法三：串行遍历\n\n要等待所有的结果返回，我们还是要回到老式的 for 循环写法：\n\n```javascript\nasync function processArray(array){\n  for(const item of array){\n    await delayedLog(item)\n  }\n  console.log('Done!')\n}\n```\n\n最后的结果符合我们的预期：\n\n```text\n1\n2\n3\nDone!\n```\n\n### 方法四：并行遍历\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g7c606vfgvj30tg081mxe.jpg)\n\n```javascript\nasync function processArray(array){\n  //map array to promise\n  const promises=array.map(delayedLog)\n  await Promise.all(promises)\n  console.log('Done!')\n}\n```\n\n（注意：对于特别大的数组不建议使用这种写法，太多的并行任务会加重 CPU 和内存的负荷）\n\n## 循环中的下一步操作依赖于前一步的操作，如何解决\n\n### 方法一：使用递归，在异步操作完成之后调用下一次异步操作\n\n```javascript\nfunction loop(i){\n  i++;\n  Database.save_method().exec().then(() => {\n      loop(i)\n    })\n}\n```\n\n### 方法二：使用async和await（串行遍历）\n\n```javascript\nasync function loop() {\n    for(let i = 0; i < len; i++) {\n         await Database.save_method().exec();\n    }\n}\n```\n\n# 如何优雅地写js异步循环\n\n## 循环的方式\n\n假设我们有个数组，包含 5 个数字：`let times = [100, 150, 200, 250, 300]`； \n还有一个异步的睡觉方法：`sleep(time, cb)`。\n\n```javascript\nimport Promise from 'bluebird';\n\n// 当没有 cb 时，返回一个 Promise 对象\nexport default function sleep(time, cb) {  \n    if (cb) {\n        setTimeout(cb, time);\n    } else {\n        return new Promise(resolve => {\n            setTimeout(resolve, time);\n        });\n    }\n};\n```\n\n现在要去循环睡这几个数字，问你有哪些睡法？🤔\n\n为了方便交流，我就给这几个睡法起个名字：\n\n1. All in：你如果赶时间又不担心消耗过度，你可以一次性都睡了；\n2. One by one：你想细水长流，你可以一个一个睡；\n3. With concurrency：你害羞地低下头，说一次能不能睡两个。\n\n> 作为一段有节操的代码，肯定要告诉其他人你睡完了，也就是必须有全部完成的回调，否则我们接下来的交流会毫无意义。\n\n本文目的是和大家探讨如何写出优雅的异步循环代码，并不是去实现这些循环控制的逻辑；而保持代码优雅，个人以为最好的办法是使用较新的语言特性，其次是使用优秀的开源项目，最后才是自己撸。下面会使用 [Async](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcaolan%2Fasync)、[Promise(bluebird)](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fpetkaantonov%2Fbluebird) 和 ES7 中的 `async/await` 对比下实现这几种循环的区别。\n\n### All in\n\n![All in](https://tva1.sinaimg.cn/large/006y8mN6ly1g7c606vfgvj30tg081mxe.jpg)\n\n这种方式效率是最高的，耗时取决于循环中最慢的那个异步方法。对资源的消耗也是最大的，如果大量循环请求后端服务，很有可能造成瞬时拥堵的情况。\n\n如果自己实现，这也是最简单的场景，加一个完成计数器，每个异步方法完就给这个完成计数器加 1，然后检查完成数是不是等于数组长度，一旦相等就表示所有的异步方法执行完毕，通知全部完成的回调。\n\n#### 使用 async.each：\n\n```javascript\nimport { each } from 'async';  \nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\nconsole.log('sleep start');  \nconsole.time('async all in');  \neach(times, sleep, (err) => {  \n    console.timeEnd('async all in');\n    console.log('sleep complete');\n});\n// sleep start\n// async all in: 304.627ms\n// sleep complete\n```\n\n#### 使用 Promise.all：\n\n```javascript\nimport Promise from 'bluebird';  \nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\nconsole.log('sleep start');  \nconsole.time('promise all in');  \nPromise.all(times.map(time => sleep(time))).then(() => {  \n    console.timeEnd('promise all in');\n    console.log('sleep complete');\n});\n// sleep start\n// promise all in: 305.509ms\n// sleep complete\n```\n\n#### 使用ES7 async/await：\n\n```javascript\nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\n(async function() {\n    console.log('sleep start');\n    console.time('es7 all in');\n    for await (let i of times.map(time => sleep(time))) {}\n    console.timeEnd('es7 all in');\n    console.log('sleep complete');\n}());\n// sleep start\n// es7 all in: 305.986ms\n// sleep complete\n```\n\n### One by one\n\n![One by one](https://tva1.sinaimg.cn/large/006y8mN6ly1g7c65nlncwj30tg04374g.jpg)\n\n这种方式效率最低，有点类似于同步语言中的循环，一个接着一个执行，耗时自然也就是所有异步方法耗时的总和。对资源的消耗最小。\n\n这个实现起来也比较简单，把数组看做一个队列，每次从队列`shift`出一个代入异步方法执行，执行完成就开始递归调用这个过程，当队列长度为空就表示所有的异步方法执行完毕，结束递归，通知全部完成的回调。\n\n#### 使用 async.eachSeries：\n\n```javascript\nimport { eachSeries } from 'async';  \nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\nconsole.log('sleep start');  \nconsole.time('async one by one');  \neachSeries(times, sleep, (err) => {  \n    console.timeEnd('async one by one');\n    console.log('sleep complete');\n});\n// sleep start\n// async one by one: 1020.078ms\n// sleep complete\n```\n\n#### 使用 Promise.reduce：\n\n```javascript\nimport Promise from 'bluebird';  \nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\nconsole.log('sleep start');  \nconsole.time('promise one by one');  \nPromise.reduce(times, (last, curr) => {  \n    return sleep(curr);\n}, 0).then(() => {\n    console.timeEnd('promise one by one');\n    console.log('sleep complete');\n});\n// sleep start\n// promise one by one: 1023.014ms\n// sleep complete\n```\n\n#### 使用ES7 async/await：\n\n```javascript\nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\n(async function() {\n    console.log('sleep start');\n    console.time('es7 one by one');\n    for (let time of times) {\n        await sleep(time);\n    }\n    console.timeEnd('es7 one by one');\n    console.log('sleep complete');\n}());\n// sleep start\n// es7 one by one: 1025.513ms\n// sleep complete\n```\n\n### With concurrency\n\n这种方式稍微复杂些，但也是最灵活的方式，可以随心控制并发数。效率和耗时取决于魔法数字 `concurrency`，当 `concurrency` 大于或等于数组长度时，它就等同于 **All in** 方式；当 `concurrency` 为 1 时，它就等同于 **One by one** 方式。所以耗时和对资源的消耗都会介于以上两种方式之间。\n\n**With concurrency** 本身在实现上也会有不同的方式，分别是预分组和任务池。\n\n#### 预分组\n\n![Pre Group](https://tva1.sinaimg.cn/large/006y8mN6ly1g7c66v9wx3j30tg05074j.jpg)\n\n顾名思义，就是提前将数组内容按 `concurrency` 分好组，组内是以 **All in** 方式执行，组之间则是以 **One by one** 的方式执行。\n\n就以上文的例子，假如 `concurrency` 为 2，`times` 预先分组成：`[[100, 150], [200, 250], [300]]`，这样耗时会是 700（150 + 250 + 300）。\n\n这个实现方式可以有效地控制并发数，优点就是简单，缺点是并不能达到效率最大化。\n\n#### 任务池\n\n![Task Pool](https://tva1.sinaimg.cn/large/006y8mN6ly1g7c67an02oj30tg066q38.jpg)\n\n任务池的方式就是设置一个容量为 `concurrency` 的池子，比如容量为 2，初始化放入两个任务，每当有任务完成，就继续往池子添加新的任务，直到所有任务都完成。上文的例子执行过程大致如下：\n\n1. `time = 0; pool = [100, 150]`：放入 `100` 和 `150`\n2. `time = 100; pool = [150, 200]`：`100` 结束，放入 `200`\n3. `time = 150; pool = [200, 250]`：`150` 结束，放入 `250`\n4. `time = 300; pool = [250, 300]`：`200` 结束，放入 `300`\n5. `time = 400; pool = [300]`：`250` 结束，没有更多任务\n6. `time = 600; pool = []`：`300` 结束，循环完毕\n\n得出来的耗时是 600，比预分组的方式效率更高，而且同样能有效控制并发个数。async 和 bluebird 也有相关的方法供直接使用。\n\n#### 使用 async.eachLimit：\n\n```javascript\nimport { eachLimit } from 'async';  \nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\nconsole.log('sleep start');  \nconsole.time('async with concurrency');  \neachLimit(times, 2, sleep, (err) => {  \n    console.timeEnd('async with concurrency');\n    console.log('sleep complete');\n});\n// sleep start\n// async with concurrency: 611.498ms\n// sleep complete\n```\n\n#### 使用 Promise.map（bluebird 特有 api）：\n\n```javascript\nimport Promise from 'bluebird';  \nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\nconsole.log('sleep start');  \nconsole.time('promise one by one');  \nPromise.map(times, (time) => {  \n    return sleep(time);\n}, {\n    concurrency: 2\n}).then(() => {\n    console.timeEnd('promise one by one');\n    console.log('sleep complete');\n});\n// sleep start\n// promise with concurrency: 616.601ms\n// sleep complete\n```\n\n#### 使用ES7 async/await：\n\n> `pool` 方法来自[davetemplin/async-parallel](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fdavetemplin%2Fasync-parallel%2Fblob%2Fmaster%2Findex.ts%23L153)\n\n```javascript\nimport sleep from './sleep';\n\nlet times = [100, 150, 200, 250, 300];\n\n(async function() {\n    console.log('sleep start');\n    console.time('es7 with concurrency');\n    await pool(2, async () => {\n        await sleep(times.shift());\n        return times.length > 0;\n    });\n    console.timeEnd('es7 with concurrency');\n    console.log('sleep complete');\n}());\n\nasync function pool(size, task) {  \n    var active = 0;\n    var done = false;\n    var errors = [];\n    return new Promise((resolve, reject) => {\n        next();\n        function next() {\n            while (active < size && !done) {\n                active += 1;\n                task()\n                    .then(more => {\n                        if (--active === 0 && (done || !more))\n                            errors.length === 0 ? resolve() : reject(errors);\n                        else if (more)\n                            next();\n                        else\n                            done = true;\n                    })\n                    .catch(err => {\n                        errors.push(err);\n                        done = true;\n                        if (--active === 0)\n                            reject(errors);\n                    });\n            }\n        }\n    });\n}\n// sleep start\n// es7 with concurrency: 612.197ms\n// sleep complete\n```\n\n## 总结\n\n好了，到这应该可以给这三种循环方式打下分了：\n\n| **循环方式**         | 效率 | 消耗 | 灵活度 | 复杂度 |\n| -------------------- | ---- | ---- | ------ | ------ |\n| **All in**           | 高   | 高   | 低     | 低     |\n| **One by one**       | 低   | 低   | 低     | 低     |\n| **With concurrency** | 中   | 中   | 高     | 高     |\n\n乍一看 **With concurrency** 是完胜，其实并没有。**All in** 和 **One by one** 虽然灵活度低，但是应用的场景还是非常广泛的。要求效率优先就使用 **All in**；如果有下一次循环依赖上一次循环结果的场景，就必须使用 **One by One**。\n\n再说下上面 async、bluebird、ES7 对这三种循环方式的实现。需求一直在变，async 需要修改的代码非常少，甚至只要改下方法名就可以，方法定义简单优雅，这可能也是 async 易上手的原因；bluebird 在 `Promise` 标准基础上添加的方法非常实用，如：map、join...，以至于我几乎是没有使用过原生 `Promise` 😂；ES7 新增的 `async/await` 语法特性确实减轻了编写异步代码的痛苦，同时还增强了代码的可读性。\n\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"伪类和伪元素","url":"/2019/11/16/伪类和伪元素/","content":"\n# 伪类和伪元素\n\n`css`引入伪类和伪元素概念是为了格式化文档树以外的信息。也就是说，伪类和伪元素是用来修饰不在文档树中的部分。\n\n- 伪类用于当已有元素处于的某个状态时，为其添加对应的样式，这个状态是根据用户行为而动态变化的。比如说，当用户悬停在指定的元素时，我们可以通过`:hover`来描述这个元素的状态。虽然它和普通的`css`类相似，可以为已有的元素添加样式，但是它只有处于`dom`树无法描述的状态下才能为元素添加样式，所以将其称为伪类。\n- 伪元素用于创建一些不在文档树中的元素，并为其添加样式。比如说，我们可以通过`:before`来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中。\n\n伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。\n\n伪类和伪元素的根本区别在于：它们是否创造了**新**的元素,,   这个新创造的元素就叫  \"伪无素\" 。\n\n##伪类\n\n伪类前面是一个冒号，`E:first-child`会对现有的元素进行筛选\n\n- `:link`:选择未访问的链接\n\n- `:visited`:选择已访问的链接\n\n- `:hover`:选择鼠标指针浮动在其上的元素\n\n- `:active`:选择活动的链接\n\n- `:focus`:选择获取焦点的输入字段\n\n- `:not()`:一个否定伪类，用于匹配不符合参数选择器的元素。\n\n- `:first-child`:匹配元素的第一个子元素。\n\n- `:last-child`:匹配元素的最后一个子元素。\n\n- ` :first-of-type`:匹配属于其父元素的首个特定类型的子元素的每个元素。\n\n- ` :last-of-type`:匹配属于其父元素的最后一个特定类型的子元素的每个元素。\n\n- `:nth-child`:`:nth-child `根据元素的位置匹配一个或者多个元素，它接受一个 an+b 形式的参数，an+b 匹配到的元素\n\n- `:nth-last-child`:` :nth-last-child` 与`:nth-child `相似，不同之处在于它是从最后一个子元素开始计数的。\n\n- `:nth-of-type`:`:nth-of-type` 与 `nth-child `相似，不同之处在于它是只匹配特定类型的元素。\n\n- `:nth-last-type`:`:nth-last-of-type` 与 `nth-of-type `相似，不同之处在于它是从最后一个子元素开始计数的。\n\n- `:only-child` :当元素是其父元素中唯一一个特定类型的子元素时，`:only-child `匹配该元素。\n\n- `:target` :当URL带有锚名称，指向文档内某个具体的元素时，`:target`匹配该元素。\n\n- `:checked`:` :checked `匹配被选中的 input 元素，这个 input 元素包括 radio 和 checkbox。\n\n- `:default`: 匹配默认选中的元素\n\n- `:disabled`: 匹配禁用的表单元素。\n\n- `:empty` :匹配没有子元素的元素\n\n- `:enabled`: 匹配没有设置 disabled 属性的表单元素。\n\n- `:in-range`: 匹配在指定区域内元素。\n\n- `:out-of-range`: 与`:in-range `相反，它匹配不在指定区域内的元素。\n\n- `:indeterminate`:indeterminate 的英文意思是“ 不确定的”。当某组中的单选框或复选框还没有选取状态时，:indeterminate 匹配该组中所有的单选框或复选框。\n\n- `:valid` :匹配条件验证正确的表单元素。\n\n- `:invalid`: 与`:valid` 相反，匹配条件验证错误的表单元素。\n\n- `:optional `:匹配是具有 optional 属性的表单元素。当表单元素没有设置为 required 时，即为 optional 属性。\n\n- `:required`: 与`:optional `相反匹配设置了 required 属性的表单元素。\n\n- `:read-only`: 匹配设置了只读属性的元素，表单元素可以通过设置“readonly” 属性来定义元素只读。\n\n- `:read-write`: 匹配处于编辑状态的元素。input，textarea 和设置了 contenteditable 的 HTML 元素获取焦点时即处于编辑状态。\n\n- `:scope`: 匹配处于 style 作用域下的元素。当 style 没有设置 scope 属性时，style 内的样式会对整个 html 起作用。\n\n- `:dir `:匹配指定阅读方向的元素，当 HTML 元素中设置了 dir 属性时该伪类才能生效。现时支持的阅读方向有两种：ltr（从左往右）和 rtl（从右往左）。目前，只有火狐浏览器支持:dir 伪类，并在火狐浏览器中使用时需要添加前缀 ( -moz-dir() )。\n\n- `:lang `:匹配设置了特定语言的元素，设置特定语言可以通过为了 HTML 元素设置 lang=”” 属性，设置 meta 元素的 charset=”” 属性，或者是在 http 头部上设置语言属性。\n\n  实际上，lang=”” 属性不只可以在 html 标签上设置，也可以在其他的元素上设置。\n\n* `:root `:匹配文档的根元素。一般的 html 文件的根元素是 html 元素，而 SVG 或 XML 文件的根元素则可能是其他元素。\n* `:fullscreen`: 匹配处于全屏模式下的元素。全屏模式不是通过按 F11 来打开的全屏模式，而是通过 Javascript 的 Fullscreen API 来打开的，不同的浏览器有不同的 Fullscreen API。目前，:fullscreen 需要添加前缀才能使用。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g79wl6d5ouj30gi0exq4h.jpg)\n\n##伪元素\n\n伪元素前面是两个冒号，`E::first-line`会创造出不存在的新元素，由于css对单冒号的伪元素也支持，所以这样很容易让新学者混淆。但实际上现在css3已经明确规定了伪类单冒号，伪元素双冒号的规则。\n\n- `::before/:before`在被选元素前插入内容。需要使用 content 属性来指定要插入的内容。被插入的内容实际上不在文档树中。\n\n- `::after/:after` 在被元素后插入内容，其用法和特性与`:before`相似。\n\n  对于伪元素 `:before` 和 `:after` 而言，属性 `content` 是必须设置的，我们知道属性的值可以为字符串，也可以有其它形式，比如指向一张图片的 `URL:`\n\n  `content: url('img/icon.png')`\n\n- `::first-letter/:first-letter` 匹配元素中文本的首字母。被修饰的首字母不在文档树中\n\n- `::first-line/:first-line` 匹配元素中第一行的文本。这个伪元素只能用在块元素中，不能用在内联元素中。\n\n- `::selection` 匹配用户被用户选中或者处于高亮状态的部分。在火狐浏览器使用时需要添加`-moz`前缀。该伪元素只支持双冒号的形式。\n\n- `::placeholder` 匹配占位符的文本，只有元素设置了`placeholder`属性时，该伪元素才能生效。\n\n  伪元素不是`CSS`的标准，它的实现可能在将来会有所改变，所以要决定使用时必须谨慎。在一些浏览器中（`IE10`和`Firefox18`及其以下版本）会使用单冒号的形式。\n\n* `::backdrop` 用于改变全屏模式下的背景颜色，全屏模式的默认颜色为黑色。该伪元素只支持双冒号的形式\n\n注意：\n\n* 配合伪类使用\n  - 伪元素 `:before` 还可以配合伪类使用，这里举经常与 `:before` 配合使用的伪类 `:hover` 为例：\n\n```css\n.before:hover:before{content:'you before'; color:red;}\n<div class=\"before\"> me</div>\n```\n\n- 配合取值函数 `attr()` 使用\n\n```css\na::before{content: attr(title)}\n<a href=\"https://blog.ihoey.com\" title=\"梦魇小栈\"></a>\n\n效果\n<a href=\"https://blog.ihoey.com\" title=\"梦魇小栈\">梦魇小栈</a>\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g79wlwrg6aj30dn05w3yy.jpg)","tags":["CSS","伪元素","伪类"],"categories":["CSS"]},{"title":"sass&less对比","url":"/2019/11/11/sass&less对比/","content":"\n# sass&less\n\n##为什么要使用 CSS 预处理器？\n\n作为前端开发人员，大家都知道，Js 中可以自定义变量，而 CSS 仅仅是一个标记语言，不是编程语言，因此不可以自定义变量，不可以引用等等。\n\n**CSS 有具体以下几个缺点：**\n\n语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；\n\n没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。\n\n这就导致了我们在工作中无端增加了许多工作量。而使用 CSS 预处理器，提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大提高了我们的开发效率。\n\n但是，CSS 预处理器也不是万金油，CSS 的好处在于简便、随时随地被使用和调试。预编译 CSS 步骤的加入，让我们开发工作流中多了一个环节，调试也变得更麻烦了。更大的问题在于，预编译很容易造成后代选择器的滥用。\n\n所以我们在实际项目中衡量预编译方案时，还是得想想，比起带来的额外维护开销，CSS 预处理器有没有解决更大的麻烦。\n\n## 主要区别：\n\n首先 sass 和 less 都是 css 的预编译处理语言，他们引入了 mixins，参数，嵌套规则，运算，颜色，名字空间，作用域，JavaScript 赋值等 加快了 css 开发效率,当然这两者都可以配合 gulp 和 grunt 等前端构建工具使用\n\nsass 和 less**主要区别:在于实现方式 less 是基于 JavaScript 的在客户端处理 所以安装的时候用 npm，sass 是基于 ruby 所以在服务器处理。**\n\n## SASS 介绍\n\nSass 是 Ruby 开发者为前端开发提供的处理 CSS 的工具。它为 CSS 提供更动态的设定方式，允许编译、变量、函数……总之，使 CSS 更动态，也更像一门真正的可编程语言。\n\n1. Sass 是基于 Ruby 开发的，所以开发环境首先需要安装 Ruby。\n2. 浏览器中无法编译 Sass，所以要先编译好 css 文件，再交给浏览器。Sass**不能**在浏览器环境中直接运行。\n\n##Less 介绍\n\nLess 是晚些产生的语言，基于 JS 进行开发，在 Node 中进行编译。所以使用时不需要安装其他语言，不过要记得**先导入 less 文件，然后导入 less.js**。提供 CDN 地址在这里：\n\n```html\n<script src=\"https://cdn.bootcss.com/less.js/3.0.4/less.js\"></script>\n<script src=\"https://cdn.bootcss.com/less.js/3.0.4/less.min.js\"></script>\n```\n\n当然 Less 也提供服务器端的编译功能。\n\n## Stylus 介绍\n\n[Stylus](https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Flearnboost.github.io%2Fstylus%2F)相对前两者较新，可以看官方文档介绍的功能。\n\n1.来自 NodeJS 社区，所以和 NodeJS 走得很近，与 JavaScript 联系非常紧密。还有专门 JavaScript API：[learnboost.github.io/stylus/docs…](https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Flearnboost.github.io%2Fstylus%2Fdocs%2Fjs.html)\n\n2.支持 Ruby 之类等等框架\n\n3.更多更强大的支持和功能\n\n以 stylus 的角度来说,stylus 更加注重对 javascript( [learnboost.github.io/stylus/docs…](https://link.juejin.im?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Flearnboost.github.io%2Fstylus%2Fdocs%2Fjs.html) ) 的利用。 当用户觉得写 stylus 函数遇到了过于复杂或者无法测试，stylus 语法不支持等需求时， 也可以直接用 js 来实现这个函数并且在 stylus 中调用。\n\n其次从编译器源码上来看：stylus 应该比 less.js 更有条理， 感觉如果未来社区添加功能的话，stylus 的源码添加起功能来会更简单，同样，目前 stylus 的功能也更复杂。\n\nstylus 和 sass 另一个区别在于 sass 本身会建议，以下划线(\\_) 打头的文件在静态资源打包的时候不会被编译成 .css 文件【只是作为一种 import 存在】。而 stylus 没有这方面的规范。\n\n同时写过 stylus 和 sass， 就语法简洁来看， stylus 在这方面占了很大的便宜。\n\n## [三者对比](https://cloud.tencent.com/developer/article/1092653)\n\n- ### 变量\n\nSass: \\$var\nLess: @var\n两种语言都会有作用域的问题。一个变量只能在它被定义的代码块中使用。重复定义的变量会报错。\n\nStylus 对变量名没有任何限定，你可以是 \\$ 开始，也可以是任意的字符，而且与变量值之间可以用冒号、空格隔开，需要注意的是 Stylus (0.22.4) 将会编译 @ 开始的变量，但其对应的值并不会赋予该变量，换句话说，在 Stylus 的变量名不要用 @ 开头。\n\n- ### 运算赋值：\n\n只要保持单位统一或可相互转换，就可以进行运算，包括颜色在内：\nSass:\n\n```scss\np {\n  cursor: e + -resize;\n}\n// 编译为\n// p {\n//   cursor: e-resize;\n// }\n\nbody {\n  margin: (14px/2);\n  top: 50px + 100px;\n  right: $var * 10%;\n}\n```\n\nLess:\n\n```less\n@base: 5%;\n@filler: @base * 2;\n@other: @base + @filler;\n\ncolor: #888 / 4;\nbackground-color: @base-color + #111;\nheight: 100% / 2 + @filler;\n\n@var: 1px + 5;\n\nwidth: (@var + 5) * 2;\n\nborder: (@width * 2) solid black;\n```\n\n- ### 嵌套\n\nSass 和 Less 均允许元素嵌套。如果父子选择器均用逗号分开，那么编译时会按结合律拆开编译。\nSass 和 Less 指代上层元素均使用`&`符号。\n\n- ### 继承\n\nSass 中，写好的选择器进行集成，需要`@extend`关键字。（sytlus 与 sass 相同）\nLess 中，直接写入即可：`.be-extend-class;`\n\n- ### Mixin\n\nSass 中，需要进行 Mixin 操作的选择器需要`@mixin`关键字，选择器后可以传入变量和默认值。\n\n```scss\n@mixin left($value: 10px) padding: $value;\n```\n\n使用时使用`@include`关键字，并可以更新变量：\n\n```scss\n@include left @include left(20px);\n```\n\nLess 中 Mixin 和继承感觉更相似，选择器在书写时就留好了变量，直接继承或更新变量即可：\n\n```less\n.be-extend-class(@width: 10px) {\n  padding: @width;\n}\n// 使用\n.be-extend-class;\n.be-extend-class(20px);\n```\n\nsass：在 sass 定义 Mixins 和 less、stylus 有所不同，在声明 Mixins 时需要使用“@mixin”,然后后面紧跟 Mixins 的名，他也可以定义参数，同时可以给这个参数设置一个默认值，但参数名是使用“\\$”符号开始，而且和参数值之间需要使用冒号（：）分开。另外在 sass 中调用 Mixins 需要使用“@include”，然后在其后紧跟你要调用的 Mixins 名。\n\nless：less 中声明 Mixins 和 CSS 定义样式非常类似，可以将 Mixins 看成是一个选择器，当然 Mixins 也可以设置参数，并给参数设置默认值。不过设置参数的变量名是使用“@”开始，同样参数和默认参数值之间需要使用冒号（：）分开。\n\nstylus：stylus 和前两者也略有不同，他可以不使用任何符号，就是直接定义 Mixins 名，然后在定义参数和默认值之间用等号（=）来连接。\n\n- ### 注释\n\n两种语言相同：多行注释格式可保留，单行注释格式会在编译时被删除。\n\n```scss\n/* 会被保留的注释格式 */\n// 不保存的注释格式\n```\n\n- ### 颜色运算：\n\nCSS 预处理器提供一系列**颜色函数**帮助生成主题系列颜色：\nSass：\n\n```scss\nlighten(#cc3, 10%) // #d6d65c\ndarken(#cc3, 10%) // #a3a329\ngrayscale(#cc3) // #808080 灰度\ncomplement(#cc3) // #33c\n```\n\nLess：\n\n```less\nlighten(@color, 10%);     // return a color which is 10% *lighter* than @color\ndarken(@color, 10%);      // return a color which is 10% *darker* than @color\n\nsaturate(@color, 10%);    // return a color 10% *more* saturated than @color\ndesaturate(@color, 10%);  // return a color 10% *less* saturated than @color\n\nfadein(@color, 10%);      // return a color 10% *less* transparent than @color\nfadeout(@color, 10%);     // return a color 10% *more* transparent than @color\nfade(@color, 50%);        // return @color with 50% transparency\n\nspin(@color, 10);         // return a color with a 10 degree larger in hue than @color\nspin(@color, -10);        // return a color with a 10 degree smaller hue than @color\n\nmix(@color1, @color2);    // return a mix of @color1 and @color2\n\n```\n\nstylus：\n\n```stylus\nlighten(color, 10%); /* 返回的颜色在'color'基础上变亮10% */\ndarken(color, 10%);  /* 返回的颜色在'color'基础上变暗10% */\nsaturate(color, 10%);   /* 返回的颜色在'color'基础上饱和度增加10% */\ndesaturate(color, 10%); /* 返回的颜色在'color'基础上饱和度降低10% */\n\n```\n\n- ### 插入文件\n\n两种语言相同，使用@import 关键字引入。注意后缀名，可以直接导入 css 文件。后缀名为 css 的文件不会被预处理器处理。\n\n```scss\n@import \"path/filename.scss\";\n\n@import \"lib.less\";\n@import \"lib.css\";\n```\n\n- ### ==高级语法：==\n\n#### SASS\n\n在 Sass 中，需要用 Sass 自己的一套语言编程：\n\n1. 条件 if-else\n\n```scss\n@if lightness($color) > 30% {\n  background-color: #000;\n} @else {\n  background-color: #fff;\n}\n```\n\n2. 循环\n\nfor:\n\n```scss\n@for $i from 1 to 10 {\n  .border-#{$i} {\n    border: #{$i}px solid blue;\n  }\n}\n```\n\nwhile:\n\n```scss\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n  $i: $i - 2;\n}\n```\n\neach:\n\n```scss\n@each $member in a, b, c, d {\n  .#{$member} {\n    background-image: url(\"/image/#{$member}.jpg\");\n  }\n}\n```\n\n3. 自定义函数\n\n需要`@function`、`@return`关键字。\n\n```scss\n@function double($n) {\n  @return $n * 2;\n}\n\n#sidebar {\n  width: double(5px);\n}\n```\n\n#### Less\n\nLess 是使用 JS 作为编译环境的，所以它支持 JS 语法。\n\n1. 字符串插值\n\n```less\n@base-url: \"http://assets.fnord.com\";\nbackground-image: url(\"@{base-url}/images/bg.png\");\n```\n\n2. 用反引号使用 JS 语法：\n\n```less\n@var: ` \"hello\" .toUpperCase() + \"!\" `;\n```\n\n3. 直接访问 JS 环境\n\n```less\n@height: `document.body.clientHeight`;\n```\n","tags":["CSS","SASS","LESS"],"categories":["CSS"]},{"title":"oh-my-zsh git 命令缩写","url":"/2019/11/05/oh-my-zsh git 命令缩写/","content":"\n#oh-my-zsh git 命令缩写\n\n喜欢用 git 命令行，平时能少打几个字还是会节省不少时间的。\n\n## 常用\n\n```javascript\nalias ga='git add'\nalias gb='git branch'\nalias gba='git branch -a'\nalias gbd='git branch -d'\nalias gcam='git commit -a -m'\nalias gcb='git checkout -b'\nalias gco='git checkout'\nalias gcp='git cherry-pick'\nalias gd='git diff'\nalias gfo='git fetch origin'\nalias ggpush='git push origin $(git_current_branch)'\nalias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nalias glgp='git log --stat -p'\nalias gm='git merge'\nalias gp='git push'\nalias gst='git status'\nalias gsta='git stash save'\nalias gstp='git stash pop'\n```\n\n## 全部\n\n参考：https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh\n\n```javascript\nalias g='git'\n\nalias ga='git add'\nalias gaa='git add --all'\nalias gapa='git add --patch'\nalias gau='git add --update'\n\nalias gb='git branch'\nalias gba='git branch -a'\nalias gbd='git branch -d'\nalias gbda='git branch --no-color --merged | command grep -vE \"^(\\*|\\s*(master|develop|dev)\\s*$)\" | command xargs -n 1 git branch -d'\nalias gbl='git blame -b -w'\nalias gbnm='git branch --no-merged'\nalias gbr='git branch --remote'\nalias gbs='git bisect'\nalias gbsb='git bisect bad'\nalias gbsg='git bisect good'\nalias gbsr='git bisect reset'\nalias gbss='git bisect start'\n\nalias gc='git commit -v'\nalias gc!='git commit -v --amend'\nalias gcn!='git commit -v --no-edit --amend'\nalias gca='git commit -v -a'\nalias gca!='git commit -v -a --amend'\nalias gcan!='git commit -v -a --no-edit --amend'\nalias gcans!='git commit -v -a -s --no-edit --amend'\nalias gcam='git commit -a -m'\nalias gcsm='git commit -s -m'\nalias gcb='git checkout -b'\nalias gcf='git config --list'\nalias gcl='git clone --recursive'\nalias gclean='git clean -fd'\nalias gpristine='git reset --hard && git clean -dfx'\nalias gcm='git checkout master'\nalias gcd='git checkout develop'\nalias gcmsg='git commit -m'\nalias gco='git checkout'\nalias gcount='git shortlog -sn'\ncompdef _git gcount\nalias gcp='git cherry-pick'\nalias gcpa='git cherry-pick --abort'\nalias gcpc='git cherry-pick --continue'\nalias gcs='git commit -S'\n\nalias gd='git diff'\nalias gdca='git diff --cached'\nalias gdct='git describe --tags `git rev-list --tags --max-count=1`'\nalias gdt='git diff-tree --no-commit-id --name-only -r'\nalias gdw='git diff --word-diff'\n\ngdv() { git diff -w \"$@\" | view - }\ncompdef _git gdv=git-diff\n\nalias gf='git fetch'\nalias gfa='git fetch --all --prune'\nalias gfo='git fetch origin'\n\nfunction gfg() { git ls-files | grep $@ }\ncompdef _grep gfg\n\nalias gg='git gui citool'\nalias gga='git gui citool --amend'\n\nggf() {\n  [[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\"\n  git push --force origin \"${b:=$1}\"\n}\ncompdef _git ggf=git-checkout\n\nggl() {\n  if [[ \"$#\" != 0 ]] && [[ \"$#\" != 1 ]]; then\n    git pull origin \"${*}\"\n  else\n    [[ \"$#\" == 0 ]] && local b=\"$(git_current_branch)\"\n    git pull origin \"${b:=$1}\"\n  fi\n}\ncompdef _git ggl=git-checkout\n\nggp() {\n  if [[ \"$#\" != 0 ]] && [[ \"$#\" != 1 ]]; then\n    git push origin \"${*}\"\n  else\n    [[ \"$#\" == 0 ]] && local b=\"$(git_current_branch)\"\n    git push origin \"${b:=$1}\"\n  fi\n}\ncompdef _git ggp=git-checkout\n\nggpnp() {\n  if [[ \"$#\" == 0 ]]; then\n    ggl && ggp\n  else\n    ggl \"${*}\" && ggp \"${*}\"\n  fi\n}\ncompdef _git ggpnp=git-checkout\n\nggu() {\n  [[ \"$#\" != 1 ]] && local b=\"$(git_current_branch)\"\n  git pull --rebase origin \"${b:=$1}\"\n}\ncompdef _git ggu=git-checkout\n\nalias ggpur='ggu'\ncompdef _git ggpur=git-checkout\n\nalias ggpull='git pull origin $(git_current_branch)'\ncompdef _git ggpull=git-checkout\n\nalias ggpush='git push origin $(git_current_branch)'\ncompdef _git ggpush=git-checkout\n\nalias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nalias gpsup='git push --set-upstream origin $(git_current_branch)'\n\nalias ghh='git help'\n\nalias gignore='git update-index --assume-unchanged'\nalias gignored='git ls-files -v | grep \"^[[:lower:]]\"'\nalias git-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'\ncompdef _git git-svn-dcommit-push=git\n\nalias gk='\\gitk --all --branches'\ncompdef _git gk='gitk'\nalias gke='\\gitk --all $(git log -g --pretty=%h)'\ncompdef _git gke='gitk'\n\nalias gl='git pull'\nalias glg='git log --stat'\nalias glgp='git log --stat -p'\nalias glgg='git log --graph'\nalias glgga='git log --graph --decorate --all'\nalias glgm='git log --graph --max-count=10'\nalias glo='git log --oneline --decorate'\nalias glol=\"git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\nalias glola=\"git log --graph --pretty='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all\"\nalias glog='git log --oneline --decorate --graph'\nalias gloga='git log --oneline --decorate --graph --all'\nalias glp=\"_git_log_prettily\"\ncompdef _git glp=git-log\n\nalias gm='git merge'\nalias gmom='git merge origin/master'\nalias gmt='git mergetool --no-prompt'\nalias gmtvim='git mergetool --no-prompt --tool=vimdiff'\nalias gmum='git merge upstream/master'\n\nalias gp='git push'\nalias gpd='git push --dry-run'\nalias gpoat='git push origin --all && git push origin --tags'\ncompdef _git gpoat=git-push\nalias gpu='git push upstream'\nalias gpv='git push -v'\n\nalias gr='git remote'\nalias gra='git remote add'\nalias grb='git rebase'\nalias grba='git rebase --abort'\nalias grbc='git rebase --continue'\nalias grbi='git rebase -i'\nalias grbm='git rebase master'\nalias grbs='git rebase --skip'\nalias grh='git reset HEAD'\nalias grhh='git reset HEAD --hard'\nalias grmv='git remote rename'\nalias grrm='git remote remove'\nalias grset='git remote set-url'\nalias grt='cd $(git rev-parse --show-toplevel || echo \".\")'\nalias gru='git reset --'\nalias grup='git remote update'\nalias grv='git remote -v'\n\nalias gsb='git status -sb'\nalias gsd='git svn dcommit'\nalias gsi='git submodule init'\nalias gsps='git show --pretty=short --show-signature'\nalias gsr='git svn rebase'\nalias gss='git status -s'\nalias gst='git status'\nalias gsta='git stash save'\nalias gstaa='git stash apply'\nalias gstc='git stash clear'\nalias gstd='git stash drop'\nalias gstl='git stash list'\nalias gstp='git stash pop'\nalias gsts='git stash show --text'\nalias gsu='git submodule update'\n\nalias gts='git tag -s'\nalias gtv='git tag | sort -V'\n\nalias gunignore='git update-index --no-assume-unchanged'\nalias gunwip='git log -n 1 | grep -q -c \"\\-\\-wip\\-\\-\" && git reset HEAD~1'\nalias gup='git pull --rebase'\nalias gupv='git pull --rebase -v'\nalias glum='git pull upstream master'\n\nalias gwch='git whatchanged -p --abbrev-commit --pretty=medium'\nalias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify -m \"--wip-- [skip ci]\"'\n```\n","tags":["git"],"categories":["git"]},{"title":"Object.prototype.toString方法的原理","url":"/2019/10/28/Object.prototype.toString方法的原理/","content":"\n# Object.prototype.toString 方法的原理\n\n## ECMAScript 3\n\n### Object.prototype.toString 方法的规范\n\n在**toString**方法被调用时,会执行下面的操作步骤:\n\n1. 获取 this 对象的[[Class]]属性的值.\n2. 计算出三个字符串**\"[object \",**第一步的操作结果 Result(1), 以及 **\"]\"**连接后的新字符串.\n3. 返回第二步的操作结果 Result(2).\n\n### [[Class]]\n\n[[Class]]是一个内部属性,所有的对象(原生对象和宿主对象)都拥有该属性.在规范中,[[Class]]是这么定义的\n\n| 内部属性  | 描述                             |\n| --------- | -------------------------------- |\n| [[Class]] | 一个字符串值,表明了该对象的类型. |\n\n然后给了一段解释:\n\n> 所有内置对象的[[Class]]属性的值是由本规范定义的.所有宿主对象的[[Class]]属性的值可以是任意值,甚至可以是内置对象使用过的[[Class]]属性的值.[[Class]]属性的值可以用来判断一个原生对象属于哪种内置类型.需要注意的是,除了通过**Object.prototype.toString**方法之外,本规范没有提供任何其他方式来让程序访问该属性的值\n\n也就是说,把 Object.prototype.toString 方法返回的字符串,去掉前面固定的**\"[object \"**和后面固定的**\"]\",**就是内部属性[[class]]的值,也就达到了判断对象类型的目的。\n\n### [[Class]]的值\n\n在 ES3 中,规范文档并没有总结出[[class]]内部属性一共有几种,不过我们可以自己统计一下,原生对象的[[class]]内部属性的值一共有 10 种.分别是:`\"Array\"`, `\"Boolean\"`, `\"Date\"`, `\"Error\"`, `\"Function\"`, `\"Math\"`, `\"Number\"`, `\"Object\"`, `\"RegExp\"`, `\"String\".`\n\n## ECMAScript 5\n\n### Object.prototype.toString 方法的规范\n\n在**toString**方法被调用时,会执行下面的操作步骤:\n\n1. 如果**this**的值为**undefined**,则返回`\"[object Undefined]\"`.\n2. 如果**this**的值为**null**,则返回`\"[object Null]\"`.\n3. 让*O*成为调用 ToObject(**this)**的结果.\n4. 让*class*成为*O*的内部属性[[Class]]的值.\n5. 返回三个字符串**\"[object \",** _class_, 以及 **\"]\"**连接后的新字符串.\n\n可以看出,ES5 比 ES3 多了 1,2,3 步.第 1,2 步属于新规则,比较特殊,因为\"`Undefined\"`和\"`Null\"`并不属于[[class]]属性的值,需要注意的是,这里和严格模式无关(大部分函数在严格模式下,this 的值才会保持 undefined 或 null,非严格模式下会自动成为全局对象).第 3 步并不算是新规则,因为在 ES3 的引擎中,也都会在这一步将三种原始值类型转换成对应的包装对象,只是规范中没写出来.\n\n### [[Class]]\n\nES5 中,[[Class]]属性的解释更加详细:\n\n> 所有内置对象的[[Class]]属性的值是由本规范定义的.所有宿主对象的[[Class]]属性的值可以是除了\"Arguments\", \"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"JSON\", \"Math\", \"Number\", \"Object\", \"RegExp\", \"String\"之外的的任何字符串.[[Class]]内部属性是引擎内部用来判断一个对象属于哪种类型的值的.需要注意的是,除了通过**Object.prototype.toString**方法之外,本规范没有提供任何其他方式来让程序访问该属性的值\n\n### 对比 ES3\n\n- 第一个差别就是[[class]]内部属性的值多了两种,成了 12 种\n  - 一种是 arguments 对象的[[class]]成了\"Arguments\",而不是以前的\"Object\"\n  - 多个了全局对象 JSON,它的[[class]]值为\"JSON\".\n- 第二个差别就是,宿主对象的[[class]]内部属性的值,不能和这 12 种值冲突（不过在支持 ES3 的浏览器中,貌似也没有发现哪些宿主对象故意使用那 10 个值）\n\n## ECMAScript 6\n\n**[[class]]内部属性没有了**,取而代之的是另外一个内部属性[[NativeBrand]].[[NativeBrand]]属性是这么定义的:\n\n| 内部属性        | 属性值                       | 描述                                                            |\n| --------------- | ---------------------------- | --------------------------------------------------------------- |\n| [[NativeBrand]] | 枚举 NativeBrand 的一个成员. | 该属性的值对应一个标志值(tag value),可以用来区分原生对象的类型. |\n\n### [[NativeBrand]]属性（`internal slot`）\n\n[[NativeBrand]]内部属性用来识别某个原生对象是否为符合本规范的某一种特定类型的对象.[[NativeBrand]]内部属性的值为下面这些枚举类型的值中的一个:NativeFunction, NativeArray, StringWrapper, BooleanWrapper, NumberWrapper, NativeMath, NativeDate, NativeRegExp, NativeError, NativeJSON, NativeArguments, NativePrivateName.[[NativeBrand]]内部属性仅用来区分区分特定类型的 ECMAScript 原生对象.只有在表 10 中明确指出的对象类型才有[[NativeBrand]]内部属性.\n\n| 属性值            | 对应类型             |\n| ----------------- | -------------------- |\n| NativeFunction    | Function objects     |\n| NativeArray       | Array objects        |\n| StringWrapper     | String objects       |\n| BooleanWrapper    | Boolean objects      |\n| NumberWrapper     | Number objects       |\n| NativeMath        | The Math object      |\n| NativeDate        | Date objects         |\n| NativeRegExp      | RegExp objects       |\n| NativeError       | Error objects        |\n| NativeJSON        | The JSON object      |\n| NativeArguments   | Arguments objects    |\n| NativePrivateName | Private Name objects |\n\n可见,和[[class]]不同的是,并不是每个对象都拥有[[NativeBrand]].\n\n### Object.prototype.toString 方法的规范:\n\n在**toString**方法被调用时,会执行下面的操作步骤:\n\n1. 如果**this**的值为**undefined**,则返回`\"[object Undefined]\"`.\n2. 如果**this**的值为**null**,则返回`\"[object Null]\"`.\n3. 让*O*成为调用 ToObject(**this)**的结果.\n4. 如果*O*有[[NativeBrand]]内部属性,让*tag*成为表 29 中对应的值.\n5. 否则\n   1. 让*hasTag*成为调用*O*的[[HasProperty]]内部方法后的结果,参数为@@toStringTag.\n   2. 如果*hasTag*为**false**,则让*tag*为`\"Object\"`.\n   3. 否则,\n      1. 让*tag*成为调用*O*的[[Get]]内部方法后的结果,参数为@@toStringTag.\n      2. 如果*tag*是一个 abrupt completion,则让*tag*成为 NormalCompletion(`\"???\"`).\n      3. 让*tag*成为*tag*.[[value]].\n      4. 如果 Type(_tag_)不是字符串,则让*tag 成为*`\"???\"`.\n      5. 如果*tag*的值为`\"Arguments\"`, `\"Array\"`, `\"Boolean\"`, `\"Date\"`, `\"Error\"`, `\"Function\"`, `\"JSON\"`, `\"Math\"`, `\"Number\"`, `\"Object\"`, `\"RegExp\"`,`或者\"String\"中的任一个,则让`*tag*成为字符串`\"~\"和`*tag*当前的值连接后的结果.\n6. 返回三个字符串\"[object \", tag, and \"]\"连接后的新字符串.\n\n### ES6 里的新类型 Map,Set\n\nES6 里的新类型 Map,Set 等,都没有在表 29 中.它们在执行 toString 方法的时候返回的是什么?\n\n```javascript\nconsole.log(Object.prototype.toString.call(Map())); //\"[object Map]\"\nconsole.log(Object.prototype.toString.call(Set())); //\"[object Set]\"\n```\n\nMap.prototype.@@toStringTag\n\n@@toStringTag 属性的初始值为字符串**\"Map\"**.\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"函数式编程","url":"/2019/10/21/函数式编程/","content":"\n# 函数式编程\n\n## 什么是函数式编程\n\n### 定义：\n\n函数式编程是一种编程范式，主要是利用函数把运算过程封装起来，通过组合各种函数来计算结果。函数式编程意味着你可以在更短的时间内编写具有更少错误的代码。\n\n举个简单的例子，假设我们要把字符串 `functional programming is great` 变成每个单词首字母大写，我们可以这样实现：\n\n```javascript\nvar string = \"functional programming is great\";\nvar result = string\n  .split(\" \")\n  .map(v => v.slice(0, 1).toUpperCase() + v.slice(1))\n  .join(\" \");\n```\n\n上面的例子先用 split 把字符串转换数组，然后再通过 map 把各元素的首字母转换成大写，最后通过 join 把数组转换成字符串。 整个过程就是 `join(map(split(str)))`,体现了函数式编程的核心思想： **通过函数对数据进行转换**。\n\n### 特点：\n\n由此我们可以得到，函数式编程有两个基本特点：\n\n- 通过函数来对数据进行转换\n- 通过串联多个函数来求结果\n\n## 对比声明式与命令式\n\n- 命令式：我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多繁杂的细节。命令式代码中频繁使用语句,来完成某个行为。比如 for、if、switch、throw 等这些语句。\n- 声明式：我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。表达式通常是某些函数调用的复合、一些值和操作符，用来计算出结果值。\n\n```javascript\n//命令式\nvar CEOs = [];\nfor (var i = 0; i < companies.length; i++) {\n  CEOs.push(companies[i].CEO);\n}\n\n//声明式\nvar CEOs = companies.map(c => c.CEO);\n```\n\n从上面的例子中，我们可以看到声明式的写法是一个表达式，无需关心如何进行计数器迭代，返回的数组如何收集，它指明的是做什么，而不是怎么做。**函数式编程的一个明显的好处就是这种声明式的代码**，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码。\n\n## 常见特性\n\n### 无副作用\n\n指调用函数时不会修改外部状态，即一个函数调用 n 次后依然返回同样的结果。\n\n```javascript\nvar a = 1;\n// 含有副作用，它修改了外部变量 a\n// 多次调用结果不一样\nfunction test1() {\n  a++;\n  return a;\n}\n\n// 无副作用，没有修改外部状态\n// 多次调用结果一样\nfunction test2(a) {\n  return a + 1;\n}\n```\n\n### 透明引用\n\n指一个函数只会用到传递给它的变量以及自己内部创建的变量，不会使用到其他变量。\n\n```javascript\nvar a = 1;\nvar b = 2;\n// 函数内部使用的变量并不属于它的作用域\nfunction test1() {\n  return a + b;\n}\n// 函数内部使用的变量是显式传递进去的\nfunction test2(a, b) {\n  return a + b;\n}\n```\n\n### 不可变变量\n\n指的是一个变量一旦创建后，就不能再进行修改，任何修改都会生成一个新的变量。使用不可变变量最大的好处是线程安全。多个线程可以同时访问同一个不可变变量，让并行变得更容易实现。 由于 JavaScript 原生不支持不可变变量，需要通过第三方库来实现。 (如 Immutable.js，Mori 等等)\n\n```javascript\nvar obj = Immutable({ a: 1 });\nvar obj2 = obj.set(\"a\", 2);\nconsole.log(obj); // Immutable({ a: 1 })\nconsole.log(obj2); // Immutable({ a: 2 })\n```\n\n### 函数是一等公民\n\n我们常说函数是 JavaScript 的\"第一等公民\"，指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。下文将要介绍的闭包、高阶函数、函数柯里化和函数组合都是围绕这一特性的应用\n\n## 常见的函数式编程模型\n\n### 1.闭包（Closure）\n\n如果一个函数引用了自由变量，那么该函数就是一个闭包。何谓自由变量？自由变量是指不属于该函数作用域的变量(所有全局变量都是自由变量，严格来说引用了全局变量的函数都是闭包，但这种闭包并没有什么用，通常情况下我们说的闭包是指函数内部的函数)。\n\n闭包的形成条件：\n\n- 存在内、外两层函数\n- 内层函数对外层函数的局部变量进行了引用\n\n闭包的用途:\n**可以定义一些作用域局限的持久化变量，这些变量可以用来做缓存或者计算的中间量等**。\n\n```javascript\n// 简单的缓存工具\n// 匿名函数创造了一个闭包\nconst cache = (function() {\n  const store = {};\n\n  return {\n    get(key) {\n      return store[key];\n    },\n    set(key, val) {\n      store[key] = val;\n    }\n  };\n})();\nconsole.log(cache); //{get: ƒ, set: ƒ}\ncache.set(\"a\", 1);\ncache.get(\"a\"); // 1\n```\n\n上面例子是一个简单的缓存工具的实现，匿名函数创造了一个闭包，使得 store 对象 ，一直可以被引用，不会被回收。\n\n闭包的弊端:**持久化变量不会被正常释放，持续占用内存空间，很容易造成内存浪费**，所以一般需要一些额外手动的清理机制。\n\n### 2.高阶函数\n\n函数式编程倾向于复用一组通用的函数功能来处理数据，它通过使用高阶函数来实现。**高阶函数指的是一个函数以函数为参数，或以函数为返回值，或者既以函数为参数又以函数为返回值**。\n\n高阶函数经常用于：\n\n- 抽象或隔离行为、作用，异步控制流程作为回调函数，promises，monads 等\n- 创建可以泛用于各种数据类型的功能\n- 部分应用于函数参数（偏函数应用）或创建一个柯里化的函数，用于复用或函数复合。\n- 接受一个函数列表并返回一些由这个列表中的函数组成的复合函数。\n\nJavaScript 语言是原生支持高阶函数的, 例如 Array.prototype.map，Array.prototype.filter 和 Array.prototype.reduce 是 JavaScript 中内置的一些高阶函数，使用高阶函数会让我们的代码更清晰简洁。\n\n#### map\n\nmap() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。map 不会改变原数组。\n\n假设我们有一个包含名称和种类属性的对象数组，我们想要这个数组中所有名称属性放在一个新数组中，如何实现呢？\n\n```javascript\n// 不使用高阶函数\nvar animals = [\n  { name: \"Fluffykins\", species: \"rabbit\" },\n  { name: \"Caro\", species: \"dog\" },\n  { name: \"Hamilton\", species: \"dog\" },\n  { name: \"Harold\", species: \"fish\" },\n  { name: \"Ursula\", species: \"cat\" },\n  { name: \"Jimmy\", species: \"fish\" }\n];\nvar names = [];\nfor (let i = 0; i < animals.length; i++) {\n  names.push(animals[i].name);\n}\nconsole.log(names); //[\"Fluffykins\", \"Caro\", \"Hamilton\", \"Harold\", \"Ursula\", \"Jimmy\"]\n// 使用高阶函数\nvar animals = [\n  { name: \"Fluffykins\", species: \"rabbit\" },\n  { name: \"Caro\", species: \"dog\" },\n  { name: \"Hamilton\", species: \"dog\" },\n  { name: \"Harold\", species: \"fish\" },\n  { name: \"Ursula\", species: \"cat\" },\n  { name: \"Jimmy\", species: \"fish\" }\n];\nvar names = animals.map(x => x.name);\nconsole.log(names); //[\"Fluffykins\", \"Caro\", \"Hamilton\", \"Harold\", \"Ursula\", \"Jimmy\"]\n```\n\n#### filter\n\nfilter() 方法会创建一个新数组，其中包含所有通过回调函数测试的元素。filter 为数组中的每个元素调用一次 callback 函数， callback 函数返回 true 表示该元素通过测试，保留该元素，false 则不保留。filter 不会改变原数组，它返回过滤后的新数组。\n\n假设我们有一个包含名称和种类属性的对象数组。 我们想要创建一个只包含狗（species: \"dog\"）的数组。如何实现呢？\n\n```javascript\n// 不使用高阶函数\nvar animals = [\n  { name: \"Fluffykins\", species: \"rabbit\" },\n  { name: \"Caro\", species: \"dog\" },\n  { name: \"Hamilton\", species: \"dog\" },\n  { name: \"Harold\", species: \"fish\" },\n  { name: \"Ursula\", species: \"cat\" },\n  { name: \"Jimmy\", species: \"fish\" }\n];\nvar dogs = [];\nfor (var i = 0; i < animals.length; i++) {\n  if (animals[i].species === \"dog\") dogs.push(animals[i]);\n}\nconsole.log(dogs);\n// 使用高阶函数\nvar animals = [\n  { name: \"Fluffykins\", species: \"rabbit\" },\n  { name: \"Caro\", species: \"dog\" },\n  { name: \"Hamilton\", species: \"dog\" },\n  { name: \"Harold\", species: \"fish\" },\n  { name: \"Ursula\", species: \"cat\" },\n  { name: \"Jimmy\", species: \"fish\" }\n];\nvar dogs = animals.filter(x => x.species === \"dog\");\nconsole.log(dogs); // {name: \"Caro\", species: \"dog\"}\n// { name: \"Hamilton\", species: \"dog\" }\n```\n\n#### reduce\n\nreduce 方法对调用数组的每个元素执行回调函数，最后生成一个单一的值并返回。 reduce 方法接受两个参数：1）reducer 函数（回调），2）一个可选的 initialValue。\n\n假设我们要对一个数组的求和：\n\n```javascript\n// 不使用高阶函数\nconst arr = [5, 7, 1, 8, 4];\nlet sum = 0;\nfor (let i = 0; i < arr.length; i++) {\n  sum = sum + arr[i];\n}\nconsole.log(sum); //25\n// 使用高阶函数\nconst arr = [5, 7, 1, 8, 4];\nconst sum = arr.reduce(\n  (accumulator, currentValue) => accumulator + currentValue,\n  0\n);\nconsole.log(sum); //25\n```\n\n我们可以通过下图，形象生动展示三者的区别：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixh3e6euj30ml0bnwf2.jpg)\n\n### 3.函数柯里化\n\n柯里化又称部分求值，柯里化函数会接收一些参数，然后不会立即求值，而是继续返回一个新函数，将传入的参数通过闭包的形式保存，等到被真正求值的时候，再一次性把所有传入的参数进行求值。\n\n```javascript\n// 普通函数\nfunction add(x, y) {\n  return x + y;\n}\nadd(1, 2); // 3\n// 函数柯里化\nvar add = function(x) {\n  return function(y) {\n    return x + y;\n  };\n};\nvar increment = add(1);\nincrement(2); // 3\n```\n\n这里我们定义了一个 add 函数，它接受一个参数并返回一个新的函数。调用 add 之后，返回的函数就通过闭包的方式记住了 add 的第一个参数。那么，我们如何来实现一个简易的柯里化函数呢？\n\n```javascript\nfunction curryIt(fn) {\n  // 参数fn函数的参数个数\n  var n = fn.length;\n  var args = [];\n  return function(arg) {\n    args.push(arg);\n    if (args.length < n) {\n      return arguments.callee; // 返回这个函数的引用\n    } else {\n      return fn.apply(this, args);\n    }\n  };\n}\nfunction add(a, b, c) {\n  return [a, b, c];\n}\nvar c = curryIt(add);\nvar c1 = c(1);\nvar c2 = c1(2);\nvar c3 = c2(3);\nconsole.log(c3); //[1, 2, 3]\n```\n\n由此我们可以看出，柯里化是一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的“缓存”，是一种非常高效的编写函数的方法！\n\n### 4.函数组合 (Composition)\n\n前面提到过，函数式编程的一个特点是通过串联函数来求值。然而，随着串联函数数量的增多，代码的可读性就会不断下降。函数组合就是用来解决这个问题的方法。\n假设有一个 compose 函数，它可以接受多个函数作为参数，然后返回一个新的函数。当我们为这个新函数传递参数时，该参数就会「流」过其中的函数，最后返回结果。\n\n```javascript\n//两个函数的组合\nvar compose = function(f, g) {\n  return function(x) {\n    return f(g(x));\n  };\n};\n\n//或者\nvar compose = (f, g) => x => f(g(x));\nvar add1 = x => x + 1;\nvar mul5 = x => x * 5;\ncompose(\n  mul5,\n  add1\n)(2); // =>15\n```\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"IP","url":"/2019/10/13/IP/","content":"\n# IP\n\nIP（IPv4、IPv6）相当于 OSI 参考模型中的第 3 层——网络层。网络层的主要作用是“**实现终端节点之间的通信**”。这种终端节点之间的通信也叫“点对点通信”。\n\n网络的下一层——数据链路层的主要作用是在互连同一种数据链路的节点之间进行包传递。而一旦跨越多种数据链路，就需要借助网络层。网络层可以跨越不同的数据链路，即使是在不同的数据链路上也能实现两端节点之间的数据包传输。\n\n**IP 大致分为三大作用模块，它们是 IP 寻址、路由（最终节点为止的转发）以及 IP 分包与组包。**\n\n## TCP/IP 基础\n\n互联网进行通信时，需要相应的网络协议，TCP/IP 原本就是为使用互联网而开发制定的协议族。因此，互联网的协议就是 TCP/IP，TCP/IP 就是互联网的协议。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6zhns2grvj30lc0eojse.jpg)\n\n每个分层中，都会对所发送的数据附加一个首部，在这个首部中包含了该层必要的信息，如发送的目标地址以及协议相关信息。通常，为协议提供的信息为包首部，所要发送的内容为数据。在下一层的角度看，从上一层收到的包全部都被认为是本层的数据。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6zhmr7ldbj30fk0dz751.jpg)\n\n网络中传输的数据包由两部分组成：一部分是协议所要用到的首部，另一部分是上一层传过来的数据。首部的结构由协议的具体规范详细定义。在数据包的首部，明确标明了协议应该如何读取数据。反过来说，看到首部，也就能够了解该协议必要的信息以及所要处理的数据。**包首部就像协议的脸。**\n\n### 数据处理流程\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6zhpvepe5j30lg0lkdis.jpg)\n\n1. 应用程序处理\n   首先应用程序会进行编码处理，这些编码相当于 OSI 的表示层功能；\n   编码转化后，邮件不一定马上被发送出去，这种何时建立通信连接何时发送数据的管理功能，相当于 OSI 的会话层功能。\n2. TCP 模块的处理\n   TCP 根据应用的指示，负责建立连接、发送数据以及断开连接。TCP 提供将应用层发来的数据顺利发送至对端的可靠传输。为了实现这一功能，需要在应用层数据的前端附加一个 TCP 首部。\n3. IP 模块的处理\n   IP 将 TCP 传过来的 TCP 首部和 TCP 数据合起来当做自己的数据，并在 TCP 首部的前端加上自己的 IP 首部。IP 包生成后，参考路由控制表决定接受此 IP 包的路由或主机。\n4. 网络接口（以太网驱动）的处理\n   从 IP 传过来的 IP 包对于以太网来说就是数据。给这些数据附加上以太网首部并进行发送处理，生成的以太网数据包将通过物理层传输给接收端。\n5. 网络接口（以太网驱动）的处理\n   主机收到以太网包后，首先从以太网包首部找到 MAC 地址判断是否为发送给自己的包，若不是则丢弃数据。\n   如果是发送给自己的包，则从以太网包首部中的类型确定数据类型，再传给相应的模块，如 IP、ARP 等。这里的例子则是 IP 。\n6. IP 模块的处理\n   IP 模块接收到 数据后也做类似的处理。从包首部中判断此 IP 地址是否与自己的 IP 地址匹配，如果匹配则根据首部的协议类型将数据发送给对应的模块，如 TCP、UDP。这里的例子则是 TCP。\n   另外吗，对于有路由器的情况，接收端地址往往不是自己的地址，此时，需要借助路由控制表，在调查应该送往的主机或路由器之后再进行转发数据。\n7. TCP 模块的处理\n   在 TCP 模块中，首先会计算一下校验和，判断数据是否被破坏。然后检查是否在按照序号接收数据。最后检查端口号，确定具体的应用程序。数据被完整地接收以后，会传给由端口号识别的应用程序。\n8. 应用程序的处理\n   接收端应用程序会直接接收发送端发送的数据。通过解析数据，展示相应的内容。\n\n## IP 服务的主要特点\n\nIP 协议为上层协议提供无状态、无连接、不可靠的服务。\n\n- ###### 无状态\n\n无状态是指 IP 通信双方不同步传输数据的状态信息，所有 IP 数据报的发送、传输、接受都是相互独立、没有上下文关系的。这种服务优点在于简单、高效。最大的缺点是无法处理乱序和重复的 IP 数据报，确保 IP 数据报完整的工作只能交给上层协议来完成。\n\n- ###### 无连接\n\n无连接是指 IP 通信双方都不长久地维持对方的任何信息。上层协议每次发送数据的时候，都需要明确指出对方的 IP 地址。\n\n- ###### 不可靠\n\n不可靠是指 IP 协议不能保证 IP 数据报准确到达接收端，它指承诺尽最大努力交付。IP 模块一旦检测到数据报发送失败，就通知上层协议，而不会试图重传。\n\n## IP 地址\n\n### IP 地址概述\n\n- 在计算机通信中，为了识别通信对端，必须要有一个类似于地址的识别码进行标识。在数据链路中的 MAC 地址正是用来标识同一个链路中不同计算机的一种识别码。\n- 作为网络层的 IP ,也有这种地址信息，一般叫做 IP 地址。IP 地址用于在“**连接到网络中的所有主机中识别出进行通信的目标地址**”。因此，在 TCP/IP 通信中所有主机或路由器必须设定自己的 IP 地址。\n- 不论一台主机与哪种数据链路连接，其 IP 地址的形式都保持不变。\n- IP 地址（IPv4 地址）由 32 位正整数来表示。IP 地址在计算机内部以二进制方式被处理。然而，由于我们并不习惯于采用二进制方式，我们将 32 位的 IP 地址以每 8 位为一组，分成 4 组，每组以 “.” 隔开，再将每组数转换成十进制数。如下：\n\n| 2^8      | 2^8      | 2^8      | 2^8      |             |\n| -------- | -------- | -------- | -------- | ----------- |\n| 10101100 | 00010100 | 00000001 | 00000001 | （2 进制）  |\n| 172.     | 20.      | 1.       | 1        | （10 进制） |\n\n### IP 地址由网络和主机两部分标识组成\n\n- 如下图，网络标识在数据链路的每个段配置不同的值。网络标识必须保证相互连接的每个段的地址不相重复。而相同段内相连的主机必须有相同的网络地址。IP 地址的“主机标识”则不允许在同一个网段内重复出现。由此，可以通过设置网络地址和主机地址，在相互连接的整个网络中保证每台主机的 IP 地址都不会相互重叠。即 **IP 地址具有了唯一性**。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70l2qlpa6j30k80hiwhe.jpg)\n\n- 如下图，IP 包被转发到途中某个路由器时，正是**利用目标 IP 地址的网络标识进行路由**。因为即使不看主机标识，只要一见到网络标识就能判断出是否为该网段内的主机。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70l4my99cj30k40auabx.jpg)\n\n### IP 地址的分类\n\n**IP 地址分为四个级别，分别为 A 类、B 类、C 类、D 类。它根据 IP 地址中从第 1 位到第 4 位的比特列对其网络标识和主机标识进行区分。**\n\n- **A 类 IP 地址是首位以 “0” 开头的地址。**从第 1 位到第 8 位是它的网络标识。用十进制表示的话，0.0.0.0~127.0.0.0 是 A 类的网络地址。A 类地址的后 24 位相当于主机标识。因此，一个网段内可容纳的主机地址上限为 16,777,214 个。\n- **B 类 IP 地址是前两位 “10” 的地址。**从第 1 位到第 16 位是它的网络标识。用十进制表示的话，128.0.0.0~191.255.0.0 是 B 类的网络地址。B 类地址的后 16 位相当于主机标识。因此，一个网段内可容纳的主机地址上限为 65,534 个。\n- **C 类 IP 地址是前三位为 “110” 的地址。**从第 1 位到第 24 位是它的网络标识。用十进制表示的话，192.0.0.0~223.255.255.0 是 C 类的网络地址。C 类地址的后 8 位相当于主机标识。因此，一个网段内可容纳的主机地址上限为 254 个。\n- **D 类 IP 地址是前四位为 “1110” 的地址。**从第 1 位到第 32 位是它的网络标识。用十进制表示的话，224.0.0.0~239.255.255.255 是 D 类的网络地址。D 类地址没有主机标识，常用于多播。\n- 在分配 IP 地址时关于主机标识有一点需要注意。即要用比特位表示主机地址时，不可以全部为 0 或全部为 1。因为全部为 0 只有在表示对应的网络地址或 IP 地址不可以获知的情况下才使用。而全部为 1 的主机通常作为广播地址。因此，在分配过程中，应该去掉这两种情况。这也是为什么 C 类地址每个网段最多只能有 254（ 28 - 2 = 254）个主机地址的原因。\n\n### 广播地址\n\n- 广播地址用于在同一个链路中相互连接的主机之间发送数据包。将 IP 地址中的主机地址部分全部设置为 1，就成了广播地址。\n- 广播分为本地广播和直接广播两种。在本网络内的广播叫做本地广播；在不同网络之间的广播叫做直接广播。\n\n### IP 多播\n\n- 多播用于将包发送给特定组内的所有主机。由于其直接使用 IP 地址，因此也不存在可靠传输。\n\n- 相比于广播，多播既可以穿透路由器，又可以实现只给那些必要的组发送数据包。请看下图：\n\n  ![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70l8g7veoj30f70jjn02.jpg)\n\n- 多播使用 D 类地址。因此，如果从首位开始到第 4 位是 “1110”，就可以认为是多播地址。而剩下的 28 位可以成为多播的组编号。\n\n- 此外， 对于多播，所有的主机（路由器以外的主机和终端主机）必须属于 224.0.0.1 的组，所有的路由器必须属于 224.0.0.2 的组。\n\n### 子网掩码\n\n- 现在一个 IP 地址的网络标识和主机标识已不再受限于该地址的类别，而是由一个叫做“子网掩码”的识别码通过子网网络地址细分出比 A 类、B 类、C 类更小粒度的网络。这种方式实际上就是将原来 A 类、B 类、C 类等分类中的主机地址部分用作子网地址，可以将原网络分为多个物理网络的一种机制。\n- 子网掩码用二进制方式表示的话，也是一个 32 位的数字。它对应 IP 地址网络标识部分的位全部为 “1”，对应 IP 地址主机标识的部分则全部为 “0”。由此，一个 IP 地址可以不再受限于自己的类别，而是可以用这样的子网掩码自由地定位自己的网络标识长度。当然，子网掩码必须是 IP 地址的首位开始连续的 “1”。\n- 对于子网掩码，目前有两种表示方式。第一种是，将 IP 地址与子网掩码的地址分别用两行来表示。以 172.20.100.52 的前 26 位是网络地址的情况为例，如下：\n\n| IP 地址  | 172. | 20.  | 100. | 52  |\n| -------- | ---- | ---- | ---- | --- |\n| 子网掩码 | 255. | 255. | 255. | 192 |\n|          |      |      |      |     |\n| 网络地址 | 172. | 20.  | 100. | 0   |\n| 子网掩码 | 255. | 255. | 255. | 192 |\n|          |      |      |      |     |\n| 广播地址 | 172. | 20.  | 100. | 63  |\n| 子网掩码 | 255. | 255. | 255. | 192 |\n\n- 第二种表示方式是，在每个 IP 地址后面追加网络地址的位数用 “/ ” 隔开，如下：\n\n| IP 地址  | 172. | 20. | 100. | 52  | / 26 |\n| -------- | ---- | --- | ---- | --- | ---- |\n| 网络地址 | 172. | 20. | 100. | 0   | / 26 |\n| 广播地址 | 172. | 20. | 100. | 63  | / 26 |\n\n- 另外，在第二种方式下记述网络地址时可以省略后面的 “0” 。例如：172.20.0.0/26 跟 172.20/26 其实是一个意思。\n\n## 路由\n\n- 发送数据包时所使用的地址是网络层的地址，即 IP 地址。然而仅仅有 IP 地址还不足以实现将数据包发送到对端目标地址，在数据发送过程中还需要类似于“指明路由器或主机”的信息，以便真正发往目标地址。保存这种信息的就是路由控制表。\n- 该路由控制表的形成方式有两种：一种是管理员手动设置，另一种是路由器与其他路由器相互交换信息时自动刷新。前者也叫做静态路由控制，而后者叫做动态路由控制。\n- IP 协议始终认为路由表是正确的。然后，IP 本身并没有定义制作路由控制表的协议。即 IP 没有制作路由控制表的机制。该表示由一个叫做“路由协议”的协议制作而成。\n\n### IP 地址与路由控制\n\n- IP 地址的网络地址部分用于进行路由控制。\n- 路由控制表中记录着网络地址与下一步应该发送至路由器的地址。\n- 在发送 IP 包时，首先要确定 IP 包首部中的目标地址，再从路由控制表中找到与该地址具有相同网络地址的记录，根据该记录将 IP 包转发给相应的下一个路由器。如果路由控制表中存在多条相同网络地址的记录，就选择一个最为吻合的网络地址。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70ldgjh6gj30ka0gen0n.jpg)\n\n### 路由匹配\n\n路由匹配顺序：\n1） 直接匹配，查找路由表中是否由与目标 IP 地址完全匹配的主机 IP 地址，找到则匹配成功，没有的话转 2；\n2）查找是否有与目标 IP 地址具有相同网络 ID 的 IP 地址，找到则匹配成功，没有的话转 3；\n3）查看是否有默认网关，有则转发给它，没有的话，路由查找失败，由 ICMP 返回错误信息。\n\n### 路由更新\n\n通过 route 命令或其他工具可以手工修改路由表，是静态路由更新方式。对于大型路由器，它们通常通过 BGP、RIP、OSPF 等协议进行动态路由更新。\n\n## IP 分包与组包\n\n- 每种数据链路的最大传输单元（MTU）都不尽相同，因为每个不同类型的数据链路的使用目的不同。使用目的不同，可承载的 MTU 也就不同。\n- 任何一台主机都有必要对 IP 分片进行相应的处理。分片往往在网络上遇到比较大的报文无法一下子发送出去时才会进行处理。\n- 经过分片之后的 IP 数据报在被重组的时候，只能由目标主机进行。路由器虽然做分片但不会进行重组。\n\n### 路径 MTU 发现\n\n- 分片机制也有它的不足。如路由器的处理负荷加重之类。因此，只要允许，是不希望由路由器进行 IP 数据包的分片处理的。\n- 为了应对分片机制的不足，“路径 MTU 发现” 技术应运而生。路径 MTU 指的是，从发送端主机到接收端主机之间不需要分片是最大 MTU 的大小。即路径中存在的所有数据链路中最小的 MTU 。\n- 进行路径 MTU 发现，就可以避免在中途的路由器上进行分片处理，也可以在 TCP 中发送更大的包。\n\n## IPv4\n\n### IPv4 头部\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70lsqccjaj30eh064dge.jpg)\n\n- ###### 头部长度\n\n标识该 IP 头部有多少个 32 位 bit 字（4 字节），由于 4 位最大描述 15，所以 IP 头部最大长度为 60 字节。\n\n- ###### 8 为服务位\n\n包括 3 位优先权位，4 为 TOS 字段和 1 位保留字段。\n4 为 TOS 字段分别表示：最小延时，最大吞吐量、最高可靠性和最小费用。其中最多能选择一位置 1，应用程序根据实际需要来设置服务类型。\n\n- ###### 16 位标识\n\n唯一标识主机发送的每一个数据报。其初始值由系统随机生成；每发一个数据报就加 1。每个分片中具有相同的标识值。\n\n- ###### 分片偏移\n\n有 3 位用于标识偏移，第一位保留，第二位 DF 字段（禁止分片标识），第三位 MF 字段（更多分片标识，最后一个分片为 0，其他分片置 1）。13 位偏移是勇敢将实际值左移三位得到的，因此要求数据部分的长度是 8 的倍数。\n\n- ###### 8 位协议\n\n标识上层协议，1 是 ICMP，6 是 TCP，17 是 UDP。\n\n- ###### 16 位头部校验和\n\nIP 模块接受数据后，首先对数据报头部做 CRC 校验，确保 IP 头部在传输过程中无损坏后，再分析其头部具体信息。\n\n## IPv6\n\nIPv6（IP version 6）是为了根本解决 IPv4 地址耗尽的问题而被标准化的网际协议。IPv4 的地址长度为 4 个 8 位字节，即 32 比特。而 IPv6 的地址长度则是原来的 4 倍，即 128 比特，一般写成 8 个 16 位字节。\n\nIPv6 协议并不是 IPv4 的简单扩展，而是完全独立的协议。从以太网帧封装的数据类型来看，前者类型是 0X86dd，后者是 0x8600，是完全不同的类型。\n\nIPv6 解决了网络地址不足的问题，其头部增加了多播和流的功能，引入了自动配置功能，还增加了网络安全的功能。\n\n### IPv6 头部固定部分\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70lv0wgqij30em05ydg6.jpg)\n\n- ###### 流标签\n\n是 IPv6 新增加的字段，用于对某些连接的服务质量有特殊要求的通信，比如音频或者视频等实时数据传递。\n\n- ###### 下一个包头\n\n指出紧跟 IPv6 固定头部后的包头类型，如拓展头，或者某个上层协议头（ICMP，TCP，UDP），它类似 IPv4 中的协议字段，且相同的取值具有相同的含义。\n\n### IPv6 的特点\n\n- IP 得知的扩大与路由控制表的聚合。\n- 性能提升。包首部长度采用固定的值（40 字节），不再采用首部检验码。简化首部结构，减轻路由器负担。路由器不再做分片处理。\n- 支持即插即用功能。即使没有 DHCP 服务器也可以实现自动分配 IP 地址。\n- 采用认证与加密功能。应对伪造 IP 地址的网络安全功能以及防止线路窃听的功能。\n- 多播、Mobile IP 成为扩展功能。\n\n### IPv6 中 IP 地址的标记方法\n\n- 一般人们将 128 比特 IP 地址以每 16 比特为一组，每组用冒号（“：”）隔开进行标记。\n- 而且如果出现连续的 0 时还可以将这些 0 省略，并用两个冒号（“：：”）隔开。但是，一个 IP 地址中只允许出现一次两个连续的冒号。\n\n### IPv6 地址的结构\n\n- IPv6 类似 IPv4，也是通过 IP 地址的前几位标识 IP 地址的种类。\n- 在互联网通信中，使用一种全局的单播地址。它是互联网中唯一的一个地址，不需要正式分配 IP 地址。\n\n| 未定义           | 0000 ... 0000（128 比特） | ：：/ 128    |\n| ---------------- | ------------------------- | ------------ |\n| 环回地址         | 0000 ... 0001（128 比特） | ：：1 / 128  |\n| 唯一本地地址     | 1111 110                  | FC00：/ 7    |\n| 链路本地单播地址 | 1111 1110 10              | FE80：：/ 10 |\n| 多播地址         | 1111 1111                 | FF00：：/ 8  |\n| 全局单播地址     | （其他）                  |              |\n\n### 全局单播地址\n\n- 全局单播地址是指世界上唯一的一个地址。它是互联网通信以及各个域内部通信中最为常用的一个 IPv6 地址。\n- 格式如下图所示，现在 IPv6 的网络中所使用的格式为，n = 48，m = 16 以及 128 - n - m = 64。即前 64 比特为网络标识，后 64 比特为主机标识。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70lktamkvj30lt08qmxq.jpg)\n\n### 链路本地单播地址\n\n链路本地单播地址是指在同一个数据链路内唯一的地址。它用于不经过路由器，在同一个链路中的通信。通常接口 ID 保存 64 比特版的 MAC 地址。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70llnrbecj30lg052weo.jpg)\n\n### 唯一本地地址\n\n- 唯一本地地址是不进行互联网通信时所用的地址。\n- 唯一本地地址虽然不会与互联网连接，但是也会尽可能地随机生成一个唯一的全局 ID。\n- L 通常被置为 1\n- 全局 ID 的值随机决定\n- 子网 ID 是指该域子网地址\n- 接口 ID 即为接口的 ID\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70lmkuopyj30ms053mxf.jpg)\n\n### IPv6 分段处理\n\n- IPv6 的分片处理只在作为起点的发送端主机上进行，路由器不参与分片。\n- IPv6 中最小 MTU 为 1280 字节，因此，在嵌入式系统中对于那些有一定系统资源限制的设备来说，不需要进行“路径 MTU 发现”，而是在发送 IP 包时直接以 1280 字节为单位分片送出。\n\n### IP 首部（暂略）\n\n## IP 协议相关技术\n\nIP 旨在让最终目标主机收到数据包，但是在这一过程中仅仅有 IP 是无法实现通信的。必须还有能够解析主机名称和 MAC 地址的功能，以及数据包在发送过程中异常情况处理的功能。\n\n### DNS\n\n- 我们平常在访问某个网站时不适用 IP 地址，而是用一串由罗马字和点号组成的字符串。而一般用户在使用 TCP/IP 进行通信时也不使用 IP 地址。能够这样做是因为有了 DNS （Domain Name System）功能的支持。DNS 可以将那串字符串自动转换为具体的 IP 地址。\n- 这种 DNS 不仅适用于 IPv4，还适用于 IPv6。\n\n### ARP\n\n- 只要确定了 IP 地址，就可以向这个目标地址发送 IP 数据报。然而，在底层数据链路层，进行实际通信时却有必要了解每个 IP 地址所对应的 MAC 地址。\n- ARP 是一种解决地址问题的协议。以目标 IP 地址为线索，用来定位下一个应该接收数据分包的网络设备对应的 MAC 地址。不过 ARP 只适用于 IPv4，不能用于 IPv6。IPv6 中可以用 ICMPv6 替代 ARP 发送邻居探索消息。\n- RARP 是将 ARP 反过来，从 MAC 地址定位 IP 地址的一种协议。\n\n### ICMP\n\n- ICMP 的主要功能包括，确认 IP 包是否成功送达目标地址，通知在发送过程当中 IP 包被废弃的具体原因，改善网络设置等。\n- IPv4 中 ICMP 仅作为一个辅助作用支持 IPv4。也就是说，在 IPv4 时期，即使没有 ICMP，仍然可以实现 IP 通信。然而，在 IPv6 中，ICMP 的作用被扩大，如果没有 ICMPv6，IPv6 就无法进行正常通信。\n\n### DHCP\n\n- 如果逐一为每一台主机设置 IP 地址会是非常繁琐的事情。特别是在移动使用笔记本电脑、只能终端以及平板电脑等设备时，每移动到一个新的地方，都要重新设置 IP 地址。\n- 于是，为了实现自动设置 IP 地址、统一管理 IP 地址分配，就产生了 DHCP（Dynamic Host Configuration Protocol）协议。有了 DHCP，计算机只要连接到网络，就可以进行 TCP/IP 通信。也就是说，DHCP 让即插即用变得可能。\n- DHCP 不仅在 IPv4 中，在 IPv6 中也可以使用。\n\n### NAT\n\n- NAT（Network Address Translator）是用于在本地网络中使用私有地址，在连接互联网时转而使用全局 IP 地址的技术。\n- 除转换 IP 地址外，还出现了可以转换 TCP、UDP 端口号的 NAPT（Network Address Ports Translator）技术，由此可以实现用一个全局 IP 地址与多个主机的通信。\n- NAT（NAPT）实际上是为正在面临地址枯竭的 IPv4 而开发的技术。不过，在 IPv6 中为了提高网络安全也在使用 NAT，在 IPv4 和 IPv6 之间的相互通信当中常常使用 NAT-PT。\n\n### IP 隧道\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g70lqkzre9j30ht04caaa.jpg)\n\n- 如上图的网络环境中，网络 A 与网络 B 之间无法直接进行通信，为了让它们之间正常通信，这时必须得采用 IP 隧道的功能。\n- IP 隧道可以将那些从网络 A 发过来的 IPv6 的包统合为一个数据，再为之追加一个 IPv4 的首部以后转发给网络 C。\n- 一般情况下，紧接着 IP 首部的是 TCP 或 UDP 的首部。然而，现在的应用当中“ IP 首部的后面还是 IP 首部”或者“ IP 首部的后面是 IPv6 的首部”等情况与日俱增。这种在网络层的首部后面追加网络层首部的通信方法就叫做“ IP 隧道”。\n","tags":["浏览器","TCP/IP"],"categories":["浏览器"]},{"title":"Http/1.0的Keep-Alive和Http/2.0的多路复用对比","url":"/2019/10/04/Http1.0的Keep-Alive和Http2.0的多路复用对比 copy/","content":"\n# Http/1.0 的 Keep-Alive 和 Http/2.0 的多路复用对比\n\n## Http/1.0 的 Keep-Alive\n\n在没有`Keep-Alive`前，我们与服务器请求数据的流程是这样：\n\n![clipboard.png](https://tva1.sinaimg.cn/large/006y8mN6ly1g6nsz9l0hxj30ac0caq3x.jpg)\n\n- 浏览器请求`//static.mtime.cn/a.js`-->解析域名-->HTTP 连接-->服务器处理文件-->返回数据-->浏览器解析、渲染文件\n- 浏览器请求`//static.mtime.cn/b.js`-->解析域名-->HTTP 连接-->服务器处理文件-->返回数据-->浏览器解析、渲染文件\n- ...\n- 这样循环下去，直至全部文件下载完成。\n\n这个流程最大的问题就是：**每次请求都会建立一次 HTTP 连接**，也就是我们常说的 3 次握手 4 次挥手，这个过程在一次请求过程中占用了相当长的时间，而且逻辑上是非必需的，因为不间断的请求数据，第一次建立连接是正常的，以后就占用这个通道，下载其他文件，这样效率多高啊！你猜对了，这就是`Keep-Alive`。\n\n### `Keep-Alive`解决的问题\n\n`Keep-Alive`解决的核心问题：一定时间内，同一域名多次请求数据，只建立一次 HTTP 请求，其他请求可复用每一次建立的连接通道，以达到提高请求效率的问题。这里面所说的**一定时间**是可以配置的，不管你用的是`Apache`还是`nginx`。\n\n### `HTTP1.1`还是存在效率问题\n\n如上面所说，在`HTTP1.1`中是默认开启了`Keep-Alive`，他解决了多次连接的问题，但是依然有两个效率上的问题：\n\n- 第一个：**串行的文件传输**。当请求 a 文件时，b 文件只能等待，等待 a 连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是 1 秒，那么 a 文件用时为 3 秒，b 文件传输完成用时为 6 秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）\n- 第二个：**连接数过多**。我们假设`Apache`设置了最大并发数为 300，因为浏览器限制，浏览器发起的最大请求数为 6，也就是服务器能承载的最高并发为 50，当第 51 个人访问时，就需要等待前面某个请求处理完成。\n\n## HTTP/2 的多路复用\n\nHTTP/2 的多路复用就是为了解决上述的两个性能问题，我们来看一下，他是如何解决的。\n\n- 解决第一个：在`HTTP1.1`的协议中，我们传输的`request`和`response`都是基本于文本的，这样就会引发一个问题：所有的数据必须按顺序传输，比如需要传输：`hello world`，只能从`h`到`d`一个一个的传输，不能并行传输，因为接收端并不知道这些字符的顺序，所以并行传输在`HTTP1.1`是不能实现的。\n\n![clipboard.png](https://tva1.sinaimg.cn/large/006y8mN6ly1g6nszfhktpj30kp05lmxt.jpg)\n\n`HTTP/2`引入`二进制数据帧`和`流`的概念，其中帧对数据进行顺序标识，如下图所示，这样浏览器收到数据之后，就可以按照序列对数据进行合并，而不会出现合并后数据错乱的情况。同样是因为有了序列，服务器就可以并行的传输数据，这就是`流`所做的事情。\n\n![clipboard.png](https://tva1.sinaimg.cn/large/006y8mN6ly1g6nszichcoj30fm0aft9y.jpg)\n\n- 解决第二个问题：`HTTP/2`对同一域名下所有请求都是基于`流`，也就是说同一域名不管访问多少文件，也只**建立一路连接**。同样`Apache`的最大连接数为 300，因为有了这个新特性，最大的并发就可以提升到 300，比原来提升了 6 倍！\n\n## **多路复用和 keep alive 区别？**\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6nt1pb7xkj30ln0l940f.jpg)\n\n1）线头阻塞（Head-of-Line Blocking），HTTP1.X 虽然可以采用 keep alive 来解决复用 TCP 的问题，但是还是无法解决请求阻塞问题。\n\n2）所谓请求阻塞意思就是一条 TCP 的 connection 在同一时间只能允许一个请求经过，这样假如后续请求想要复用这个链接就必须等到前一个完成才行，正如上图左边表示的。\n\n3）之所以有这个问题就是因为 HTTP1.x 需要每条请求都是可是识别，按顺序发送，否则 server 就无法判断该相应哪个具体的请求。\n\n4）HTTP2 采用多路复用是指，在同一个域名下，开启一个 TCP 的 connection，每个请求以 stream 的方式传输，每个 stream 有唯一标识，connection 一旦建立，后续的请求都可以复用这个 connection 并且可以同时发送，server 端可以根据 stream 的唯一标识来相应对应的请求。\n","tags":["HTTP","浏览器"],"categories":["浏览器"]},{"title":"CSS 清除浮动","url":"/2019/09/29/CSS 清除浮动/","content":"\n# CSS 清除浮动\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tbm9sca0j30op0fh0tp.jpg)\n\n## 浮动是什么？\n\nW3school 中给出的浮动定义为**浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。**由于浮动框脱离文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。\n\n## 浮动的特点\n\n浮动的特点，可以用八个字总结：**脱标、贴边、字围和收缩。**\n\n为了更好说明，请看下图：\n当框 1 向左浮动时，它脱离文档流（**脱标**）并且向左移动（**贴边**），直到它的左边缘碰到包含框的左边缘。因为它不再处于文档流中，所以它不占据空间，实际上覆盖住了框 2，使框 2 从视图中消失。如果框 2 中有文字，就会围着框 1 排开（**字围**）。\n\n如果把所有三个框都向左浮动，那么框 1 向左浮动直到碰到包含框，另外两个框向左浮动直到碰到前一个浮动框。\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tc3n56n2j30em06haa4.jpg)\n下面着重讲解下第四个特点--**收缩**\n\n一个浮动的内联元素（比如 span img 标签）不需要设置 display：block 就可以设置宽度。\n\n```html\n<head>\n  <style>\n    div {\n      float: left;\n      background-color: greenyellow;\n    }\n  </style>\n</head>\n<body>\n  <div>\n    这是一段文字\n  </div>\n</body>\n```\n\n得到以下的效果：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tc6sc8yzj30qo01ft8h.jpg)\n我们都知道 div 标签是块级元素，会独占一行，然而上面的例子中将 div 设置为左浮后，其宽度不再是占满一行，而是收紧为内部元素的宽度，这就是浮动第四个特征的含义。\n\n## 浮动的缺点\n\n先看下面这段代码：\n\n```html\n<head>\n  <style>\n    .parent {\n      border: solid 5px;\n      width: 300px;\n    }\n    .child:nth-child(1) {\n      height: 100px;\n      width: 100px;\n      background-color: yellow;\n      float: left;\n    }\n    .child:nth-child(2) {\n      height: 100px;\n      width: 100px;\n      background-color: red;\n      float: left;\n    }\n    .child:nth-child(3) {\n      height: 100px;\n      width: 100px;\n      background-color: greenyellow;\n      float: left;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"parent\">\n    <div class=\"child\"></div>\n    <div class=\"child\"></div>\n    <div class=\"child\"></div>\n  </div>\n</body>\n```\n\n我们想让父容器包裹着三个浮动元素，然而事与愿违，得到却是这样的结果：\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6tcc3apdwj30920393yb.jpg)\n**这就是浮动带来副作用----父容器高度塌陷，于是清理浮动就显着至关重要。**\n\n## 清理浮动\n\n**清除浮动不是不用浮动，是清除浮动产生的父容器高度塌陷**。\n\n### 套路 1：给浮动元素的父元素添加高度（扩展性不好）\n\n如果一个元素要浮动，那么它的父元素一定要有高度。高度的盒子，才能关住浮动。可以通过直接给父元素设置 height，实际应用中我们不大可能给所有的盒子加高度，不仅麻烦，并且不能适应页面的快速变化；另外一种，父容器的高度可以通过内容撑开（比如 img 图片），实际当中此方法用的比较多。\n\n### 套路 2：clear:both;\n\n在最后一个子元素后新添加一个冗余元素，然后将其设置 clear:both,这样就可以清除浮动。这里强调一点，即**在父级元素末尾添加的元素必须是一个块级元素，否则无法撑起父级元素高度**。\n\n```html\n<div id=\"wrap\">\n  <div id=\"inner\"></div>\n  <div style=\"clear: both;\"></div>\n</div>\n```\n\n```css\n#wrap {\n  border: 1px solid;\n}\n#inner {\n  float: left;\n  width: 200px;\n  height: 200px;\n  background: pink;\n}\n```\n\n### 套路 3：伪元素清除浮动\n\n上面那种办法固然可以清除浮动，但是我们不想在页面中添加这些没有意义的冗余元素，此时如何清除浮动吗？\n**结合 :after 伪元素和 IEhack ，可以完美兼容当前主流的各大浏览器，这里的 IEhack 指的是触发 hasLayout**。\n\n```html\n<div id=\"wrap\" class=\"clearfix\">\n  <div id=\"inner\"></div>\n</div>\n```\n\n```css\n#wrap {\n  border: 1px solid;\n}\n#inner {\n  float: left;\n  width: 200px;\n  height: 200px;\n  background: pink;\n}\n/*开启haslayout*/\n.clearfix {\n  *zoom: 1;\n}\n/*ie6 7不支持伪元素*/\n.clearfix:after {\n  content: \"\";\n  display: block;\n  clear: both;\n  height: 0;\n  line-height: 0;\n  visibility: hidden; //允许浏览器渲染它，但是不显示出来\n}\n```\n\n给浮动元素的父容器添加一个 clearfix 的 class，然后给这个 class 添加一个:after 伪元素，实现元素末尾添加一个看不见的块元素来清理浮动。这是通用的清理浮动方案，推荐使用\n\n### 套路 4：给父元素使用 overflow:hidden;\n\n这种方案让父容器形成了 BFC（块级格式上下文），而 BFC 可以包含浮动，通常用来解决浮动父元素高度坍塌的问题。\n\n**BFC 的触发方式**\n\n我们可以给父元素添加以下属性来触发 BFC：\n\n- float 为 left | right\n- overflow 为 hidden | auto | scorll\n- display 为 table-cell | table-caption | inline-block\n- position 为 absolute | fixed\n\n这里可以给父元素设置 overflow:auto，但是为了兼容 IE 最好使用 overflow:hidden。\n\n**但这种办法有个缺陷：如果有内容出了盒子，用这种方法就会把多的部分裁切掉，所以这时候不能使用。**\n\n**BFC 的主要特征:**\n\n- BFC 容器是一个隔离的容器，和其他元素互不干扰；所以我们可以用触发两个元素的 BFC 来解决垂直边距折叠问题。\n- BFC 不会重叠浮动元素\n- BFC 可以包含浮动,这可以清除浮动。\n\n### 套路 5：br 标签清浮动\n\n**br 标签存在一个属性：clear。这个属性就是能够清除浮动的利器，在 br 标签中设置属性 clear，并赋值 all。即能清除掉浮动**。\n\n```html\n<div id=\"wrap\">\n  <div id=\"inner\"></div>\n  <br clear=\"all\" />\n</div>\n```\n\n```css\n#wrap {\n  border: 1px solid;\n}\n#inner {\n  float: left;\n  width: 200px;\n  height: 200px;\n  background: pink;\n}\n```\n","tags":["CSS","清除浮动"],"categories":["CSS"]},{"title":"git merge和git rebase的区别","url":"/2019/09/21/git merge和git rebase的区别/","content":"\n# git merge和git rebase的区别\n\ngit rebase 和 git merge 一样都是用于从一个分支获取并且合并到当前分支，但是他们采取不同的工作方式。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6wkw4uh2dj30xc0qtjsl.jpg)\n\n为了将master 上新的提交合并到你的feature分支上，你有两种选择：`merging` or `rebase`\n\n## merge\n\n执行以下命令：\n\n```shell\ngit checkout feature\ngit merge master\n```\n\n或\n\n```shell\ngit merge master feature\n```\n\n那么此时在feature上git 自动会产生一个新的commit(merge commit)\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6wky69tunj30w90850te.jpg)\n\n### `git merge` 有如下特点：\n\n- 只处理一次冲突，如果合并的时候遇到冲突，仅需要修改后重新commit\n- 引入了一次合并的历史记录，合并后的所有 `commit` 会按照提交时间从旧到新排列\n- 所有的过程信息更多，可能会提高之后查找问题的难度\n\n### 优点：\n\n记录了真实的commit情况，包括每个分支的详情\n\n### 缺点：\n\n因为每次merge会自动产生一个merge commit，所以在使用一些git 的GUI tools，特别是commit比较频繁时，看到分支很杂乱。\n\n## rebase\n\n与 `git merge` 一致，`git rebase` 的目的也是将一个分支的更改并入到另外一个分支中去。\n\n```shell\ngit checkout feature\ngit rebase master\n```\n\n本质是**变基 变基 变基**\n\n变基是什么? `找公共祖先`\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6wl0azimrj30wx0823zd.jpg)\n\n### rebase 特点：\n\n- 改变当前分支从 `master`上拉出分支的位置\n- 没有多余的合并历史的记录，会合并之前的commit历史，且合并后的 `commit`顺序不一定按照 `commit`的提交时间排列\n- 可能会多次解决同一个地方的冲突（有 `squash`来解决）\n- 更清爽一些，`master`分支上每个 `commit`点都是相对独立完整的功能单元\n\n### 优点：\n\n得到更简洁的项目历史，去掉了merge commit\n\n### 缺点：\n\n如果合并出现代码问题不容易定位，因为rewrite了history\n\n### 合并时遇到冲突：\n\n合并时如果出现冲突需要按照如下步骤解决\n\n- 修改冲突部分\n- git add\n- `git rebase --continue`\n- （如果第三步无效可以执行 `git rebase --skip`）\n\n不要在git add 之后习惯性的执行 git commit命令\n\n### git rebase 的交互模式\n\n打开变基的交互模式只需要传入一个参数 `-i` 即可，同时还需要指定对哪些提交进行处理\n\n```shell\ngit rebase -i HEAD~4\n```\n\n上述命令指定了对当前分支的最近四次提交进行操作。下面我们使用上面这行命令将 `feature` 分支的提交合并。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6wl7ji36xj30wi0gpq67.jpg)\n\n中间红框内有一些命令，可以用来处理某次提交的\n\n## 总结\n\n- 如果你想要一个干净的，没有merge commit的线性历史树，或者当发现自己修改某个功能时，频繁进行了`git commit`提交时，发现其实过多的提交信息没有必要时，那么你应该选择git rebase\n- 当需要保留详细的合并信息的时候建议使用`git merge`，特别是需要将分支合并进入`master`分支时，并且想要避免重写commit history的风险，你应该选择使用git merge","tags":["git"],"categories":["git"]},{"title":"浏览器同域名请求的最大并发数限制","url":"/2019/09/14/浏览器同域名请求的最大并发数限制/","content":"\n# 浏览器同域名请求的最大并发数限制\n\n当我们在浏览网页的时候，对浏览速度有一个重要的影响因素，就是浏览器的并发数量。并发数量简单通俗的讲就是，当浏览器网页的时候同时工作的进行数量。\n\n如果同时只有 2 个并发连接数数量，那网页打开的时候只能依赖于这 2 条线程，前面如果有打开慢的内容，就会直接影响到后面的内容打开。但是如果同时有更多的并发连接数，这样就会大大的提高网页加载速度。但是浏览器的并发连接数也并非越大越好。\n\nHTTP 客户端一般对同一个服务器的并发连接个数都是有限制的。实际上，浏览器确实使用并行连接，但它们将并行连接的总数限制为少量（**通常为四个**）。服务器可以自由地关闭来自特定客户端的过多连接。\n\n## 主流浏览器最大并发连接数\n\n一些主流浏览器对 HTTP 1.1 和 HTTP 1.0 的最大并发连接数目，可以参考如下表格：\n\n| 浏览器               | HTTP / 1.1 | HTTP / 1.0 |\n| -------------------- | ---------- | ---------- |\n| IE 11                | 6          | 6          |\n| IE 10                | 6          | 6          |\n| IE 9                 | 10         | 10         |\n| IE 8                 | 6          | 6          |\n| IE 6,7               | 2          | 4          |\n| 火狐                 | 6          | 6          |\n| Safari 3,4           | 4          | 4          |\n| Chrome 4+            | 6          | 6          |\n| 歌剧 9.63,10.00alpha | 4          | 4          |\n| Opera 10.51+         | 8          | ？         |\n| iPhone 2             | 4          | ？         |\n| iPhone 3             | 6          | ？         |\n| iPhone 4             | 4          | ？         |\n| iphone 5             | 6          | ？         |\n| Android2-4           | 4          | ？         |\n\n### Firefox 浏览器的最大并发连接数\n\n在 Firefox 中的地址栏输入“about：config 中”，然后搜索并修改如下两个配置项目即可：\n\n- `network.http.max-persistent-connections-per-server:6`连接同一个服务器允许的最大持久连接数，默认为 6，可以不用更改。\n- `network.http.max-persistent-connections-per-proxy:8`每个代理服务器允许的最大持久连接数,公司用户使用代理服务器，但是外面的客户一般不使用代理，火狐推荐的每台代理服务器设置为：<= 10。\n\n#### Firefox3.6\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6jbxx2j6tj30fq06faa1.jpg)\n\n和 IE8 的几乎完全一样：\n\n- 最大并发 HTTP 连接数为 6 个（可在 about:config 中修改）。\n- javascript 文件不会阻塞其他资源的加载，多个 javascript 文件可以一起加载。\n- 会分析 HTML 结构，优先下载 script 和 link 标签定义的外部资源。\n\n#### Firefox4 beta12\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6jby0whawj30fv07n3yj.jpg)\n\n不知是因为设计理念上的不同，还是因为 beta 版未照顾到这一块，Firefox4 反而退化了，和 Firefox3.6 的区别主要体现在对资源类型的处理上，Firefox4 不再严格地优先下载 script 和 link 标签定义的外部资源，而是按照 HTML 结构中出现的顺序来进行加载。\n\n### IE 浏览器的最大并发连接数\n\n用“注册表编辑器”命令打开注册表编辑器，找到：\n\n[HKEY_CURRRENT_USER \\ Software \\ Microsoft \\ Windows \\ CurrentVersion \\ Internet Settings]，可以看到**MaxConnectionsPerServer**和**MaxConnectionsPer1_0Server**这两个键（分别是针对 HTTP 1.1 和 HTTP 1.0 的设置）\n\n**对于 IE 9**\n\n[HKEY_CURRRENT_USER \\ Software \\ Policies \\ Microsoft \\ Internet Exploer \\ Main \\ FeatureControl，可以看到**FEATURE_MAXCONNECTIONSPER1_0SERVER**和**FEATURE_MAXCONNECTIONSPERSERVER**这两个键（分别是针对 HTTP 1.1 和 HTTP 1.0 的设置）\n\n#### IE8\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6jbx8rdwaj30g407pweh.jpg)\n\n和 IE6 完全不同的瀑布图，其特点有：\n\n- 最大并发 HTTP 连接数为 6 个。\n- javascript 文件已经不会阻塞其他资源的加载，甚至多个 javascript 文件可以一起加载，并且会保证执行的顺序。\n- 会分析 HTML 结构，优先下载 script 和 link 标签定义的外部资源。\n\n### chrome 浏览器的最大并发连接数\n\n#### Chrome8\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6jbzcty9xj30fw07zwef.jpg)\n\nChrome 自带的工具不能很清楚地表示各请求的开始时间，所以使用了 Fiddler 的瀑布图，从图上可以看出，Chrome 也是比较特立独行的一位，其特点有：\n\n- 最大并发 HTTP 连接数为 6。\n- head 部分的资源会单独下载，且阻塞 body 中的其他资源的加载。\n- 会优先加载 script 和 link 标签定义的资源。\n\n### opera 浏览器的最大并发连接数\n\n#### Opera11\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6jbzixw3tj30fj0813yh.jpg)\n\n先报怨一下，Dragonfly 不怎么好用来着……Opera 的资源加载也比较有特色，而且很难看出规律，只能大致总结一下：\n\n- Opera 的最大并发 HTTP 连接数默认为 16，可在 opera:config - Performance - Max Connections Server 查看和修改。\n- javascript 文件的加载会阻塞其他 script 和 link 标签定义的外部资源的加载，如图中的 2.js。但不会阻塞图片等其他资源的加载，如图中的 3.js。\n- 会一定程度上对资源的优先级进行优化，但由于 javascript 文件要阻止后续部分资源的加载，又为了充分利用最大 HTTP 连接数，因此不能严格先加载所有的 script 和 link 标签定义的资源，导致瀑布图上各类型资源有相互穿插，难寻规律。\n\n## HTTP 连接请求与线程\n\nHTTP 连接是复杂，有状态的对象，所以它必须被妥善管理。**一个 HTTP 连接请求在同一时间只能被一个线程访问。**\n\nHttpClient 使用一个叫做的 Http 连接管理器的特殊实体类来管理的 Http 连接。Http 连接管理器在新建的 HTTP 连接时，作为工厂类；管理持久的 http 连接的生命周期；同步持久连接（确保线程安全，即一个 HTTP 连接同一时间只能被一个线程访问）。\n\n如果一个的 Http 连接被释放或者被它的消费者明确表示要关闭，那么底层的连接就会和它的代理进行分离，并且该连接会被交还给连接管理器。这是，即使服务消费者仍然持有代理的引用，它也不能再执行 I / O 操作，或者更改的 Http 连接的状态。\n\n### 连接池管理器\n\n连接池管理器是个复杂的类，它管理着连接池，可以同时为很多线程提供 HTTP 连接请求。当请求一个新的连接时，如果连接池有有可用的持久连接，连接管理器就会使用其中的一个，而不是再创建一个新的连接。\n\n当使用了请求连接池管理器后，HttpClient 的就可以同时执行多个线程的请求了。\n\n连接池管理器会根据它的配置来分配请求连接。如果连接池中的所有连接都被占用了，那么后续的请求就会被阻塞，直到有连接被释放回连接池中。\n\n### 线程池的原理\n\n线程池的原理很简单，类似于操作系统中的缓冲区的概念，它的流程如下：\n\n线程池在还没有任务到来之前，创建一定数量的线程，放入空闲队列中。这些线程都是处于睡眠状态，即均为启动，不消耗 CPU，而只是占用较小的内存空间。当客户端有一个新请求时，就会唤醒线程池中的某一个睡眠线程，让它来处理客户端的这个请求，当处理完这个请求后，线程又处于睡眠状态。\n\n线程池能节约大量的的系统资源，使得更多的 CPU 时间和内存用来处理实际的商业应用，而不是频繁的线程创建与销毁\n\n每个线程需要大约 1MB 内存，线程开的越多，消耗的内存也就越大。\n\n在什么情况下使用线程池：\n\n1. 单个任务处理的时间比较短\n2. 将需处理的任务的数量大\n\n### 数据库连接池\n\n数据库连接池的解决方案是在应用程序启动时建立足够的数据库连接，并讲这些连接组成一个连接池（简单说：在一个“池”里放了好多半成品的数据库联接对象），由应用程序动态地对池中的连接进行申请，使用和释放。对于多于连接池中连接数的并发请求，应该在请求队列中排队等待。并且应用程序可以根据池中连接的使用率，动态增加或减少池中的连接数。\n连接池技术尽可能多地重用了消耗内存地资源，大大节省了内存，提高了服务器地服务效率，能够支持更多的客户服务。通过使用连接池，将大大提高程序运行效率，同时，我们可以通过其自身的管理机制来监视数据库连接的数量，使用情况等。\n\n1）最小连接数是连接池一直保持的数据库连接，所以如果应用程序对数据库连接的使用量不大，将会有大量的数据库连接资源被浪费;\n2）最大连接数是连接池能申请的最大连接数，如果数据库连接请求超过此数，后面的数据库连接请求将被加入到等待队列中，这会影响之后的数据库操作。\n\n**数据库连接是一种关键的有限的昂贵的资源，这一点在多用户的网页应用程序中体现得尤为突出。**一个数据库连接对象均对应一个物理数据库连接，每次操作都打开一个物理连接，使用完都关闭连接，这样造成系统的性能低下。\n\n### WebSphere Application Server 性能\n\nhttp://websphere.sys-con.com/node/46514/print\n\n构建服务器应用程序的一个过于简单的模型是：每当一个请求到达就创建一个新的服务对象，然后在新的服务对象中为服务请求，但当有大量请求并发访问时，服务器不断的创建和销毁对象的开销很大。\n\n在面向对象的编程中，创建和销毁对象是很浪费资源的，因为创建一个对象要获取内存资源或者其它更多资源。在 Java 的中更是如此，虚拟机试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以，提高程序效率的一个手段就是尽可能减少创建和销毁对象的次数。利用已有的对象来服务就是“池化资源”技术产生的原因。\n\n**HTTP 侦听器**\nHTTP 侦听器负责在 HTTP 服务器级别创建线程。这里发生的大多数处理是静态页面服务，或 HTTP post / GET 传递命令到后端。这是必须考虑的第一级线程配置。\n\n**Web 容器**\nWeb 容器负责在应用程序服务器级别创建线程池。此级别的大多数处理包括 servlet，JSP，EJB，动态页面创建和后端传递处理。Web 容器是必须配置的第二级线程池配置。\n\n**ORB 容器** ORB 容器负责在对象级创建线程池。这里发生的大部分处理包括处理基于非 Web 的客户端。ORB 容器是必须配置的线程池配置的第三级。\n\n**数据源**\n数据源级负责创建从数据库或“传统”系统访问的连接线程。这些线程是必须解决的第四级配置\n\n### WAS 线程池数与 IHS server\n\n假定一个浏览器的并发连接请求数为 10，通常同一时间内会有多个用户并发访问网站。又考虑到，一个 Http 连接请求在同一时间只能被一个线程访问。所以，IHS 服务器的 httpd.conf 里的 maxclients（允许建立的总线程数）要能够处理峰值时刻的浏览器连接请求才行。同时，考虑不是所有的连接请求都会到 was server，有的连接只是为了在 web 服务器上取静态资源，所以，was 上的线程池数目（Thread pools ：50 ）会远小于 IHS server 上的 maxclients 值譬如 400）。\n","tags":["浏览器"],"categories":["浏览器"]},{"title":"前端优化","url":"/2019/09/08/前端优化/","content":"\n# 前端优化\n\n## 前端性能衡量指标\n\n- **白屏时间** 该时间点表示浏览器开始绘制页面，在此之前页面都是白屏，也称为开始渲染时间\n- **首屏时间** 该时间点表示用户看到第一屏页面的时间\n- **用户可交互时间** 也叫 DOM Ready,该时间点表示 DOM 解析完成，资源还没有完成，这个时候用户与页面可以交互了\n- **完全加载时间** 该时间点是 window.onload 时间触发的时间，表示原始文档和所用引用的内容已经加载完成，用户最明显的感觉就是浏览器 tab 上 loading 状态结束\n- **首字节时间（TTFB）** 第一字节响应时间（TTFB）=发送请求到 WEB 服务器的时间+WEB 服务器处理请求并生成响应花费的时间+WEB 服务器生成响应到浏览器花费的时间\n- **DNS 解析时间**\n- **TCP 连接时间**\n- **HTTP 请求时间**\n- **HTTP 响应时间**\n\n## 优化原则\n\n雅虎 14 条优化原则：\n\n1. 尽可能的减少 HTTP 的请求数 content\n\n2. 使用 CDN（Content Delivery Network） server\n3. 添加 Expires 头(或者 Cache-control ) server\n4. Gzip 组件 server\n5. 将 CSS 样式放在页面的上方 css\n6. 将脚本移动到底部（包括内联的） javascript\n7. 避免使用 CSS 中的 Expressions css\n8. 将 JavaScript 和 CSS 独立成外部文件 javascript css\n9. 减少 DNS 查询 content\n10. 压缩 JavaScript 和 CSS (包括内联的) javascript css\n11. 避免重定向 server\n12. 移除重复的脚本 javascript\n13. 配置实体标签（ETags） css\n14. 使 AJAX 缓存\n\n| 优化方向 | 优化手段                                                                                        |\n| -------- | ----------------------------------------------------------------------------------------------- |\n| 请求数量 | 合并脚本和样式表，CSS Sprites，拆分初始化负载，划分主域，字体图标，雪碧图片等                   |\n| 请求带宽 | 开启服务器 GZip，精简 JavaScript，移除重复脚本，图像优化（包括图片大小 kb）                     |\n| 缓存利用 | 使用 CDN，使用外部 JavaScript 和 CSS，添加 Expires 头，减少 DNS 查找，配置 ETag，使 AjaX 可缓存 |\n| 页面结构 | 将样式表放在顶部，将脚本放在底部，尽早刷新文档的输出                                            |\n| 代码校验 | 避免 CSS 表达式，避免重定向                                                                     |\n\n## 网络相关\n\n### DNS 预解析\n\nDNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP。\n\n```html\n<link rel=\"dns-prefetch\" href=\"//yuchengkai.cn\" />\n```\n\n### 利用缓存\n\n缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度。\n\n通常浏览器缓存策略分为两种：强缓存和协商缓存\n\n#### 选择合适的缓存策略\n\n对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略\n\n- 对于某些不需要缓存的资源，可以使用 `Cache-control: no-store` ，表示该资源不需要缓存\n- 对于频繁变动的资源，可以使用 `Cache-Control: no-cache` 并配合 `ETag` 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。\n- 对于代码文件来说，通常使用 `Cache-Control: max-age=31536000` 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件。\n\n### 使用 HTTP / 2.0\n\n因为浏览器会有并发请求限制，在 HTTP / 1.1 时代，每个请求都需要建立和断开，消耗了好几个 RTT 时间，并且由于 TCP 慢启动的原因，加载体积大的文件会需要更多的时间。\n\n在 HTTP / 2.0 中引入了多路复用，能够让多个请求使用同一个 TCP 链接，极大的加快了网页的加载速度。并且还支持 Header 压缩，进一步的减少了请求的数据大小。\n\n### 预加载&懒加载\n\n#### 预加载\n\n在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载。\n\n预加载其实是声明式的 `fetch` ，强制浏览器请求资源，并且不会阻塞 `onload` 事件，可以使用以下代码开启预加载\n\n```html\n<link rel=\"preload\" href=\"http://example.com\" />\n```\n\n预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好。\n\n#### 预渲染\n\n可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染\n\n```html\n<link rel=\"prerender\" href=\"http://example.com\" />\n```\n\n预渲染虽然可以提高页面的加载速度，但是要确保该页面百分百会被用户在之后打开，否则就白白浪费资源去渲染。\n\n#### 懒执行\n\n懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒。\n\n#### 懒加载\n\n懒加载就是将不关键的资源延后加载。\n\n懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 `src` 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 `src` 属性，这样图片就会去下载资源，实现了图片懒加载。\n\n懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等等。\n\n## 文件优化\n\n### 图片优化\n\n#### 图片大小计算\n\n在实际项目中，一张图片可能并不需要使用那么多颜色去显示，我们可以通过减少每个像素的调色板来相应缩小图片的大小。\n\n了解了如何计算图片大小的知识，那么对于如何优化图片，想必大家已经有 2 个思路了：\n\n- 减少像素点\n- 减少每个像素点能够显示的颜色\n\n#### 图片加载优化\n\n1. 不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。\n2. 对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。\n3. 小图使用 base64 格式\n4. 将多个图标文件整合到一张图片中（雪碧图）\n5. 选择正确的图片格式：\n   - 对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好\n   - 小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替\n   - 照片使用 JPEG\n\n### 其他文件优化\n\n- CSS 文件放在 `head` 中\n- 服务端开启文件压缩功能\n- 将 `script` 标签放在 `body` 底部，因为 JS 文件执行会阻塞渲染。当然也可以把 `script` 标签放在任意位置然后加上 `defer` ，表示该文件会并行下载，但是会放到 HTML 解析完成后顺序执行。对于没有任何依赖的 JS 文件可以加上 `async` ，表示加载和渲染后续文档元素的过程将和 JS 文件的加载与执行并行无序进行。\n- 执行 JS 代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑使用 `Webworker`。`Webworker` 可以让我们另开一个线程执行脚本而不影响渲染。\n\n### CDN\n\n> CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。—— 科学百科\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6p436ax42j30ia09l74f.jpg)\n\n#### CDN 存在的意义\n\n为了不让网络拥塞成为互联网发展的障碍。\n\n#### CDN 的优势\n\n1. CDN 节点解决了跨运营商和跨地域访问的问题，访问延时大大降低；\n2. 大部分请求在 CDN 边缘节点完成，CDN 起到了分流作用，减轻了源站的负载；\n3. 降低“广播风暴”的影响，提高网络访问的稳定性；节省骨干网带宽，减少带宽需求量。\n\n#### CDN 的核心点\n\n- 缓存：将从根服务器请求来的资源按要求缓存。\n\n- 回源：当有用户访问某个资源的时候，如果被解析到的那个 CDN 节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。没有人访问，CDN 节点不会主动去源站请求资源。\n\n#### 关键技术\n\n1. 内容发布：它借助于建立索引、缓存、流分裂、组播（Multicast）等技术，将内容发布或投递到距离用户最近的远程服务点（POP）处；\n2. 内容路由：它是整体性的网络负载均衡技术，通过内容路由器中的重定向（DNS）机制，在多个远程 POP 上均衡用户的请求，以使用户请求得到最近内容源的响应；\n3. 内容交换：它根据内容的可用性、服务器的可用性以及用户的背景，在 POP 的缓存服务器上，利用应用层交换、流分裂、重定向（ICP、WCCP）等技术，智能地平衡负载流量；\n4. 性能管理：它通过内部和外部监控系统，获取网络部件的状况信息，测量内容发布的端到端性能（如包丢失、延时、平均带宽、启动时间、帧速率等），保证网络处于最佳的运行状态。\n\n#### CDN & 静态资源\n\n静态资源本身具有访问频率高、承接流量大的特点，因此静态资源加载速度始终是前端性能的一个非常关键的指标。CDN 是静态资源提速的重要手段。\n\n静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。对于 CDN 加载静态资源需要注意 CDN 域名要与主站不同，否则每次请求都会带上主站的 Cookie。\n\n## 其他优化\n\n### 使用 Webpack 优化项目\n\n- 对于 Webpack4，打包项目使用 production 模式，这样会自动开启代码压缩\n- 使用 ES6 模块来开启 tree shaking，这个技术可以移除没有使用的代码\n- 优化图片，对于小图可以使用 base64 的方式写入文件中\n- 按照路由拆分代码，实现按需加载\n- 给打包出来的文件名添加哈希，实现浏览器缓存文件\n\n### 监控\n\n对于代码运行错误，通常的办法是使用 `window.onerror` 拦截报错。该方法能拦截到大部分的详细报错信息，但是也有例外\n\n- 对于跨域的代码运行错误会显示 `Script error.` 对于这种情况我们需要给 `script` 标签添加 `crossorigin` 属性\n- 对于某些浏览器可能不会显示调用栈信息，这种情况可以通过 `arguments.callee.caller` 来做栈递归\n\n对于异步代码来说，可以使用 `catch` 的方式捕获错误。比如 `Promise` 可以直接使用 `catch` 函数，`async await` 可以使用 `try catch`\n\n但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便于 debug。\n\n对于捕获的错误需要上传给服务器，通常可以通过 `img` 标签的 `src` 发起一个请求。\n\n## 如何优化第二次加载速度？（增量加载）\n\n[前端性能优化三部曲(加载篇)](https://juejin.im/post/5d00820b5188255ee806a1c7)\n\n[移动 H5 首屏秒开优化方案探讨](https://juejin.im/entry/599403656fb9a0247f4f2ee3)\n\n1. **降低请求量：**合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。\n2. **加快请求速度：**预解析 DNS，减少域名数，并行加载，CDN 分发。\n3. **缓存：**HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存 localStorage。\n4. **渲染：**JS/CSS 优化，加载顺序，服务端渲染，pipeline。\n\n其中对首屏启动速度影响最大的就是网络请求，所以优化的重点就是缓存\n\n**增量式更新”**的解决方案，简单地说就是在版本更新的时候不需要重新加载资源，只需要加载一段很小的 diff 信息，然后合并到当前资源上，类似 git merge 的效果。\n\n增量加载的一种思路：\n\n1、用户端使用 LocalStorage 或者其它储存方案，存储一份原始代码+时间戳：\n\n```text\n{\n    timeStamp: \"20161026xxxxxx\",\n    data: \"aaabbbccc\"\n}\n```\n\n2、每次加载资源的时候向服务器发送这个时间戳；\n\n3、服务器从接受到时间戳中识别出客户端的版本，和最新的版本做一次 diff，返回两者的 diff 信息：\n\n```js\ndiff(\"aaabbbccc\", \"aaagggccc\");\n// 假设我们的diff信息这样表示：\n// [3, \"-3\", \"+ggg\", 3]\n```\n\n4、客户端接收到这个 diff 信息之后，把本地资源和时间戳更新到最新，实现一次增量更新：\n\n```js\nmergeDiff(\"aaabbbccc\", [3, \"-3\", \"+ggg\", 3]);\n//=> \"aaagggccc\"\n```\n\n## 面试题（如何渲染几万条数据并不卡住界）\n\n这道题考察了如何在不卡住页面的情况下渲染数据，也就是说不能一次性将几万条都渲染出来，而应该一次渲染部分 DOM，那么就可以通过 `requestAnimationFrame` 来每 16 ms 刷新一次。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>Document</title>\n  </head>\n  <body>\n    <ul>\n      控件\n    </ul>\n    <script>\n      setTimeout(() => {\n        // 插入十万条数据\n        const total = 100000;\n        // 一次插入 20 条，如果觉得性能不好就减少\n        const once = 20;\n        // 渲染数据总共需要几次\n        const loopCount = total / once;\n        let countOfRender = 0;\n        let ul = document.querySelector(\"ul\");\n        function add() {\n          // 优化性能，插入不会造成回流\n          const fragment = document.createDocumentFragment();\n          for (let i = 0; i < once; i++) {\n            const li = document.createElement(\"li\");\n            li.innerText = Math.floor(Math.random() * total);\n            fragment.appendChild(li);\n          }\n          ul.appendChild(fragment);\n          countOfRender += 1;\n          loop();\n        }\n        function loop() {\n          if (countOfRender < loopCount) {\n            window.requestAnimationFrame(add);\n          }\n        }\n        loop();\n      }, 0);\n    </script>\n  </body>\n</html>\n```\n\n## 拓展知识之 Gzip\n\n### 基本介绍\n\ngzip 是 GNUzip 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 gzip 编码是一种用来改进 web 应用程序性能的技术，web 服务器和客户端（浏览器）必须共同支持 gzip。目前主流的浏览器，Chrome,firefox,IE 等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持 gzip。\n\ngzip 压缩比率在 3 到 10 倍左右，可以大大节省服务器的网络带宽。而在实际应用中，并不是对所有文件进行压缩，通常只是压缩静态文件。\n\n### gzip 工作原理：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjepqxiaj30go0bcaa9.jpg)\n\n1. 浏览器请求 url，并在 request header 中设置属性 accept-encoding:gzip。表明浏览器支持 gzip。\n2. 服务器收到浏览器发送的请求之后，判断浏览器是否支持 gzip，如果支持 gzip，则向浏览器传送压缩过的内容，不支持则向浏览器发送未经压缩的内容。一般情况下，浏览器和服务器都支持 gzip，response headers 返回包含 content-encoding:gzip。\n3. 浏览器接收到服务器的响应之后判断内容是否被压缩，如果被压缩则解压缩显示页面内容。\n\n### Nginx 中开启 gzip\n\n如果服务端接口使用 nodejs 和 express，那么开启 nginx 非常简单。启用 compress() 中间件即可并在 nginx.conf 中添加 gzip 配置项即可，express.compress() gzip 压缩中间件，通过 filter 函数设置需要压缩的文件类型。压缩算法为 gzip/deflate。这个中间件应该放置在所有的中间件最前面以保证所有的返回都是被压缩的。如果使用 java 开发，需要配置 filter。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjg93f23j30go03eq2v.jpg)\n\n添加完参数后，运行 nginx –t 检查一下语法，若语法检测通过，则开始访问 url 检测 gzip 是否添加成功。\n\n1. gzip on：开启 gzip。\n2. gzip_comp_level：gzip 压缩比。\n3. gzip_min_length：允许被压缩的页面最小字节数。\n4. gzip_types：匹配 MIME 类型进行压缩，text/html 默认被压缩。\n\n### 检测 gzip 是否开启\n\n如果没有现成的项目代码，这里提供一个比较简单的检测方式。首先在本地安装 nginx，在 nginx 默认目录下面添加了两个静态文件 bootstrap.css、bootstrap.js。\n\nOS X 系统的默认路径为：/usr/local/Cellar/nginx/1.10.2_1/html，Windows 系统直接复制文件到文件夹下面。\n\n拷贝文件指令可参考：cp -r bootstrap.js /usr/local/Cellar/nginx/1.10.2_1/html，在 nginx 的默认成功跳转页面 index.html 引入这两个静态文件。index.html 页面内容如图所示。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjhnk9acj30go0c90tb.jpg)\n\n做好这一切的准备工作之后，浏览器输入[http://localhost:8080/](https://link.juejin.im/?target=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%3A%2F%2Flocalhost%3A8080%2F)。出现如图所示页面表明 nginx 启动成功。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjii979gj30go048wei.jpg)\n\nnginx 启动成功界面。\n\n此时打开 Chrome 控制台，可以看到 network 信息，response headers 中返回了 content-encoding:gzip，表明 gzip 开启成功。\n\ngzip 未开启前 network 信息如图所示：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjjd5bavj30go02ogll.jpg)\n\n开启后返回 network 信息如图所示：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjjxm19cj30go02m0sp.jpg)\n\nurl 请求的 headers 报文如图所示：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6sjk4yn88j30go0a4jrt.jpg)\n\n对比以上三图可以看出 gzip 压缩效率非常高，且经过压缩后静态文件大小不到原来的五分之一。这里值得一提的是静态资源文件越大，gzip 的压缩效率越高。所以对于静态资源量非常大的网站，开启 gzip 可节省大量流量，而同时 gzip 的应用远不止提高 web 性能,Android，IOS 底层网络请求同样可用。\n","tags":["性能优化"],"categories":["前端"]},{"title":"CSS的position属性","url":"/2019/08/31/CSS的position属性/","content":"\n# CSS 的 position 属性\n\n## static\n\n默认值。该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 `top`, `right`, `bottom`, `left` 和 `z-index`属性无效。\n\n## relative\n\n### 定位类型\n\n相对定位元素，相对定位的元素是在文档中的正常位置偏移给定的值，但是不影响其他元素的偏移。\n\n### 定位方式\n\n生成相对定位的元素，相对于其正常位置进行定位。该关键字下，元素先放置在未添加定位时的位置，再在不改变页面布局的前提下调整元素位置（因此会在此元素未添加定位时所在位置留下空白，\"left:20\" 会向元素的 LEFT 位置添加 20 像素。）。`position:relative` 对 `table-group`, `table-row`,`table-column`,`table-cell`,`table-caption` 元素无效。\n\n```html\n<div class=\"box\" id=\"one\">One</div>\n<div class=\"box\" id=\"two\">Two</div>\n<div class=\"box\" id=\"three\">Three</div>\n<div class=\"box\" id=\"four\">Four</div>\n```\n\n```css\n.box {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n  background: red;\n  color: white;\n}\n\n#two {\n  position: relative;\n  top: 20px;\n  left: 20px;\n  background: blue;\n}\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyqx5px1j312q0b40t2.jpg)\n\n## absolute\n\n### 定位类型\n\n绝对定位元素，相对定位的元素并未脱离文档流，而绝对定位的元素则脱离了文档流。在布置文档流中其它元素时，绝对定位元素不占据空间。绝对定位元素相对于*最近的非 static 祖先元素*定位。当这样的祖先元素不存在时，则相对于 ICB（inital container block, 初始包含块）。\n\n### 定位方式\n\n生成绝对定位的元素，不为元素预留空间，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n\n```html\n<div class=\"box\" id=\"one\">One</div>\n<div class=\"box\" id=\"two\">Two</div>\n<div class=\"box\" id=\"three\">Three</div>\n<div class=\"box\" id=\"four\">Four</div>\n```\n\n```css\n.box {\n  display: inline-block;\n  background: red;\n  width: 100px;\n  height: 100px;\n  float: left;\n  margin: 20px;\n  color: white;\n}\n\n#three {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n}\n```\n\n![image-20190823001646550](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyrszydtj310809e0sz.jpg)\n\n## fixed\n\n### 定位类型\n\n绝对定位元素，固定定位与绝对定位相似，但元素的包含块为 viewport 视口。该定位方式常用于创建在滚动屏幕时仍固定在相同位置的元素。\n\n### 定位方式\n\n生成绝对定位的元素，不为元素预留空间，相对于浏览器窗口进行定位。元素的位置通过 \"left\", \"top\", \"right\" 以及 \"bottom\" 属性进行规定。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。`fixed` 属性会创建新的层叠上下文。\n\n**当元素祖先的 `transform` 属性非 `none` 时，容器由视口改为该祖先。**\n\n## sticky\n\n### 定位类型\n\n粘性定位元素，粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位。\n\n### 定位方式\n\n盒位置根据正常流计算(这称为正常流动中的位置)，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。在所有情况下（即便被定位元素为 `table 时`），该元素定位均不对后续元素造成影响。当元素 B 被粘性定位时，后续元素的位置仍按照 B 未定位时的位置来确定。`position: sticky`对 `table` 元素的效果与 `position: relative`相同。\n\n```css\n#one {\n  position: sticky;\n  top: 10px;\n}\n```\n\n在 viewport 视口滚动到元素 top 距离小于 10px 之前，元素为相对定位。之后，元素将固定在与顶部距离 10px 的位置，直到 viewport 视口回滚到阈值以下。\n\n粘性定位常用于定位字母列表的头部元素。标示 B 部分开始的头部元素在滚动 A 部分时，始终处于 A 的下方。而在开始滚动 B 部分时，B 的头部会固定在屏幕顶部，直到所有 B 的项均完成滚动后，才被 C 的头部替代。\n\n### 例子\n\n```html\n<div>\n  <dl>\n    <dt>A</dt>\n    <dd>Andrew W.K.</dd>\n    <dd>Apparat</dd>\n    <dd>Arcade Fire</dd>\n    <dd>At The Drive-In</dd>\n    <dd>Aziz Ansari</dd>\n  </dl>\n  <dl>\n    <dt>C</dt>\n    <dd>Chromeo</dd>\n    <dd>Common</dd>\n    <dd>Converge</dd>\n    <dd>Crystal Castles</dd>\n    <dd>Cursive</dd>\n  </dl>\n  <dl>\n    <dt>E</dt>\n    <dd>Explosions In The Sky</dd>\n  </dl>\n  <dl>\n    <dt>T</dt>\n    <dd>Ted Leo & The Pharmacists</dd>\n    <dd>T-Pain</dd>\n    <dd>Thrice</dd>\n    <dd>TV On The Radio</dd>\n    <dd>Two Gallants</dd>\n  </dl>\n</div>\n```\n\n```css\n* {\n  box-sizing: border-box;\n}\n\ndl {\n  margin: 0;\n  padding: 24px 0 0 0;\n}\n\ndt {\n  background: #b8c1c8;\n  border-bottom: 1px solid #989ea4;\n  border-top: 1px solid #717d85;\n  color: #fff;\n  font: bold 18px/21px Helvetica, Arial, sans-serif;\n  margin: 0;\n  padding: 2px 0 0 12px;\n  position: -webkit-sticky;\n  position: sticky;\n  top: -1px;\n}\n\ndd {\n  font: bold 20px/45px Helvetica, Arial, sans-serif;\n  margin: 0;\n  padding: 0 0 0 12px;\n  white-space: nowrap;\n}\n\ndd + dd {\n  border-top: 1px solid #ccc;\n}\n```\n\n### 生效规则\n\n`position:sticky` 的生效是有一定的限制的，总结如下：\n\n1. 须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n   - 并且 `top` 和 `bottom` 同时设置时，`top` 生效的优先级高，`left` 和 `right` 同时设置时，`left` 的优先级高。\n2. 设定为 `position:sticky` 元素的任意父节点的 overflow 属性必须是 visible，否则 `position:sticky` 不会生效。这里需要解释一下：\n   - 如果 `position:sticky` 元素的任意父节点定位设置为 `overflow:hidden`，则父容器无法进行滚动，所以 `position:sticky` 元素也不会有滚动然后固定的情况。\n   - 如果 `position:sticky` 元素的任意父节点定位设置为 `position:relative | absolute | fixed`，则元素相对父元素进行定位，而不会相对 viewprot 定位。\n3. 达到设定的阀值。这个还算好理解，也就是设定了 `position:sticky` 的元素表现为 `relative` 还是 `fixed` 是根据元素是否达到设定了的阈值决定的。\n\n### 特性\n\n1. 同一个父容器中的 sticky 元素，如果定位值相等，则会重叠；如果属于不同父元素，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。\n\n## initial\n\n`initial` 关键字用于设置 CSS 属性为它的默认值，可作用于任何 CSS 样式。（IE 不支持该关键字）\n\n## inherit：\n\n规定应该从父元素继承 position 属性的值。\n\n每一个 CSS 属性都有一个特性就是，这个属性必然是默认继承的 (`inherited: Yes`) 或者是默认不继承的 (`inherited: no`)其中之一，我们可以在 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Reference) 上通过这个索引查找，判断一个属性的是否继承特性。\n\n### 可继承属性\n\n- 所有元素可继承：visibility 和 cursor\n- 内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、 font-family、font-size、font-style、font-variant、font-weight、text- decoration、text-transform、direction\n- 块状元素可继承：text-indent 和 text-align\n- 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image\n- 表格元素可继承：border-collapse\n\n## unset\n\n`unset` 关键字我们可以简单理解为不设置。其实，它是关键字 `initial` 和 `inherit` 的组合。\n\n什么意思呢？也就是当我们给一个 CSS 属性设置了 `unset` 的话：\n\n1. 如果该属性是默认继承属性，该值等同于 `inherit`\n2. 如果该属性是非继承属性，该值等同于 `initial`\n\n### 例子\n\n```html\n<div class=\"father\">\n  <div class=\"children\">子级元素一</div>\n  <div class=\"children unset\">子级元素二</div>\n</div>\n\n.father { color: red; border: 1px solid black; } .children { color: green;\nborder: 1px solid blue; } .unset { color: unset; border: unset; }\n```\n\n1. 由于 `color` 是可继承样式，设置了 `color: unset` 的元素，最终表现为了父级的颜色 `red`。\n2. 由于 `border` 是不可继承样式，设置了 `border: unset` 的元素，最终表现为 `border: initial` ，也就是默认 border 样式，无边框。\n\n## revert\n\nrevert 未列入规范\n","tags":["CSS","position"],"categories":["CSS"]},{"title":"ES6 装饰器","url":"/2019/08/18/ES6 装饰器/","content":"\n# ES6 装饰器\n\n装饰器（Decorator）是一种与类（class）相关的语法，**用来注释或修改类和类方法**。装饰器是一种函数，写成`@ + 函数名`。它可以放在类和类方法的定义前面。\n\n  <!-- more -->\n\n```javascript\n@frozen\nclass Foo {\n  @configurable(false)\n  @enumerable(true)\n  method() {}\n\n  @throttle(500)\n  expensiveMethod() {}\n}\n```\n\n上面代码一共使用了四个装饰器，一个用在类本身，另外三个用在类方法。它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能。\n\n**Proxy 的核心作用是控制外界对被代理者内部的访问，Decorator 的核心作用是增强被装饰者的功能。著作权归作者所有。**\n\n## 类的装饰\n\n装饰器可以用来装饰整个类。\n\n### 为类添加静态属性\n\n```javascript\n@testable\nclass MyTestableClass {\n  // ...\n}\n\nfunction testable(target) {\n  target.isTestable = true;\n}\n\nMyTestableClass.isTestable; // true\n```\n\n上面代码中，`@testable`就是一个装饰器。它修改了`MyTestableClass`这个类的行为，为它加上了静态属性`isTestable`。`testable`函数的参数`target`是`MyTestableClass`类本身。\n\n基本上，装饰器的行为就是下面这样。\n\n```javascript\n@decorator\nclass A {}\n\n// 等同于\n\nclass A {}\nA = decorator(A) || A;\n```\n\n也就是说，**装饰器是一个对类进行处理的函数。装饰器函数的第一个参数，就是所要装饰的目标类。**\n\n如果觉得一个参数不够用，可以在装饰器外面再封装一层函数。\n\n```javascript\nfunction testable(isTestable) {\n  return function(target) {\n    target.isTestable = isTestable;\n  };\n}\n\n@testable(true)\nclass MyTestableClass {}\nMyTestableClass.isTestable; // true\n\n@testable(false)\nclass MyClass {}\nMyClass.isTestable; // false\n```\n\n上面代码中，装饰器`testable`可以接受参数，这就等于可以修改装饰器的行为。\n\n**注意，装饰器对类的行为的改变，是代码编译时发生的，而不是在运行时。这意味着，装饰器能在编译阶段运行代码。也就是说，装饰器本质就是编译时执行的函数。**\n\n### 为类添加实例属性\n\n如果想添加实例属性，可以通过目标类的`prototype`对象操作。\n\n```javascript\nfunction testable(target) {\n  target.prototype.isTestable = true;\n}\n\n@testable\nclass MyTestableClass {}\n\nlet obj = new MyTestableClass();\nobj.isTestable; // true\n```\n\n上面代码中，装饰器函数`testable`是在目标类的`prototype`对象上添加属性，因此就可以在实例上调用。\n\n下面是另外一个例子。\n\n```javascript\n// mixins.js\nexport function mixins(...list) {\n  return function(target) {\n    Object.assign(target.prototype, ...list);\n  };\n}\n\n// main.js\nimport { mixins } from \"./mixins\";\n\nconst Foo = {\n  foo() {\n    console.log(\"foo\");\n  }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo(); // 'foo'\n```\n\n上面代码通过装饰器`mixins`，把`Foo`对象的方法添加到了`MyClass`的实例上面。可以用`Object.assign()`模拟这个功能。\n\n## 方法的装饰\n\n### 装饰器修改属性的描述对象\n\n装饰器不仅可以装饰类，还可以装饰类的属性。\n\n```javascript\nclass Person {\n  @readonly\n  name() {\n    return `${this.first} ${this.last}`;\n  }\n}\n```\n\n上面代码中，装饰器`readonly`用来装饰“类”的`name`方法。\n\n装饰器函数`readonly`一共可以接受三个参数。\n\n```javascript\nfunction readonly(target, name, descriptor) {\n  // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\n\nreadonly(Person.prototype, \"name\", descriptor);\n// 类似于\nObject.defineProperty(Person.prototype, \"name\", descriptor);\n```\n\n装饰器第一个参数是类的原型对象，上例是`Person.prototype`，装饰器的本意是要“装饰”类的实例，但是**这个时候实例还没生成，所以只能去装饰原型**（这不同于类的装饰，那种情况时`target`参数指的是类本身）；第二个参数是所要装饰的属性名，第三个参数是该属性的描述对象。\n\n另外，上面代码说明，**装饰器（readonly）会修改属性的描述对象（descriptor），然后被修改的描述对象再用来定义属性。**\n\n下面是另一个例子，修改属性描述对象的`enumerable`属性，使得该属性不可遍历。\n\n```javascript\nclass Person {\n  @nonenumerable\n  get kidCount() {\n    return this.children.length;\n  }\n}\n\nfunction nonenumerable(target, name, descriptor) {\n  descriptor.enumerable = false;\n  return descriptor;\n}\n```\n\n下面的`@log`装饰器，可以起到输出日志的作用。\n\n```javascript\nclass Math {\n  @log\n  add(a, b) {\n    return a + b;\n  }\n}\n\nfunction log(target, name, descriptor) {\n  var oldValue = descriptor.value;\n\n  descriptor.value = function() {\n    console.log(`Calling ${name} with`, arguments);\n    return oldValue.apply(this, arguments);\n  };\n\n  return descriptor;\n}\n\nconst math = new Math();\n\n// passed parameters should get logged now\nmath.add(2, 4);\n```\n\n上面代码中，`@log`装饰器的作用就是在执行原始的操作之前，执行一次`console.log`，从而达到输出日志的目的。\n\n### 装饰器的注释作用\n\n```javascript\n@testable\nclass Person {\n  @readonly\n  @nonenumerable\n  name() {\n    return `${this.first} ${this.last}`;\n  }\n}\n```\n\n从上面代码中，我们一眼就能看出，`Person`类是可测试的，而`name`方法是只读和不可枚举的。\n\n下面是使用 Decorator 写法的[组件](https://github.com/ionic-team/stencil)，看上去一目了然。\n\n```javascript\n@Component({\n  tag: \"my-component\",\n  styleUrl: \"my-component.scss\"\n})\nexport class MyComponent {\n  @Prop() first: string;\n  @Prop() last: string;\n  @State() isVisible: boolean = true;\n\n  render() {\n    return (\n      <p>\n        Hello, my name is {this.first} {this.last}\n      </p>\n    );\n  }\n}\n```\n\n### 多个装饰器\n\n如果同一个方法有多个装饰器，会像剥洋葱一样，先从外到内进入，然后由内向外执行。\n\n```javascript\nfunction dec(id) {\n  console.log(\"evaluated\", id);\n  return (target, property, descriptor) => console.log(\"executed\", id);\n}\n\nclass Example {\n  @dec(1)\n  @dec(2)\n  method() {}\n}\n// evaluated 1\n// evaluated 2\n// executed 2\n// executed 1\n```\n\n上面代码中，外层装饰器`@dec(1)`先进入，但是内层装饰器`@dec(2)`先执行。\n\n### 装饰器可用作类型检查\n\n除了注释，装饰器还能用来类型检查。所以，对于类来说，这项功能相当有用。从长期来看，它将是 JavaScript 代码静态分析的重要工具。\n\n## 为什么装饰器不能用于函数\n\n### 函数提升，类没有提升\n\n装饰器只能用于类和类的方法，不能用于函数，**因为存在函数提升**。\n\n```javascript\nvar counter = 0;\n\nvar add = function () {\n  counter++;\n};\n\n@add\nfunction foo() {\n}\n```\n\n上面的代码，意图是执行后`counter`等于 1，但是实际上结果是`counter`等于 0。因为函数提升，使得实际执行的代码是下面这样。\n\n```javascript\n@add\nfunction foo() {\n}\n\nvar counter;\nvar add;\n\ncounter = 0;\n\nadd = function () {\n  counter++;\n};\n```\n\n下面是另一个例子。\n\n```javascript\nvar readOnly = require(\"some-decorator\");\n\n@readOnly\nfunction foo() {\n}\n```\n\n上面代码也有问题，因为实际执行是下面这样。\n\n```javascript\nvar readOnly;\n\n@readOnly\nfunction foo() {\n}\n\nreadOnly = require(\"some-decorator\");\n\n```\n\n总之，由于存在函数提升，使得装饰器不能用于函数。类是不会提升的，所以就没有这方面的问题。\n\n### 函数一定要用装饰器\n\n另一方面，如果一定要装饰函数，可以采用高阶函数的形式直接执行。\n\n```javascript\nfunction doSomething(name) {\n  console.log(\"Hello, \" + name);\n}\n\nfunction loggingDecorator(wrapped) {\n  return function() {\n    console.log(\"Starting\");\n    const result = wrapped.apply(this, arguments);\n    console.log(\"Finished\");\n    return result;\n  };\n}\n\nconst wrapped = loggingDecorator(doSomething);\n```\n\n## 常见装饰器\n\n[core-decorators.js](https://github.com/jayphelps/core-decorators.js)是一个第三方模块，提供了几个常见的装饰器，通过它可以更好地理解装饰器。\n\n### 1. @autobind\n\n`autobind`装饰器使得方法中的`this`对象，绑定原始对象。\n\n```javascript\nimport { autobind } from \"core-decorators\";\n\nclass Person {\n  @autobind\n  getPerson() {\n    return this;\n  }\n}\n\nlet person = new Person();\nlet getPerson = person.getPerson;\n\ngetPerson() === person;\n// true\n```\n\n### 2. @readonly\n\n`readonly`装饰器使得属性或方法不可写。\n\n```javascript\nimport { readonly } from \"core-decorators\";\n\nclass Meal {\n  @readonly\n  entree = \"steak\";\n}\n\nvar dinner = new Meal();\ndinner.entree = \"salmon\";\n// Cannot assign to read only property 'entree' of [object Object]\n```\n\n### 3. @override\n\n`override`装饰器检查子类的方法，是否正确覆盖了父类的同名方法，如果不正确会报错。\n\n```javascript\nimport { override } from \"core-decorators\";\n\nclass Parent {\n  speak(first, second) {}\n}\n\nclass Child extends Parent {\n  @override\n  speak() {}\n  // SyntaxError: Child#speak() does not properly override Parent#speak(first, second)\n}\n\n// or\n\nclass Child extends Parent {\n  @override\n  speaks() {}\n  // SyntaxError: No descriptor matching Child#speaks() was found on the prototype chain.\n  //\n  //   Did you mean \"speak\"?\n}\n```\n\n### 4. @deprecate (别名@deprecated)\n\n`deprecate`或`deprecated`装饰器在控制台显示一条警告，表示该方法将废除。\n\n```javascript\nimport { deprecate } from \"core-decorators\";\n\nclass Person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate(\"We stopped facepalming\")\n  facepalmHard() {}\n\n  @deprecate(\"We stopped facepalming\", {\n    url: \"http://knowyourmeme.com/memes/facepalm\"\n  })\n  facepalmHarder() {}\n}\n\nlet person = new Person();\n\nperson.facepalm();\n// DEPRECATION Person#facepalm: This function will be removed in future versions.\n\nperson.facepalmHard();\n// DEPRECATION Person#facepalmHard: We stopped facepalming\n\nperson.facepalmHarder();\n// DEPRECATION Person#facepalmHarder: We stopped facepalming\n//\n//     See http://knowyourmeme.com/memes/facepalm for more details.\n//\n```\n\n### 5. @suppressWarnings\n\n`suppressWarnings`装饰器抑制`deprecated`装饰器导致的`console.warn()`调用。但是，异步代码发出的调用除外。\n\n```javascript\nimport { suppressWarnings } from \"core-decorators\";\n\nclass Person {\n  @deprecated\n  facepalm() {}\n\n  @suppressWarnings\n  facepalmWithoutWarning() {\n    this.facepalm();\n  }\n}\n\nlet person = new Person();\n\nperson.facepalmWithoutWarning();\n// no warning is logged\n```\n\n## 使用装饰器实现自动发布事件\n\n我们可以使用装饰器，使得对象的方法被调用时，自动发出一个事件。\n\n```javascript\nconst postal = require(\"postal/lib/postal.lodash\");\n\nexport default function publish(topic, channel) {\n  const channelName = channel || \"/\";\n  const msgChannel = postal.channel(channelName);\n  msgChannel.subscribe(topic, v => {\n    console.log(\"频道: \", channelName);\n    console.log(\"事件: \", topic);\n    console.log(\"数据: \", v);\n  });\n\n  return function(target, name, descriptor) {\n    const fn = descriptor.value;\n\n    descriptor.value = function() {\n      let value = fn.apply(this, arguments);\n      msgChannel.publish(topic, value);\n    };\n  };\n}\n```\n\n上面代码定义了一个名为`publish`的装饰器，它通过改写`descriptor.value`，使得原方法被调用时，会自动发出一个事件。它使用的事件“发布/订阅”库是[Postal.js](https://github.com/postaljs/postal.js)。\n\n它的用法如下。\n\n```javascript\n// index.js\nimport publish from \"./publish\";\n\nclass FooComponent {\n  @publish(\"foo.some.message\", \"component\")\n  someMethod() {\n    return { my: \"data\" };\n  }\n  @publish(\"foo.some.other\")\n  anotherMethod() {\n    // ...\n  }\n}\n\nlet foo = new FooComponent();\n\nfoo.someMethod();\nfoo.anotherMethod();\n```\n\n以后，只要调用`someMethod`或者`anotherMethod`，就会自动发出一个事件。\n\n```bash\n$ bash-node index.js\n频道:  component\n事件:  foo.some.message\n数据:  { my: 'data' }\n\n频道:  /\n事件:  foo.some.other\n数据:  undefined\n\n```\n\n## Mixin\n\n在装饰器的基础上，可以实现`Mixin`模式。所谓`Mixin`模式，就是**对象继承的一种替代方案**，中文译为“混入”（mix in），意为在一个对象之中混入另外一个对象的方法。\n\n请看下面的例子。\n\n```javascript\nconst Foo = {\n  foo() {\n    console.log(\"foo\");\n  }\n};\n\nclass MyClass {}\n\nObject.assign(MyClass.prototype, Foo);\n\nlet obj = new MyClass();\nobj.foo(); // 'foo'\n```\n\n上面代码之中，对象`Foo`有一个`foo`方法，通过`Object.assign`方法，可以将`foo`方法“混入”`MyClass`类，导致`MyClass`的实例`obj`对象都具有`foo`方法。这就是“混入”模式的一个简单实现。\n\n下面，我们部署一个通用脚本`mixins.js`，将 Mixin 写成一个装饰器。\n\n```javascript\nexport function mixins(...list) {\n  return function(target) {\n    Object.assign(target.prototype, ...list);\n  };\n}\n```\n\n然后，就可以使用上面这个装饰器，为类“混入”各种方法。\n\n```javascript\nimport { mixins } from \"./mixins\";\n\nconst Foo = {\n  foo() {\n    console.log(\"foo\");\n  }\n};\n\n@mixins(Foo)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo(); // \"foo\"\n```\n\n通过`mixins`这个装饰器，实现了在`MyClass`类上面“混入”`Foo`对象的`foo`方法。\n\n不过，上面的方法会改写`MyClass`类的`prototype`对象，如果不喜欢这一点，也可以通过类的继承实现 Mixin。\n\n```javascript\nclass MyClass extends MyBaseClass {\n  /* ... */\n}\n```\n\n上面代码中，`MyClass`继承了`MyBaseClass`。如果我们想在`MyClass`里面“混入”一个`foo`方法，一个办法是在`MyClass`和`MyBaseClass`之间插入一个混入类，这个类具有`foo`方法，并且继承了`MyBaseClass`的所有方法，然后`MyClass`再继承这个类。\n\n```javascript\nlet MyMixin = superclass =>\n  class extends superclass {\n    foo() {\n      console.log(\"foo from MyMixin\");\n    }\n  };\n```\n\n上面代码中，`MyMixin`是一个混入类生成器，接受`superclass`作为参数，然后返回一个继承`superclass`的子类，该子类包含一个`foo`方法。\n\n接着，目标类再去继承这个混入类，就达到了“混入”`foo`方法的目的。\n\n```javascript\nclass MyClass extends MyMixin(MyBaseClass) {\n  /* ... */\n}\n\nlet c = new MyClass();\nc.foo(); // \"foo from MyMixin\"\n```\n\n如果需要“混入”多个方法，就生成多个混入类。\n\n```javascript\nclass MyClass extends Mixin1(Mixin2(MyBaseClass)) {\n  /* ... */\n}\n```\n\n这种写法的一个好处，是可以调用`super`，因此可以避免在“混入”过程中覆盖父类的同名方法。\n\n```javascript\nlet Mixin1 = superclass =>\n  class extends superclass {\n    foo() {\n      console.log(\"foo from Mixin1\");\n      if (super.foo) super.foo();\n    }\n  };\n\nlet Mixin2 = superclass =>\n  class extends superclass {\n    foo() {\n      console.log(\"foo from Mixin2\");\n      if (super.foo) super.foo();\n    }\n  };\n\nclass S {\n  foo() {\n    console.log(\"foo from S\");\n  }\n}\n\nclass C extends Mixin1(Mixin2(S)) {\n  foo() {\n    console.log(\"foo from C\");\n    super.foo();\n  }\n}\n```\n\n上面代码中，每一次`混入`发生时，都调用了父类的`super.foo`方法，导致父类的同名方法没有被覆盖，行为被保留了下来。\n\n```javascript\nnew C().foo();\n// foo from C\n// foo from Mixin1\n// foo from Mixin2\n// foo from S\n```\n\n## Trait\n\nTrait 也是一种装饰器，效果与 Mixin 类似，但是提供更多功能，比如防止同名方法的冲突、排除混入某些方法、为混入的方法起别名等等。\n\n下面采用[traits-decorator](https://github.com/CocktailJS/traits-decorator)这个第三方模块作为例子。这个模块提供的`traits`装饰器，不仅可以接受对象，还可以接受 ES6 类作为参数。\n\n```javascript\nimport { traits } from \"traits-decorator\";\n\nclass TFoo {\n  foo() {\n    console.log(\"foo\");\n  }\n}\n\nconst TBar = {\n  bar() {\n    console.log(\"bar\");\n  }\n};\n\n@traits(TFoo, TBar)\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo(); // foo\nobj.bar(); // bar\n```\n\n上面代码中，通过`traits`装饰器，在`MyClass`类上面“混入”了`TFoo`类的`foo`方法和`TBar`对象的`bar`方法。\n\nTrait 不允许“混入”同名方法。\n\n```javascript\nimport { traits } from \"traits-decorator\";\n\nclass TFoo {\n  foo() {\n    console.log(\"foo\");\n  }\n}\n\nconst TBar = {\n  bar() {\n    console.log(\"bar\");\n  },\n  foo() {\n    console.log(\"foo\");\n  }\n};\n\n@traits(TFoo, TBar)\nclass MyClass {}\n// 报错\n// throw new Error('Method named: ' + methodName + ' is defined twice.');\n//        ^\n// Error: Method named: foo is defined twice.\n```\n\n上面代码中，`TFoo`和`TBar`都有`foo`方法，结果`traits`装饰器报错。\n\n一种解决方法是排除`TBar`的`foo`方法。\n\n```javascript\nimport { traits, excludes } from \"traits-decorator\";\n\nclass TFoo {\n  foo() {\n    console.log(\"foo\");\n  }\n}\n\nconst TBar = {\n  bar() {\n    console.log(\"bar\");\n  },\n  foo() {\n    console.log(\"foo\");\n  }\n};\n\n@traits(TFoo, TBar::excludes(\"foo\"))\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo(); // foo\nobj.bar(); // bar\n```\n\n上面代码使用绑定运算符（::）在`TBar`上排除`foo`方法，混入时就不会报错了。\n\n另一种方法是为`TBar`的`foo`方法起一个别名。\n\n```javascript\nimport { traits, alias } from \"traits-decorator\";\n\nclass TFoo {\n  foo() {\n    console.log(\"foo\");\n  }\n}\n\nconst TBar = {\n  bar() {\n    console.log(\"bar\");\n  },\n  foo() {\n    console.log(\"foo\");\n  }\n};\n\n@traits(TFoo, TBar::alias({ foo: \"aliasFoo\" }))\nclass MyClass {}\n\nlet obj = new MyClass();\nobj.foo(); // foo\nobj.aliasFoo(); // foo\nobj.bar(); // bar\n```\n\n上面代码为`TBar`的`foo`方法起了别名`aliasFoo`，于是`MyClass`也可以混入`TBar`的`foo`方法了。\n\n`alias`和`excludes`方法，可以结合起来使用。\n\n```javascript\n@traits(TExample::excludes(\"foo\", \"bar\")::alias({ baz: \"exampleBaz\" }))\nclass MyClass {}\n```\n\n上面代码排除了`TExample`的`foo`方法和`bar`方法，为`baz`方法起了别名`exampleBaz`。\n\n`as`方法则为上面的代码提供了另一种写法。\n\n```javascript\n@traits(\n  TExample::as({ excludes: [\"foo\", \"bar\"], alias: { baz: \"exampleBaz\" } })\n)\nclass MyClass {}\n```\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"QUIC","url":"/2019/08/16/QUIC/","content":"\n# QUIC\n\n## QUIC 概述\n\nQuic 全称 quick udp internet connection [1]，“快速 UDP 互联网连接”，（和英文 quick 谐音，简称“快”）是由 google 提出的使用 udp 进行多路并发传输的协议。\n\nQUIC 协议内置了 TLS 栈，实现了自己的[传输加密层](https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit)，而没有使用现有的 TLS 1.2。同时 QUIC 还包含了部分 HTTP/2 的实现，因此 QUIC 的地位看起来是这样的：\n\n<!-- more -->\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izr9eluaj315w0k0aaa.jpg)\n\n从图上可以看出，QUIC 底层通过 UDP 协议替代了 TCP，上层只需要一层用于和远程服务器交互的 HTTP/2 API。这是因为 QUIC 协议已经包含了多路复用和连接管理，HTTP API 只需要完成 HTTP 协议的解析即可。\n\n## QUIC 优势\n\n1. 减少了 TCP 三次握手及 TLS 握手时间。\n2. 改进的拥塞控制。\n3. 避免队头阻塞的多路复用。\n4. 连接迁移。\n5. 前向冗余纠错。（目前默认的冗余量是 10%，既每发送 10 个数据包，其冗余数据就可以重新构建一个丢失的数据包）\n\n## 为什么需要 QUIC\n\n1. 协议历史悠久导致中间设备僵化。\n\n   TCP 协议本来是支持端口、选项及特性的增加和修改。但是由于 TCP 协议和知名端口（80、443）及选项使用的历史太悠久，中间设备已经依赖于这些潜规则，所以对这些内容的修改很容易遭到中间环节的干扰而失败。\n\n2. 依赖于操作系统的实现导致协议本身僵化。\n\n   TCP 是由操作系统在内核西方栈层面实现的，应用程序只能使用，不能直接修改。虽然应用程序的更新迭代非常快速和简单。但是 TCP 的迭代却非常缓慢，原因就是操作系统升级很麻烦。服务端系统不依赖用户升级，但是由于操作系统升级涉及到底层软件和运行库的更新，所以也比较保守和缓慢。\n\n3. 建立连接的握手延迟大。\n\n   不管是 HTTP1.0/1.1 还是 HTTPS，HTTP2，都使用了 TCP 进行传输。HTTPS 和 HTTP2 还需要使用 TLS 协议来进行安全传输。这就出现了两个握手延迟：\n\n   - TCP 三次握手导致的 TCP 连接建立的延迟。\n   - TLS 完全握手需要至少 2 个 RTT 才能建立，简化握手需要 1 个 RTT 的握手延迟。\n\n   对于很多短连接场景，这样的握手延迟影响很大，且无法消除。\n\n4. 队头阻塞。\n\n   队头阻塞主要是 TCP 协议的可靠性机制引入的。TCP 使用序列号来标识数据的顺序，数据必须按照顺序处理，如果前面的数据丢失，后面的数据就算到达了也不会通知应用层来处理。\n\n   另外 TLS 协议层面也有一个队头阻塞，因为 TLS 协议都是按照 record 来处理数据的，如果一个 record 中丢失了数据，也会导致整个 record 无法正确处理。\n\n**QUIC 协议选择了 UDP，因为 UDP 本身没有连接的概念，不需要三次握手，优化了连接建立的握手延迟，同时在应用程序层面实现了 TCP 的可靠性，TLS 的安全性和 HTTP2 的并发性，只需要用户端和服务端的应用程序支持 QUIC 协议，完全避开了操作系统和中间设备的限制。**\n\n## QUIC 详解\n\n### 1. QUIC 核心特性连接建立延时低\n\n**0RTT 建连**可以说是 QUIC 相比 HTTP2 最大的性能优势。那什么是 0RTT 建连呢？这里面有两层含义。\n\n1. 传输层 0RTT 就能建立连接。\n2. 加密层 0RTT 就能建立加密连接。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izr8c4vjj314a0n0gpa.jpg)\n\n比如上图左边是 HTTPS 的一次完全握手的建连过程，需要 3 个 RTT。就算是 Session Resumption[14]，也需要至少 2 个 RTT。\n\n而 QUIC 呢？由于建立在 UDP 的基础上，同时又实现了 0RTT 的安全握手，所以在大部分情况下，只需要 0 个 RTT 就能实现数据发送，在实现前向加密的基础上，并且 0RTT 的成功率相比 TLS 的 Sesison Ticket[13] 要高很多。\n\n### 2. 改进的拥塞控制\n\nTCP 的拥塞控制实际上包含了四个算法：慢启动，拥塞避免，快速重传，快速恢复。\n\nQUIC 协议当前默认使用了 TCP 协议的 Cubic 拥塞控制算法，同时也支持 CubicBytes, Reno, RenoBytes, BBR, PCC 等拥塞控制算法。\n\n从拥塞算法本身来看，QUIC 只是按照 TCP 协议重新实现了一遍，那么 QUIC 协议到底改进在哪些方面呢？主要有如下几点：\n\n- **可插拔**\n\n什么叫可插拔呢？就是能够非常灵活地生效，变更和停止。体现在如下方面：\n\n1. 应用程序层面就能实现不同的拥塞控制算法，不需要操作系统，不需要内核支持。这是一个飞跃，因为传统的 TCP 拥塞控制，必须要端到端的网络协议栈支持，才能实现控制效果。而内核和操作系统的部署成本非常高，升级周期很长，这在产品快速迭代，网络爆炸式增长的今天，显然有点满足不了需求。\n2. 即使是单个应用程序的不同连接也能支持配置不同的拥塞控制。就算是一台服务器，接入的用户网络环境也千差万别，结合大数据及人工智能处理，我们能为各个用户提供不同的但又更加精准更加有效的拥塞控制。比如 BBR 适合，Cubic 适合。\n3. 应用程序不需要停机和升级就能实现拥塞控制的变更，我们在服务端只需要修改一下配置，reload 一下，完全不需要停止服务就能实现拥塞控制的切换。\n\nSTGW 在配置层面进行了优化，我们可以针对不同业务，不同网络制式，甚至不同的 RTT，使用不同的拥塞控制算法。\n\n- **单调递增的 Packet Number**\n\nTCP 为了保证可靠性，使用了基于字节序号的 Sequence Number 及 Ack 来确认消息的有序到达。\n\nQUIC 同样是一个可靠的协议，它使用 Packet Number 代替了 TCP 的 sequence number，并且每个 Packet Number 都严格递增，也就是说就算 Packet N 丢失了，重传的 Packet N 的 Packet Number 已经不是 N，而是一个比 N 大的值。而 TCP 呢，重传 segment 的 sequence number 和原始的 segment 的 Sequence Number 保持不变，也正是由于这个特性，引入了 Tcp 重传的歧义问题。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izrp5123j30k008rjro.jpg)\n\n​ 图 2 Tcp 重传歧义性\n\n如上图所示，超时事件 RTO 发生后，客户端发起重传，然后接收到了 Ack 数据。由于序列号一样，这个 Ack 数据到底是原始请求的响应还是重传请求的响应呢？不好判断。\n\n如果算成原始请求的响应，但实际上是重传请求的响应（上图左），会导致采样 RTT 变大。如果算成重传请求的响应，但实际上是原始请求的响应，又很容易导致采样 RTT 过小。\n\n由于 Quic 重传的 Packet 和原始 Packet 的 Pakcet Number 是严格递增的，所以很容易就解决了这个问题。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izrs95mpj30k007xjrn.jpg)\n\n​ 图 3 Quic 重传没有歧义性\n\n如上图所示，RTO 发生后，根据重传的 Packet Number 就能确定精确的 RTT 计算。如果 Ack 的 Packet Number 是 N+M，就根据重传请求计算采样 RTT。如果 Ack 的 Pakcet Number 是 N，就根据原始请求的时间计算采样 RTT，没有歧义性。\n\n但是单纯依靠严格递增的 Packet Number 肯定是无法保证数据的顺序性和可靠性。QUIC 又引入了一个 Stream Offset 的概念。\n\n即一个 Stream 可以经过多个 Packet 传输，Packet Number 严格递增，没有依赖。但是 Packet 里的 Payload 如果是 Stream 的话，就需要依靠 Stream 的 Offset 来保证应用数据的顺序。如错误! 未找到引用源。所示，发送端先后发送了 Pakcet N 和 Pakcet N+1，Stream 的 Offset 分别是 x 和 x+y。\n\n假设 Packet N 丢失了，发起重传，重传的 Packet Number 是 N+2，但是它的 Stream 的 Offset 依然是 x，这样就算 Packet N + 2 是后到的，依然可以将 Stream x 和 Stream x+y 按照顺序组织起来，交给应用程序处理。\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izrw4o31j30k005smxc.jpg)\n\n​ 图 4 Stream Offset 保证有序性\n\n- **不允许 Reneging**\n\n什么叫 Reneging 呢？就是接收方丢弃已经接收并且上报给 SACK 选项的内容。TCP 协议不鼓励这种行为，但是协议层面允许这样的行为。主要是考虑到服务器资源有限，比如 Buffer 溢出，内存不够等情况。\n\nReneging 对数据重传会产生很大的干扰。因为 Sack 都已经表明接收到了，但是接收端事实上丢弃了该数据。\n\nQUIC 在协议层面禁止 Reneging，一个 Packet 只要被 Ack，就认为它一定被正确接收，减少了这种干扰。\n\n- **更多的 Ack 块**\n\nTCP 的 Sack 选项能够告诉发送方已经接收到的连续 Segment 的范围，方便发送方进行选择性重传。\n\n由于 TCP 头部最大只有 60 个字节，标准头部占用了 20 字节，所以 Tcp Option 最大长度只有 40 字节，再加上 Tcp Timestamp option 占用了 10 个字节 [25]，所以留给 Sack 选项的只有 30 个字节。\n\n每一个 Sack Block 的长度是 8 个，加上 Sack Option 头部 2 个字节，也就意味着 Tcp Sack Option 最大只能提供 3 个 Block。\n\n但是 Quic Ack Frame 可以同时提供 256 个 Ack Block，在丢包率比较高的网络下，更多的 Sack Block 可以提升网络的恢复速度，减少重传量。\n\n- **Ack Delay 时间**\n\nTcp 的 Timestamp 选项存在一个问题，它只是回显了发送方的时间戳，但是没有计算接收端接收到 segment 到发送 Ack 该 segment 的时间。这个时间可以简称为 Ack Delay。\n\n这样就会导致 RTT 计算误差。如下图：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izrzqtwlj30k00f4wf5.jpg)\n\n可以认为 TCP 的 RTT 计算：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izs42dncj308d015743.jpg)\n\n而 Quic 计算如下：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izs6x1lbj30a70153yc.jpg)\n\n当然 RTT 的具体计算没有这么简单，需要采样，参考历史数值进行平滑计算，参考如下公式 [9]。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izs9tffbj308d01vwed.jpg)\n\n### 3.基于 stream 和 connecton 级别的流量控制\n\nQUIC 的流量控制类似 HTTP2，即在 Connection 和 Stream 级别提供了两种流量控制。为什么需要两类流量控制呢？主要是因为 QUIC 支持多路复用。\n\n1. Stream 可以认为就是一条 HTTP 请求。\n2. Connection 可以类比一条 TCP 连接。多路复用意味着在一条 Connetion 上会同时存在多条 Stream。既需要对单个 Stream 进行控制，又需要针对所有 Stream 进行总体控制。\n\nQUIC 实现流量控制的原理比较简单：\n\n通过 window_update 帧告诉对端自己可以接收的字节数，这样发送方就不会发送超过这个数量的数据。\n\n通过 BlockFrame 告诉对端由于流量控制被阻塞了，无法发送数据。\n\nQUIC 的流量控制和 TCP 有点区别，TCP 为了保证可靠性，窗口左边沿向右滑动时的长度取决于已经确认的字节数。如果中间出现丢包，就算接收到了更大序号的 Segment，窗口也无法超过这个序列号。\n\n但 QUIC 不同，就算此前有些 packet 没有接收到，它的滑动只取决于接收到的最大偏移字节数。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsddv9lj30k0087q3a.jpg)\n\n​ 图 5 Quic Flow Control\n\n针对 Stream：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsh7d39j30bz011glh.jpg)\n\n针对 Connection：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsk0cpyj30gy011a9z.jpg)\n\n同样地，STGW 也在连接和 Stream 级别设置了不同的窗口数。\n\n最重要的是，我们可以在内存不足或者上游处理性能出现问题时，通过流量控制来限制传输速率，保障服务可用性。\n\n### 4.没有队头阻塞的多路复用\n\nQUIC 的多路复用和 HTTP2 类似。在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (stream)。但是 QUIC 的多路复用相比 HTTP2 有一个很大的优势。\n\nQUIC 一个连接上的多个 stream 之间没有依赖。这样假如 stream2 丢了一个 udp packet，也只会影响 stream2 的处理。不会影响 stream2 之前及之后的 stream 的处理。\n\n这也就在很大程度上缓解甚至消除了队头阻塞的影响。\n\n多路复用是 HTTP2 最强大的特性，能够将多条请求在一条 TCP 连接上同时发出去。但也恶化了 TCP 的一个问题，队头阻塞，如下图示：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsn9t0ej30k007gq3a.jpg)\n\n​ 图 6 HTTP2 队头阻塞\n\nHTTP2 在一个 TCP 连接上同时发送 4 个 Stream。其中 Stream1 已经正确到达，并被应用层读取。但是 Stream2 的第三个 tcp segment 丢失了，TCP 为了保证数据的可靠性，需要发送端重传第 3 个 segment 才能通知应用层读取接下去的数据，虽然这个时候 Stream3 和 Stream4 的全部数据已经到达了接收端，但都被阻塞住了。\n\n不仅如此，由于 HTTP2 强制使用 TLS，还存在一个 TLS 协议层面的队头阻塞 [12]。\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsr1djhj30k00ctaac.jpg)\n\n​ 图 7 TLS 队头阻塞\n\nRecord 是 TLS 协议处理的最小单位，最大不能超过 16K，一些服务器比如 Nginx 默认的大小就是 16K。由于一个 record 必须经过数据一致性校验才能进行加解密，所以一个 16K 的 record，就算丢了一个字节，也会导致已经接收到的 15.99K 数据无法处理，因为它不完整。\n\n那 QUIC 多路复用为什么能避免上述问题呢？\n\n1. QUIC 最基本的传输单元是 Packet，不会超过 MTU 的大小，整个加密和认证过程都是基于 Packet 的，不会跨越多个 Packet。这样就能避免 TLS 协议存在的队头阻塞。\n2. Stream 之间相互独立，比如 Stream2 丢了一个 Pakcet，不会影响 Stream3 和 Stream4。不存在 TCP 队头阻塞。（QUIC 协议直接通过底层使用 UDP 协议天然的避免了该问题。由于 UDP 协议没有严格的顺序，当一个数据包遇到问题需要重传时，只会影响该数据包对应的资源，其他独立的资源（如其他 css、js 文件）不会受到影响）\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsvoeyqj30k007gdg7.jpg)\n\n​ 图 8 QUIC 多路复用时没有队头阻塞的问题\n\n当然，并不是所有的 QUIC 数据都不会受到队头阻塞的影响，比如 QUIC 当前也是使用 Hpack 压缩算法 [10]，由于算法的限制，丢失一个头部数据时，可能遇到队头阻塞。\n\n总体来说，QUIC 在传输大量数据时，比如视频，受到队头阻塞的影响很小。\n\n### 5.加密认证的报文\n\nTCP 协议头部没有经过任何加密和认证，所以在传输过程中很容易被中间网络设备篡改，注入和窃听。比如修改序列号、滑动窗口。这些行为有可能是出于性能优化，也有可能是主动攻击。\n\n但是 QUIC 的 packet 可以说是武装到了牙齿。除了个别报文比如 PUBLIC_RESET 和 CHLO，所有报文头部都是经过认证的，报文 Body 都是经过加密的。\n\n这样只要对 QUIC 报文任何修改，接收端都能够及时发现，有效地降低了安全风险。\n\n如下图所示，红色部分是 Stream Frame 的报文头部，有认证。绿色部分是报文内容，全部经过加密。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izsyv3ovj30i3091dgf.jpg)\n\n### 6.连接迁移\n\n一条 TCP 连接是由四元组标识的（源 IP，源端口，目的 IP，目的端口）。什么叫连接迁移呢？就是当其中任何一个元素发生变化时，这条连接依然维持着，能够保持业务逻辑不中断。当然这里面主要关注的是客户端的变化，因为客户端不可控并且网络环境经常发生变化，而服务端的 IP 和端口一般都是固定的。\n\n比如大家使用手机在 WIFI 和 4G 移动网络切换时，客户端的 IP 肯定会发生变化，需要重新建立和服务端的 TCP 连接。\n\n又比如大家使用公共 NAT 出口时，有些连接竞争时需要重新绑定端口，导致客户端的端口发生变化，同样需要重新建立 TCP 连接。\n\n针对 TCP 的连接变化，MPTCP 其实已经有了解决方案，但是由于 MPTCP 需要操作系统及网络协议栈支持，部署阻力非常大，目前并不适用。\n\n所以从 TCP 连接的角度来讲，这个问题是无解的。\n\n那 QUIC 是如何做到连接迁移呢？很简单，任何一条 QUIC 连接不再以 IP 及端口四元组标识，而是以一个 64 位的随机数作为 ID 来标识，这样就算 IP 或者端口发生变化时，只要 ID 不变，这条连接依然维持着，上层业务逻辑感知不到变化，不会中断，也就不需要重连。\n\n由于这个 ID 是客户端随机产生的，并且长度有 64 位，所以冲突概率非常低。\n\n### 7.其他亮点\n\n此外，QUIC 还能实现前向冗余纠错，在重要的包比如握手消息发生丢失时，能够根据冗余信息还原出握手消息。\n\nQUIC 还能实现证书压缩，减少证书传输量，针对包头进行验证等。\n\n## QUIC 协议实践\n\nChrome 浏览器从 2014 年开始已经实验性的支持了 QUIC 协议。可以通过在 Chrome 浏览器中输入`chrome://net-internals/#quic`查看是否已经支持 QUIC 协议。如果还未支持，可以在`chrome://flags/#enable-quic`中进行开启。\n\n开始 Chrome 浏览器对 QUIC 协议的支持之后，可以在`chrome://net-internals/#quic`中查看到当前浏览器的 QUIC 一些连接。当然目前只有 Google 服务才支持 QUIC 协议（如 YouTube、 Google.com）。\n\n### 1. 关于防火墙\n\n通常系统管理员会关注防火墙的 TCP 规则，而忽略 UDP 规则。如果要在防火墙之后使用 QUIC 协议，除了传统 web 服务需要开放的`80/TCP`、`443/TCP`之外，针对 QUIC 还需要开放`443/UDP`的访问。\n\n### 2.服务端使用 QUIC 协议\n\n目前支持 QUIC 协议的 web 服务只有 0.9 版本以后的[Caddy](https://github.com/mholt/caddy/wiki/QUIC)。其他常用 web 服务如 nginx、apache 等都未开始支持。curl 表达了对 QUIC 协议[支持的兴趣](https://daniel.haxx.se/blog/2016/07/20/curl-wants-to-quic/)。\n","tags":["浏览器","TCP/IP"],"categories":["浏览器"]},{"title":"TCP","url":"/2019/08/11/TCP/","content":"\n# TCP\n\n- TCP 在网络 OSI 的七层模型中的第四层——Transport 层（第四层的数据叫 Segment）\n- IP 在第三层——Network 层（在第三层上的数据叫 Packet）\n- ARP 在第二层——Data Link 层（在第二层上的数据叫 Frame）\n\n我们程序的数据首先会打到 TCP 的 Segment 中，然后 TCP 的 Segment 会打到 IP 的 Packet 中，然后再打到以太网 Ethernet 的 Frame 中，传到对端后，各个层解析自己的协议，然后把数据交给更高层的协议处理。\n\n<!-- more -->\n\n## TCP 头格式\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izttyfinj30m8090jsz.jpg)\n\n你需要注意这么几点：\n\n- TCP 的包是没有 IP 地址的，那是 IP 层上的事。但是有源端口和目标端口。\n- 一个 TCP 连接需要四个元组来表示是同一个连接（src_ip, src_port, dst_ip, dst_port）准确说是五元组，还有一个是协议。但因为这里只是说 TCP 协议，所以，这里我只说四元组。\n- 注意上图中的四个非常重要的东西：\n  - **Sequence Number**是包的序号，**用来解决网络包乱序（reordering）问题。**\n  - **Acknowledgement Number**就是 ACK——用于确认收到，**用来解决不丢包的问题**。\n  - **Window 又叫 Advertised-Window**，也就是著名的滑动窗口（Sliding Window），**用于解决流控的**。\n  - **TCP Flag** ，也就是包的类型，**主要是用于操控 TCP 的状态机的**。\n\n## TCP 状态机\n\n其实，**网络上的传输是没有连接的，包括 TCP 也是一样的**。而 TCP 所谓的“连接”，其实只不过是在通讯的双方维护一个“连接状态”，让它看上去好像有连接一样。所以，TCP 的状态变换是非常重要的。\n\n“**TCP 协议的状态机**”和 “**TCP 建链接**”、“**TCP 断链接**”、“**传数据**” 的对照图\n\n<img src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcpfsm.png\" style=\"zoom:70%;display:inline\" /><img src=\"https://coolshell.cn/wp-content/uploads/2014/05/tcp_open_close.jpg\" style=\"zoom:40%;display:inline\" />\n\n很多人会问，为什么建链接要 3 次握手，断链接需要 4 次挥手？\n\n- **对于建链接的 3 次握手，**主要是要初始化 Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的 Sequence Number（缩写为 ISN：Inital Sequence Number）——所以叫 SYN，全称 Synchronize Sequence Numbers。也就上图中的 x 和 y。这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序（TCP 会用这个序号来拼接数据）。\n- **对于 4 次挥手，**其实你仔细看是 2 次，因为 TCP 是全双工的，所以，发送方和接收方都需要 Fin 和 Ack。只不过，有一方是被动的，所以看上去就成了所谓的 4 次挥手。如果两边同时断连接，那就会就进入到 CLOSING 状态，然后到达 TIME_WAIT 状态。下图是双方同时断连接的示意图（你同样可以对照着 TCP 状态机看）：\n\n## 数据传输中的 Sequence Number\n\n下图是从 Wireshark 中截了个我在访问 coolshell.cn 时的有数据传输的图给你看一下，SeqNum 是怎么变的。（使用 Wireshark 菜单中的 Statistics ->Flow Graph… ）\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5nx0rq0j30al0a1jsq.jpg)\n\n你可以看到，**SeqNum 的增加是和传输的字节数相关的**。上图中，三次握手后，来了两个 Len:1440 的包，而第二个包的 SeqNum 就成了 1441。然后第一个 ACK 回的是 1441，表示第一个 1440 收到了。\n\n**注意**：如果你用 Wireshark 抓包程序看 3 次握手，你会发现 SeqNum 总是为 0，不是这样的，Wireshark 为了显示更友好，使用了 Relative SeqNum——相对序号，你只要在右键菜单中的 protocol preference 中取消掉就可以看到“Absolute SeqNum”了\n\n## TCP 重传机制\n\nTCP 要保证所有的数据包都可以到达，所以，必需要有重传机制。\n\n注意，接收端给发送端的 Ack 确认只会确认最后一个连续的包，比如，发送端发了 1,2,3,4,5 一共五份数据，接收端收到了 1，2，于是回 ack 3，然后收到了 4（注意此时 3 没收到），此时的 TCP 会怎么办？我们要知道，因为正如前面所说的，**SeqNum 和 Ack 是以字节数为单位，所以 ack 的时候，不能跳着确认，只能确认最大的连续收到的包**，不然，发送端就以为之前的都收到了。\n\n### 超时重传机制\n\n一种是不回 ack，死等 3，当发送方发现收不到 3 的 ack 超时后，会重传 3。一旦接收方收到 3 后，会 ack 回 4——意味着 3 和 4 都收到了。\n\n但是，这种方式会有比较严重的问题，那就是因为要死等 3，所以会导致 4 和 5 即便已经收到了，而发送方也完全不知道发生了什么事，因为没有收到 Ack，所以，发送方可能会悲观地认为也丢了，所以有可能也会导致 4 和 5 的重传。\n\n对此有两种选择：\n\n- 一种是仅重传 timeout 的包。也就是第 3 份数据。\n- 另一种是重传 timeout 后所有的数据，也就是第 3，4，5 这三份数据。\n\n这两种方式有好也有不好。第一种会节省带宽，但是慢，第二种会快一点，但是会浪费带宽，也可能会有无用功。但总体来说都不好。因为都在等 timeout，timeout 可能会很长（在下篇会说 TCP 是怎么动态地计算出 timeout 的）\n\n### 快速重传机制\n\n于是，TCP 引入了一种叫**Fast Retransmit** 的算法，**不以时间驱动，而以数据驱动重传**。也就是说，如果，包没有连续到达，就 ack 最后那个可能被丢了的包，如果发送方连续收到 3 次相同的 ack，就重传。Fast Retransmit 的好处是不用等 timeout 了再重传。\n\n比如：如果发送方发出了 1，2，3，4，5 份数据，第一份先到送了，于是就 ack 回 2，结果 2 因为某些原因没收到，3 到达了，于是还是 ack 回 2，后面的 4 和 5 都到了，但是还是 ack 回 2，因为 2 还是没有收到，于是发送端收到了三个 ack=2 的确认，知道了 2 还没有到，于是就马上重转 2。然后，接收端收到了 2，此时因为 3，4，5 都收到了，于是 ack 回 6。示意图如下：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5o1shzuj30ci0833yx.jpg)\n\nFast Retransmit 只解决了一个问题，就是 timeout 的问题，它依然面临一个艰难的选择，就是，是重传之前的一个还是重传所有的问题。对于上面的示例来说，是重传#2 呢还是重传#2，#3，#4，#5 呢？因为发送端并不清楚这连续的 3 个 ack(2)是谁传回来的？也许发送端发了 20 份数据，是#6，#10，#20 传来的呢。这样，发送端很有可能要重传从 2 到 20 的这堆数据（这就是某些 TCP 的实际的实现）。可见，这是一把双刃剑。\n\n### SACK 方法\n\n另外一种更好的方式叫：**Selective Acknowledgment (SACK)**（参看[RFC 2018](http://tools.ietf.org/html/rfc2018)），这种方式需要在 TCP 头里加一个 SACK 的东西，ACK 还是 Fast Retransmit 的 ACK，SACK 则是汇报收到的数据碎版。参看下图：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5o7gj8sj30sg0g1ta5.jpg)\n\n这样，在发送端就可以根据回传的 SACK 来知道哪些数据到了，哪些没有到。于是就优化了 Fast Retransmit 的算法。当然，这个协议需要两边都支持。在 Linux 下，可以通过**tcp_sack**参数打开这个功能（Linux 2.4 后默认打开）。\n\n这里还需要注意一个问题——**接收方 Reneging，所谓 Reneging 的意思就是接收方有权把已经报给发送端 SACK 里的数据给丢了**。这样干是不被鼓励的，因为这个事会把问题复杂化了，但是，接收方这么做可能会有些极端情况，比如要把内存给别的更重要的东西。**所以，发送方也不能完全依赖 SACK，还是要依赖 ACK，并维护 Time-Out，如果后续的 ACK 没有增长，那么还是要把 SACK 的东西重传，另外，接收端这边永远不能把 SACK 的包标记为 Ack。**\n\n注意：SACK 会消费发送方的资源，试想，如果一个攻击者给数据发送方发一堆 SACK 的选项，这会导致发送方开始要重传甚至遍历已经发出的数据，这会消耗很多发送端的资源。\n\n### Duplicate SACK – 重复收到数据的问题\n\nDuplicate SACK 又称 D-SACK，**其主要使用了 SACK 来告诉发送方有哪些数据被重复接收了**。[RFC-2883 ](http://www.ietf.org/rfc/rfc2883.txt)里有详细描述和示例。下面举几个例子（来源于[RFC-2883](http://www.ietf.org/rfc/rfc2883.txt)）\n\nD-SACK 使用了 SACK 的第一个段来做标志，\n\n- 如果 SACK 的第一个段的范围被 ACK 所覆盖，那么就是 D-SACK\n- 如果 SACK 的第一个段的范围被 SACK 的第二个段覆盖，那么就是 D-SACK\n\n#### 示例一：ACK 丢包\n\n下面的示例中，丢了两个 ACK，所以，发送端重传了第一个数据包（3000-3499），于是接收端发现重复收到，于是回了一个 SACK=3000-3500，因为 ACK 都到了 4000 意味着收到了 4000 之前的所有数据，所以这个 SACK 就是 D-SACK——旨在告诉发送端我收到了重复的数据，而且我们的发送端还知道，数据包没有丢，丢的是 ACK 包。\n\n```json\nTransmitted  Received    ACK Sent\nSegment      Segment     (Including SACK Blocks)\n3000-3499    3000-3499   3500 (ACK dropped)\n3500-3999    3500-3999   4000 (ACK dropped)\n3000-3499    3000-3499   4000, SACK=3000-3500\n                                    ---------\n```\n\n#### 示例二，网络延误\n\n下面的示例中，网络包（1000-1499）被网络给延误了，导致发送方没有收到 ACK，而后面到达的三个包触发了“Fast Retransmit 算法”，所以重传，但重传时，被延误的包又到了，所以，回了一个 SACK=1000-1500，因为 ACK 已到了 3000，所以，这个 SACK 是 D-SACK——标识收到了重复的包。\n\n这个案例下，发送端知道之前因为“Fast Retransmit 算法”触发的重传不是因为发出去的包丢了，也不是因为回应的 ACK 包丢了，而是因为网络延时了。\n\n```json\nTransmitted    Received    ACK Sent\nSegment        Segment     (Including SACK Blocks)\n500-999        500-999     1000\n1000-1499      (delayed)\n1500-1999      1500-1999   1000, SACK=1500-2000\n2000-2499      2000-2499   1000, SACK=1500-2500\n2500-2999      2500-2999   1000, SACK=1500-3000\n1000-1499      1000-1499   3000\n               1000-1499   3000, SACK=1000-1500\n                                      ---------\n```\n\n可见，引入了 D-SACK，有这么几个好处：\n\n1）可以让发送方知道，是发出去的包丢了，还是回来的 ACK 包丢了。\n\n2）是不是自己的 timeout 太小了，导致重传。\n\n3）网络上出现了先发的包后到的情况（又称 reordering）\n\n4）网络上是不是把我的数据包给复制了。\n\n**知道这些东西可以很好得帮助 TCP 了解网络情况，从而可以更好的做网络上的流控**。\n\nLinux 下的 tcp_dsack 参数用于开启这个功能（Linux 2.4 后默认打开）\n\n## TCP 的 RTT 算法\n\n从前面的 TCP 重传机制我们知道 Timeout 的设置对于重传非常重要。\n\n- 设长了，重发就慢，丢了老半天才重发，没有效率，性能差；\n- 设短了，会导致可能并没有丢就重发。于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。\n\n而且，这个超时时间在不同的网络的情况下，根本没有办法设置一个死的值。只能动态地设置。 为了动态地设置，TCP 引入了 RTT——Round Trip Time，也就是一个数据包从发出去到回来的时间。这样发送端就大约知道需要多少的时间，从而可以方便地设置 Timeout——RTO（Retransmission TimeOut），以让我们的重传机制更高效。 听起来似乎很简单，好像就是在发送端发包时记下 t0，然后接收端再把这个 ack 回来时再记一个 t1，于是 RTT = t1 – t0。没那么简单，这只是一个采样，不能代表普遍情况。\n\n### 经典算法\n\n[RFC793](http://tools.ietf.org/html/rfc793) 中定义的经典算法是这样的：\n\n1）首先，先采样 RTT，记下最近好几次的 RTT 值。\n\n2）然后做平滑计算 SRTT（ Smoothed RTT）。公式为：（其中的 α 取值在 0.8 到 0.9 之间，这个算法英文叫 Exponential weighted moving average，中文叫：加权移动平均）\n\n**SRTT = ( α \\* SRTT ) + ((1- α) \\* RTT)**\n\n3）开始计算 RTO。公式如下：\n\n**RTO = min [ UBOUND, max [ LBOUND, (β \\* SRTT) ] ]**\n\n其中：\n\n- UBOUND 是最大的 timeout 时间，上限值\n- LBOUND 是最小的 timeout 时间，下限值\n- β 值一般在 1.3 到 2.0 之间。\n\n### Karn / Partridge 算法\n\n但是上面的这个算法在重传的时候会出有一个终极问题——你是用第一次发数据的时间和 ack 回来的时间做 RTT 样本值，还是用重传的时间和 ACK 回来的时间做 RTT 样本值？\n\n这个问题无论你选那头都是按下葫芦起了瓢。 如下图所示：\n\n- 情况（a）是 ack 没回来，所以重传。如果你计算第一次发送和 ACK 的时间，那么，明显算大了。\n- 情况（b）是 ack 回来慢了，但是导致了重传，但刚重传不一会儿，之前 ACK 就回来了。如果你是算重传的时间和 ACK 回来的时间的差，就会算短了。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5odttngj30kp098mxm.jpg)\n\n所以 1987 年的时候，搞了一个叫[Karn / Partridge Algorithm](http://en.wikipedia.org/wiki/Karn's_Algorithm)，这个算法的最大特点是——**忽略重传，不把重传的 RTT 做采样**（你看，你不需要去解决不存在的问题）。\n\n但是，这样一来，又会引发一个大 BUG——**如果在某一时间，网络闪动，突然变慢了，产生了比较大的延时，这个延时导致要重转所有的包（因为之前的 RTO 很小），于是，因为重转的不算，所以，RTO 就不会被更新，这是一个灾难**。 于是 Karn 算法用了一个取巧的方式——只要一发生重传，就对现有的 RTO 值翻倍（这就是所谓的 Exponential backoff），很明显，这种死规矩对于一个需要估计比较准确的 RTT 也不靠谱。\n\n### Jacobson / Karels 算法\n\n前面两种算法用的都是“加权移动平均”，这种方法最大的毛病就是如果 RTT 有一个大的波动的话，很难被发现，因为被平滑掉了。所以，1988 年，又有人推出来了一个新的算法，这个算法叫 Jacobson / Karels Algorithm（参看[RFC6289](http://tools.ietf.org/html/rfc6298)）。这个算法引入了最新的 RTT 的采样和平滑过的 SRTT 的差距做因子来计算。 公式如下：（其中的 DevRTT 是 Deviation RTT 的意思）\n\n**SRTT** **= S\\*\\***RTT\\*\\* **+ α** **(\\*\\***RTT\\*\\* **– S\\*\\***RTT\\***\\*)** —— 计算平滑 RTT\n\n**DevRTT** **= (1-β\\*\\***)\\*\\***\\*DevRTT** **+ β\\*\\*\\***(|\\***\\*RTT-SRTT\\*\\***|)\\*\\* ——计算平滑 RTT 和真实的差距（加权移动平均）\n\n**RTO= µ \\* SRTT + ∂ \\*DevRTT** —— 神一样的公式\n\n（其中：在 Linux 下，α = 0.125，β = 0.25， μ = 1，∂ = 4 ——这就是算法中的“调得一手好参数”，nobody knows why, it just works…） 最后的这个算法在被用在今天的 TCP 协议中（Linux 的源代码在：[tcp_rtt_estimator](http://lxr.free-electrons.com/source/net/ipv4/tcp_input.c?v=2.6.32#L609)）。\n\n## TCP 滑动窗口\n\n需要说明一下，如果你不了解 TCP 的滑动窗口这个事，你等于不了解 TCP 协议。我们都知道，**TCP 必需要解决的可靠传输以及包乱序（reordering）的问题**，所以，TCP 必需要知道网络实际的数据处理带宽或是数据处理速度，这样才不会引起网络拥塞，导致丢包。\n\n所以，TCP 引入了一些技术和设计来做网络流控，Sliding Window 是其中一个技术。 前面我们说过，**TCP 头里有一个字段叫 Window，又叫 Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据**。**于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来**。 为了说明滑动窗口，我们需要先看一下 TCP 缓冲区的一些数据结构：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5oinwowj30p60a13z5.jpg)\n\n上图中，我们可以看到：\n\n- 接收端 LastByteRead 指向了 TCP 缓冲区中读到的位置，NextByteExpected 指向的地方是收到的连续包的最后一个位置，LastByteRcved 指向的是收到的包的最后一个位置，我们可以看到中间有些数据还没有到达，所以有数据空白区。\n- 发送端的 LastByteAcked 指向了被接收端 Ack 过的位置（表示成功发送确认），LastByteSent 表示发出去了，但还没有收到成功确认的 Ack，LastByteWritten 指向的是上层应用正在写的地方。\n\n于是：\n\n- 接收端在给发送端回 ACK 中会汇报自己的 AdvertisedWindow = MaxRcvBuffer – LastByteRcvd – 1;\n- 而发送方会根据这个窗口来控制发送数据的大小，以保证接收方可以处理。\n\n下面我们来看一下发送方的滑动窗口示意图：\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5omcs7ej30ic07i750.jpg)\n\n上图中分成了四个部分，分别是：（其中那个黑模型就是滑动窗口）\n\n- \\#1 已收到 ack 确认的数据。\n- \\#2 发还没收到 ack 的。\n- \\#3 在窗口中还没有发出的（接收方还有空间）。\n- \\#4 窗口以外的数据（接收方没空间）\n\n下面是个滑动后的示意图（收到 36 的 ack，并发出了 46-51 的字节）：\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5oq49tuj30ic05uwev.jpg)\n\n下面我们来看一个接受端控制发送端的图示：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5ot8lvsj30ii0n8wfy.jpg)\n\n### Zero Window\n\n上图，我们可以看到一个处理缓慢的 Server（接收端）是怎么把 Client（发送端）的 TCP Sliding Window 给降成 0 的。此时，你一定会问，如果 Window 变成 0 了，TCP 会怎么样？是不是发送端就不发数据了？是的，发送端就不发数据了，你可以想像成“Window Closed”，那你一定还会问，如果发送端不发数据了，接收方一会儿 Window size 可用了，怎么通知发送端呢？\n\n解决这个问题，TCP 使用了 Zero Window Probe 技术，缩写为 ZWP，也就是说，发送端在窗口变成 0 后，会发 ZWP 的包给接收方，让接收方来 ack 他的 Window 尺寸，一般这个值会设置成 3 次，第次大约 30-60 秒（不同的实现可能会不一样）。如果 3 次过后还是 0 的话，有的 TCP 实现就会发 RST 把链接断了。\n\n**注意**：只要有等待的地方都可能出现 DDoS 攻击，Zero Window 也不例外，一些攻击者会在和 HTTP 建好链发完 GET 请求后，就把 Window 设置为 0，然后服务端就只能等待进行 ZWP，于是攻击者会并发大量的这样的请求，把服务器端的资源耗尽。（关于这方面的攻击，大家可以移步看一下[Wikipedia 的 SockStress 词条](http://en.wikipedia.org/wiki/Sockstress)）\n\n另外，Wireshark 中，你可以使用 tcp.analysis.zero_window 来过滤包，然后使用右键菜单里的 follow TCP stream，你可以看到 ZeroWindowProbe 及 ZeroWindowProbeAck 的包。\n\n### Silly Window Syndrome\n\nSilly Window Syndrome 翻译成中文就是“糊涂窗口综合症”。正如你上面看到的一样，如果我们的接收方太忙了，来不及取走 Receive Windows 里的数据，那么，就会导致发送方越来越小。到最后，如果接收方腾出几个字节并告诉发送方现在有几个字节的 window，而我们的发送方会义无反顾地发送这几个字节。\n\n要知道，我们的 TCP+IP 头有 40 个字节，为了几个字节，要达上这么大的开销，这太不经济了。\n\n另外，你需要知道网络上有个 MTU，对于以太网来说，MTU 是 1500 字节，除去 TCP+IP 头的 40 个字节，真正的数据传输可以有 1460，这就是所谓的 MSS（Max Segment Size）注意，TCP 的 RFC 定义这个 MSS 的默认值是 536，这是因为 [RFC 791](http://tools.ietf.org/html/rfc791)里说了任何一个 IP 设备都得最少接收 576 尺寸的大小（实际上来说 576 是拨号的网络的 MTU，而 576 减去 IP 头的 20 个字节就是 536）。\n\n**如果你的网络包可以塞满 MTU，那么你可以用满整个带宽，如果不能，那么你就会浪费带宽**。（大于 MTU 的包有两种结局，一种是直接被丢了，另一种是会被重新分块打包发送） 你可以想像成一个 MTU 就相当于一个飞机的最多可以装的人，如果这飞机里满载的话，带宽最高，如果一个飞机只运一个人的话，无疑成本增加了，也而相当二。\n\n所以，**Silly Windows Syndrome 这个现像就像是你本来可以坐 200 人的飞机里只做了一两个人**。 要解决这个问题也不难，就是避免对小的 window size 做出响应，直到有足够大的 window size 再响应，这个思路可以同时实现在 sender 和 receiver 两端。\n\n- 如果这个问题是由 Receiver 端引起的，那么就会使用 David D Clark’s 方案。在 receiver 端，如果收到的数据导致 window size 小于某个值，可以直接 ack(0)回 sender，这样就把 window 给关闭了，也阻止了 sender 再发数据过来，等到 receiver 端处理了一些数据后 windows size 大于等于了 MSS，或者，receiver buffer 有一半为空，就可以把 window 打开让 send 发送数据过来。\n- 如果这个问题是由 Sender 端引起的，那么就会使用著名的 [Nagle’s algorithm](http://en.wikipedia.org/wiki/Nagle's_algorithm)。这个算法的思路也是延时处理，他有两个主要的条件：1）要等到 Window Size>=MSS 或是 Data Size >=MSS，2）收到之前发送数据的 ack 回包，他才会发数据，否则就是在攒数据。\n\n另外，Nagle 算法默认是打开的，所以，对于一些需要小包场景的程序——**比如像 telnet 或 ssh 这样的交互性比较强的程序，你需要关闭这个算法**。你可以在 Socket 设置 TCP_NODELAY 选项来关闭这个算法（关闭 Nagle 算法没有全局参数，需要根据每个应用自己的特点来关闭）\n\n```\nsetsockopt(sock_fd, IPPROTO_TCP, TCP_NODELAY, (char*)&value,sizeof(int));\n```\n\n另外，网上有些文章说 TCP_CORK 的 socket option 是也关闭 Nagle 算法，这不对。**TCP_CORK 其实是更新激进的 Nagle 算汉，完全禁止小包发送，而 Nagle 算法没有禁止小包发送，只是禁止了大量的小包发送**。最好不要两个选项都设置。\n\n## TCP 的拥塞处理 – Congestion Handling\n\n上面我们知道了，TCP 通过 Sliding Window 来做流控（Flow Control），但是 TCP 觉得这还不够，因为 Sliding Window 需要依赖于连接的发送端和接收端，其并不知道网络中间发生了什么。TCP 的设计者觉得，一个伟大而牛逼的协议仅仅做到流控并不够，因为流控只是网络模型 4 层以上的事，TCP 的还应该更聪明地知道整个网络上的事。\n\n具体一点，我们知道 TCP 通过一个 timer 采样了 RTT 并计算 RTO，但是，**如果网络上的延时突然增加，那么，TCP 对这个事做出的应对只有重传数据，但是，重传会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，于是，这个情况就会进入恶性循环被不断地放大。试想一下，如果一个网络内有成千上万的 TCP 连接都这么行事，那么马上就会形成“网络风暴”，TCP 这个协议就会拖垮整个网络。**这是一个灾难。\n\n所以，TCP 不能忽略网络上发生的事情，而无脑地一个劲地重发数据，对网络造成更大的伤害。对此 TCP 的设计理念是：**TCP 不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了。**\n\n拥塞控制主要是四个算法：**1）慢启动**，**2）拥塞避免**，**3）拥塞发生**，**4）快速恢复**。这四个算法不是一天都搞出来的，这个四算法的发展经历了很多时间，到今天都还在优化中。 备注:\n\n- 1988 年，TCP-Tahoe 提出了 1）慢启动，2）拥塞避免，3）拥塞发生时的快速重传\n- 1990 年，TCP Reno 在 Tahoe 的基础上增加了 4）快速恢复\n\n### 慢热启动算法 – Slow Start\n\n首先，我们来看一下 TCP 的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。\n\n慢启动的算法如下(cwnd 全称 Congestion Window)：\n\n1）连接建好的开始先初始化 cwnd = 1，表明可以传一个 MSS 大小的数据。\n\n2）每当收到一个 ACK，cwnd++; 呈线性上升\n\n3）每当过了一个 RTT，cwnd = cwnd\\*2; 呈指数让升\n\n4）还有一个 ssthresh（slow start threshold），是一个上限，当 cwnd >= ssthresh 时，就会进入“拥塞避免算法”（后面会说这个算法）\n\n所以，我们可以看到，如果网速很快的话，ACK 也会返回得快，RTT 也会短，那么，这个慢启动就一点也不慢。下图说明了这个过程。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5oz81ffj30ie0asjsi.jpg)\n\n一篇 Google 的论文《[An Argument for Increasing TCP’s Initial Congestion Window](http://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/36640.pdf)》Linux 3.0 后采用了这篇论文的建议——把 cwnd 初始化成了 10 个 MSS。而 Linux 3.0 以前，比如 2.6，Linux 采用了[RFC3390](http://www.rfc-editor.org/rfc/rfc3390.txt)，cwnd 是跟 MSS 的值来变的，如果 MSS< 1095，则 cwnd = 4；如果 MSS>2190，则 cwnd=2；其它情况下，则是 3。\n\n### 拥塞避免算法 – Congestion Avoidance\n\n前面说过，还有一个 ssthresh（slow start threshold），是一个上限，当 cwnd >= ssthresh 时，就会进入“拥塞避免算法”。一般来说 ssthresh 的值是 65535，单位是字节，当 cwnd 达到这个值时后，算法如下：\n\n1）收到一个 ACK 时，cwnd = cwnd + 1/cwnd\n\n2）当每过一个 RTT 时，cwnd = cwnd + 1\n\n这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。\n\n### 拥塞状态时的算法\n\n前面我们说过，当丢包的时候，会有两种情况：\n\n1）等到 RTO 超时，重传数据包。TCP 认为这种情况太糟糕，反应也很强烈。\n\n- - sshthresh = cwnd /2\n  - cwnd 重置为 1\n  - 进入慢启动过程\n\n2）Fast Retransmit 算法，也就是在收到 3 个 duplicate ACK 时就开启重传，而不用等到 RTO 超时。\n\n- - TCP Tahoe 的实现和 RTO 超时一样。\n- - TCP Reno 的实现是：\n    - cwnd = cwnd /2\n    - sshthresh = cwnd\n    - 进入快速恢复算法——Fast Recovery\n\n上面我们可以看到 RTO 超时后，sshthresh 会变成 cwnd 的一半，这意味着，如果 cwnd<=sshthresh 时出现的丢包，那么 TCP 的 sshthresh 就会减了一半，然后等 cwnd 又很快地以指数级增涨爬到这个地方时，就会成慢慢的线性增涨。我们可以看到，TCP 是怎么通过这种强烈地震荡快速而小心得找到网站流量的平衡点的。\n\n### 快速恢复算法 – Fast Recovery\n\n#### TCP Reno\n\n这个算法定义在[RFC5681](http://tools.ietf.org/html/rfc5681)。快速重传和快速恢复算法一般同时使用。快速恢复算法是认为，你还有 3 个 Duplicated Acks 说明网络也不那么糟糕，所以没有必要像 RTO 超时那么强烈。 注意，正如前面所说，进入 Fast Recovery 之前，cwnd 和 sshthresh 已被更新：\n\n- cwnd = cwnd /2\n- sshthresh = cwnd\n\n然后，真正的 Fast Recovery 算法如下：\n\n- cwnd = sshthresh + 3 \\* MSS （3 的意思是确认有 3 个数据包被收到了）\n- 重传 Duplicated ACKs 指定的数据包\n- 如果再收到 duplicated Acks，那么 cwnd = cwnd +1\n- 如果收到了新的 Ack，那么，cwnd = sshthresh ，然后就进入了拥塞避免的算法了。\n\n如果你仔细思考一下上面的这个算法，你就会知道，**上面这个算法也有问题，那就是——它依赖于 3 个重复的 Acks**。注意，3 个重复的 Acks 并不代表只丢了一个数据包，很有可能是丢了好多包。但这个算法只会重传一个，而剩下的那些包只能等到 RTO 超时，于是，进入了恶梦模式——超时一个窗口就减半一下，多个超时会超成 TCP 的传输速度呈级数下降，而且也不会触发 Fast Recovery 算法了。\n\n通常来说，正如我们前面所说的，SACK 或 D-SACK 的方法可以让 Fast Recovery 或 Sender 在做决定时更聪明一些，但是并不是所有的 TCP 的实现都支持 SACK（SACK 需要两端都支持），所以，需要一个没有 SACK 的解决方案。而通过 SACK 进行拥塞控制的算法是 FACK（后面会讲）\n\n#### TCP New Reno\n\n于是，1995 年，TCP New Reno（参见 [RFC 6582](http://tools.ietf.org/html/rfc6582) ）算法提出来，主要就是在没有 SACK 的支持下改进 Fast Recovery 算法的——\n\n- 当 sender 这边收到了 3 个 Duplicated Acks，进入 Fast Retransimit 模式，开发重传重复 Acks 指示的那个包。如果只有这一个包丢了，那么，重传这个包后回来的 Ack 会把整个已经被 sender 传输出去的数据 ack 回来。如果没有的话，说明有多个包丢了。我们叫这个 ACK 为 Partial ACK。\n- 一旦 Sender 这边发现了 Partial ACK 出现，那么，sender 就可以推理出来有多个包被丢了，于是乎继续重传 sliding window 里未被 ack 的第一个包。直到再也收不到了 Partial Ack，才真正结束 Fast Recovery 这个过程\n\n我们可以看到，这个“Fast Recovery 的变更”是一个非常激进的玩法，他同时延长了 Fast Retransmit 和 Fast Recovery 的过程。\n\n##### 算法示意图\n\n下面我们来看一个简单的图示以同时看一下上面的各种算法的样子：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5p47j65j30sg09zgmc.jpg)\n\n#### FACK 算法\n\nFACK 全称 Forward Acknowledgment 算法，论文地址在这里（PDF）[Forward Acknowledgement: Refining TCP Congestion Control](http://conferences.sigcomm.org/sigcomm/1996/papers/mathis.pdf) 这个算法是其于 SACK 的，前面我们说过 SACK 是使用了 TCP 扩展字段 Ack 了有哪些数据收到，哪些数据没有收到，他比 Fast Retransmit 的 3 个 duplicated acks 好处在于，前者只知道有包丢了，不知道是一个还是多个，而 SACK 可以准确的知道有哪些包丢了。 所以，SACK 可以让发送端这边在重传过程中，把那些丢掉的包重传，而不是一个一个的传，但这样的一来，如果重传的包数据比较多的话，又会导致本来就很忙的网络就更忙了。所以，FACK 用来做重传过程中的拥塞流控。\n\n- 这个算法会把 SACK 中最大的 Sequence Number 保存在**snd.fack**这个变量中，snd.fack 的更新由 ack 带秋，如果网络一切安好则和 snd.una 一样（snd.una 就是还没有收到 ack 的地方，也就是前面 sliding window 里的 category #2 的第一个地方）\n- 然后定义一个**awnd = snd.nxt – snd.fack**（snd.nxt 指向发送端 sliding window 中正在要被发送的地方——前面 sliding windows 图示的 category#3 第一个位置），这样 awnd 的意思就是在网络上的数据。（所谓 awnd 意为：actual quantity of data outstanding in the network）\n- 如果需要重传数据，那么，**awnd = snd.nxt – snd.fack + retran_data**，也就是说，awnd 是传出去的数据 + 重传的数据。\n- 然后触发 Fast Recovery 的条件是： ( **( snd.fack – snd.una ) > (3\\*MSS)** ) || (dupacks == 3) ) 。这样一来，就不需要等到 3 个 duplicated acks 才重传，而是只要 sack 中的最大的一个数据和 ack 的数据比较长了（3 个 MSS），那就触发重传。在整个重传过程中 cwnd 不变。直到当第一次丢包的 snd.nxt<=snd.una（也就是重传的数据都被确认了），然后进来拥塞避免机制——cwnd 线性上涨。\n\n我们可以看到如果没有 FACK 在，那么在丢包比较多的情况下，原来保守的算法会低估了需要使用的 window 的大小，而需要几个 RTT 的时间才会完成恢复，而 FACK 会比较激进地来干这事。 但是，FACK 如果在一个网络包会被 reordering 的网络里会有很大的问题。\n\n## 其它拥塞控制算法简介\n\n### **TCP Vegas 拥塞控制算法**\n\n这个算法 1994 年被提出，它主要对 TCP Reno 做了些修改。这个算法通过对 RTT 的非常重的监控来计算一个基准 RTT。然后通过这个基准 RTT 来估计当前的网络实际带宽，如果实际带宽比我们的期望的带宽要小或是要多的活，那么就开始线性地减少或增加 cwnd 的大小。如果这个计算出来的 RTT 大于了 Timeout 后，那么，不等 ack 超时就直接重传。（Vegas 的核心思想是用 RTT 的值来影响拥塞窗口，而不是通过丢包） 这个算法的论文是《[TCP Vegas: End to End Congestion Avoidance on a Global Internet](http://www.cs.cmu.edu/~srini/15-744/F02/readings/BP95.pdf)》这篇论文给了 Vegas 和 New Reno 的对比：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5p96am2j30sg0fftd3.jpg)\n\n关于这个算法实现，你可以参看 Linux 源码：[/net/ipv4/tcp_vegas.h](http://lxr.free-electrons.com/source/net/ipv4/tcp_vegas.h)， [/net/ipv4/tcp_vegas.c](http://lxr.free-electrons.com/source/net/ipv4/tcp_vegas.c)\n\n### HSTCP(High Speed TCP) 算法\n\n这个算法来自[RFC 3649](http://tools.ietf.org/html/rfc3649)（[Wikipedia 词条](http://en.wikipedia.org/wiki/HSTCP)）。其对最基础的算法进行了更改，他使得 Congestion Window 涨得快，减得慢。其中：\n\n- 拥塞避免时的窗口增长方式： cwnd = cwnd + α(cwnd) / cwnd\n- 丢包后窗口下降方式：cwnd = (1- β(cwnd))\\*cwnd\n\n注：α(cwnd)和 β(cwnd)都是函数，如果你要让他们和标准的 TCP 一样，那么让 α(cwnd)=1，β(cwnd)=0.5 就可以了。 对于 α(cwnd)和 β(cwnd)的值是个动态的变换的东西。 关于这个算法的实现，你可以参看 Linux 源码：[/net/ipv4/tcp_highspeed.c](http://lxr.free-electrons.com/source/net/ipv4/tcp_highspeed.c)\n\n### TCP BIC 算法\n\n2004 年，产内出 BIC 算法。现在你还可以查得到相关的新闻《Google：[美科学家研发 BIC-TCP 协议 速度是 DSL 六千倍](https://www.google.com/search?lr=lang_zh-CN|lang_zh-TW&newwindow=1&biw=1366&bih=597&tbs=lr%3Alang_1zh-CN|lang_1zh-TW&q=美科学家研发BIC-TCP协议+速度是DSL六千倍&oq=美科学家研发BIC-TCP协议+速度是DSL六千倍)》 BIC 全称[Binary Increase Congestion control](http://research.csc.ncsu.edu/netsrv/?q=content/bic-and-cubic)，在 Linux 2.6.8 中是默认拥塞控制算法。BIC 的发明者发这么多的拥塞控制算法都在努力找一个合适的 cwnd – Congestion Window，而且 BIC-TCP 的提出者们看穿了事情的本质，其实这就是一个搜索的过程，所以 BIC 这个算法主要用的是 Binary Search——二分查找来干这个事。 关于这个算法实现，你可以参看 Linux 源码：[/net/ipv4/tcp_bic.c](http://lxr.free-electrons.com/source/net/ipv4/tcp_bic.c)\n\n### TCP WestWood 算法\n\nwestwood 采用和 Reno 相同的慢启动算法、拥塞避免算法。westwood 的主要改进方面：在发送端做带宽估计，当探测到丢包时，根据带宽值来设置拥塞窗口、慢启动阈值。 那么，这个算法是怎么测量带宽的？每个 RTT 时间，会测量一次带宽，测量带宽的公式很简单，就是这段 RTT 内成功被 ack 了多少字节。因为，这个带宽和用 RTT 计算 RTO 一样，也是需要从每个样本来平滑到一个值的——也是用一个加权移平均的公式。 另外，我们知道，如果一个网络的带宽是每秒可以发送 X 个字节，而 RTT 是一个数据发出去后确认需要的时候，所以，X _ RTT 应该是我们缓冲区大小。所以，在这个算法中，ssthresh 的值就是 est_BD _ min-RTT(最小的 RTT 值)，如果丢包是 Duplicated ACKs 引起的，那么如果 cwnd > ssthresh，则 cwin = ssthresh。如果是 RTO 引起的，cwnd = 1，进入慢启动。 关于这个算法实现，你可以参看 Linux 源码： [/net/ipv4/tcp_westwood.c](http://lxr.free-electrons.com/source/net/ipv4/tcp_westwood.c)\n\n## 四次挥手优化——三次挥手\n\n```json\n#三次挥手 -- 客户端发起断开连接请求    客户端序列号为 3495051432\n#fin  seq = 3495051432\n00:05:30.157325 IP 221.122.42.100.58706 > VM_0_6_centos.webcache: Flags [F.], seq 3495051432, ack 485492629, win 115, options [nop,nop,TS val 1695781058 ecr 629900122], length 0\n#三次挥手 -- 服务器端发起断开连接请求\n#ack = 3495051432 + 1 = 3495051433  注意 因为服务器端也没有东西要发送了，所以也要关闭连接，因此同时发送了fin信号，seq = 485492629\n00:05:30.157562 IP VM_0_6_centos.webcache > 221.122.42.100.58706: Flags [F.], seq 485492629, ack 3495051433, win 235, options [nop,nop,TS val 629900162 ecr 1695781058], length 0\n#三次挥手 -- 客户端应答\n#ack = 485492629 + 1 = 485492630\n00:05:30.196710 IP 221.122.42.100.58706 > VM_0_6_centos.webcache: Flags [.], ack 485492630, win 115, options [nop,nop,TS val 1695781097 ecr 629900162], length 0\n```\n\n这是因为关闭连接有两种方式，当一方关闭连接，另外一方没有数据发送时，马上关闭连接，也就将第二步的 ack 与第三步的 fin 合并为一步了\n","tags":["浏览器","TCP/IP"],"categories":["浏览器"]},{"title":"Promise","url":"/2019/08/05/promise/","content":"\n# promise\n\n## 创建 XHR 的 promise 对象（Promise 包装 XHR[ajax]处理）\n\n方法一：\n\n创建一个用 Promise 把 XHR 处理包装起来的名为 `getURL` 的函数。\n\n<!-- more -->\n\n```javascript\nfunction getURL(URL) {\n  return new Promise(function(resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", URL, true);\n    req.onload = function() {\n      if (req.status === 200) {\n        resolve(req.responseText);\n      } else {\n        reject(new Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(new Error(req.statusText));\n    };\n    req.send();\n  });\n}\n// 运行示例\nvar URL = \"http://httpbin.org/get\";\ngetURL(URL)\n  .then(function onFulfilled(value) {\n    console.log(value);\n  })\n  .catch(function onRejected(error) {\n    console.error(error);\n  });\n```\n\n方法二：\n\n```javascript\nfunction ajaxPromise(url, data, callback) {\n  return new Promise(function(resolve, reject) {\n    $.ajax({\n      url: url,\n      type: data == null ? \"GET\" : \"POST\",\n      dataType: \"json\",\n      data: data == null ? \"\" : JSON.stringify(data),\n      async: true,\n      contentType: \"application/json\",\n      success: function(res) {\n        callback(res);\n        resolve();\n      },\n      error: function(XMLHttpRequest, textStatus, errorThrown) {\n        if (XMLHttpRequest.status == \"401\") {\n          window.parent.location = \"/enterprise/enterprise_login.html\";\n          self.location = \"/enterprise/enterprise_login.html\";\n        } else {\n          alert(XMLHttpRequest.responseText);\n        }\n        reject();\n      }\n    });\n  });\n}\n```\n\n调用\n\n```javascript\najaxPromise('/prefix/entity1/action1',null, function(res){\n     //do something on response\n}).then(\n     ajaxPromise('/prefix/entity2/action2', someData, function(res){\n          //do something on response\n     }\n).then(\n     initVue() ;\n).then(\n     //do  something else\n)\n```\n\n## promise 的实现和原理（用 js）\n\n[promise 实现原理](https://juejin.im/post/5b83cb5ae51d4538cc3ec354)\n\n```javascript\n// 判断变量否为function\nconst isFunction = variable => typeof variable === \"function\";\n// 定义Promise的三种状态常量\nconst PENDING = \"PENDING\";\nconst FULFILLED = \"FULFILLED\";\nconst REJECTED = \"REJECTED\";\n\nclass MyPromise {\n  constructor(handle) {\n    if (!isFunction(handle)) {\n      throw new Error(\"MyPromise must accept a function as a parameter\");\n    }\n    // 添加状态\n    this._status = PENDING;\n    // 添加状态\n    this._value = undefined;\n    // 添加成功回调函数队列\n    this._fulfilledQueues = [];\n    // 添加失败回调函数队列\n    this._rejectedQueues = [];\n    // 执行handle\n    try {\n      handle(this._resolve.bind(this), this._reject.bind(this));\n    } catch (err) {\n      this._reject(err);\n    }\n  }\n  // 添加resovle时执行的函数\n  _resolve(val) {\n    const run = () => {\n      if (this._status !== PENDING) return;\n      // 依次执行成功队列中的函数，并清空队列\n      const runFulfilled = value => {\n        let cb;\n        while ((cb = this._fulfilledQueues.shift())) {\n          cb(value);\n        }\n      };\n      // 依次执行失败队列中的函数，并清空队列\n      const runRejected = error => {\n        let cb;\n        while ((cb = this._rejectedQueues.shift())) {\n          cb(error);\n        }\n      };\n      /* 如果resolve的参数为Promise对象，则必须等待该Promise对象状态改变后,\n          当前Promsie的状态才会改变，且状态取决于参数Promsie对象的状态 */\n      if (val instanceof MyPromise) {\n        val.then(\n          value => {\n            this._value = value;\n            this._status = FULFILLED;\n            runFulfilled(value);\n          },\n          err => {\n            this._value = err;\n            this._status = REJECTED;\n            runRejected(err);\n          }\n        );\n      } else {\n        this._value = val;\n        this._status = FULFILLED;\n        runFulfilled(val);\n      }\n    };\n    // 为了支持同步的Promise，这里采用异步调用\n    setTimeout(run, 0);\n  }\n  // 添加reject时执行的函数\n  _reject(err) {\n    if (this._status !== PENDING) return;\n    // 依次执行失败队列中的函数，并清空队列\n    const run = () => {\n      this._status = REJECTED;\n      this._value = err;\n      let cb;\n      while ((cb = this._rejectedQueues.shift())) {\n        cb(err);\n      }\n    };\n    // 为了支持同步的Promise，这里采用异步调用\n    setTimeout(run, 0);\n  }\n  // 添加then方法\n  then(onFulfilled, onRejected) {\n    const { _value, _status } = this;\n    // 返回一个新的Promise对象\n    return new MyPromise((onFulfilledNext, onRejectedNext) => {\n      // 封装一个成功时执行的函数\n      let fulfilled = value => {\n        try {\n          if (!isFunction(onFulfilled)) {\n            onFulfilledNext(value);\n          } else {\n            let res = onFulfilled(value);\n            if (res instanceof MyPromise) {\n              // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          // 如果函数执行出错，新的Promise对象的状态为失败\n          onRejectedNext(err);\n        }\n      };\n      // 封装一个失败时执行的函数\n      let rejected = error => {\n        try {\n          if (!isFunction(onRejected)) {\n            onRejectedNext(error);\n          } else {\n            let res = onRejected(error);\n            if (res instanceof MyPromise) {\n              // 如果当前回调函数返回MyPromise对象，必须等待其状态改变后在执行下一个回调\n              res.then(onFulfilledNext, onRejectedNext);\n            } else {\n              //否则会将返回结果直接作为参数，传入下一个then的回调函数，并立即执行下一个then的回调函数\n              onFulfilledNext(res);\n            }\n          }\n        } catch (err) {\n          // 如果函数执行出错，新的Promise对象的状态为失败\n          onRejectedNext(err);\n        }\n      };\n      switch (_status) {\n        // 当状态为pending时，将then方法回调函数加入执行队列等待执行\n        case PENDING:\n          this._fulfilledQueues.push(fulfilled);\n          this._rejectedQueues.push(rejected);\n          break;\n        // 当状态已经改变时，立即执行对应的回调函数\n        case FULFILLED:\n          fulfilled(_value);\n          break;\n        case REJECTED:\n          rejected(_value);\n          break;\n      }\n    });\n  }\n  // 添加catch方法\n  catch(onRejected) {\n    return this.then(undefined, onRejected);\n  }\n  // 添加静态resolve方法\n  static resolve(value) {\n    // 如果参数是MyPromise实例，直接返回这个实例\n    if (value instanceof MyPromise) return value;\n    return new MyPromise(resolve => resolve(value));\n  }\n  // 添加静态reject方法\n  static reject(value) {\n    return new MyPromise((resolve, reject) => reject(value));\n  }\n  // 添加静态all方法\n  static all(list) {\n    return new MyPromise((resolve, reject) => {\n      /**\n       * 返回值的集合\n       */\n      let values = [];\n      let count = 0;\n      for (let [i, p] of list.entries()) {\n        // 数组参数如果不是MyPromise实例，先调用MyPromise.resolve\n        this.resolve(p).then(\n          res => {\n            values[i] = res;\n            count++;\n            // 所有状态都变成fulfilled时返回的MyPromise状态就变成fulfilled\n            if (count === list.length) resolve(values);\n          },\n          err => {\n            // 有一个被rejected时返回的MyPromise状态就变成rejected\n            reject(err);\n          }\n        );\n      }\n    });\n  }\n  // 添加静态race方法\n  static race(list) {\n    return new MyPromise((resolve, reject) => {\n      for (let p of list) {\n        // 只要有一个实例率先改变状态，新的MyPromise的状态就跟着改变\n        this.resolve(p).then(\n          res => {\n            resolve(res);\n          },\n          err => {\n            reject(err);\n          }\n        );\n      }\n    });\n  }\n  finally(cb) {\n    return this.then(\n      value => MyPromise.resolve(cb()).then(() => value),\n      reason =>\n        MyPromise.resolve(cb()).then(() => {\n          throw reason;\n        })\n    );\n  }\n}\n```\n\n## promise.race 和超时处理\n\n函数 `timeoutPromise(比较对象promise, ms)` 接收两个参数，第一个是需要使用超时机制的 promise 对象，第二个参数是超时时间，它返回一个由 `Promise.race` 创建的相互竞争的 promise 对象。\n\n```javascript\nfunction delayPromise(ms) {\n  return new Promise(function(resolve) {\n    setTimeout(resolve, ms);\n  });\n}\nfunction timeoutPromise(promise, ms) {\n  var timeout = delayPromise(ms).then(function() {\n    throw new Error(\"Operation timed out after \" + ms + \" ms\");\n  });\n  return Promise.race([promise, timeout]);\n}\n```\n\n例子：\n\n```javascript\nfunction delayPromise(ms) {\n  return new Promise(function(resolve) {\n    setTimeout(resolve, ms);\n  });\n}\nfunction timeoutPromise(promise, ms) {\n  var timeout = delayPromise(ms).then(function() {\n    throw new Error(\"Operation timed out after \" + ms + \" ms\");\n  });\n  return Promise.race([promise, timeout]);\n}\n// 运行示例\nvar taskPromise = new Promise(function(resolve) {\n  // 随便一些什么处理\n  var delay = Math.random() * 2000;\n  setTimeout(function() {\n    resolve(delay + \"ms\");\n  }, delay);\n});\ntimeoutPromise(taskPromise, 1000)\n  .then(function(value) {\n    console.log(\"taskPromise在规定时间内结束 : \" + value);\n  })\n  .catch(function(error) {\n    console.log(\"发生超时\", error);\n  });\n```\n\n虽然在发生超时的时候抛出了异常，但是这样的话我们就不能区分这个异常到底是*普通的错误*还是*超时错误*了。\n\n为了能区分这个 `Error` 对象的类型，我们再来定义一个`Error` 对象的子类 `TimeoutError`。\n\n- #### 定制 Error 对象\n\n```javascript\n//TimeoutError.js\nfunction copyOwnFrom(target, source) {\n  Object.getOwnPropertyNames(source).forEach(function(propName) {\n    Object.defineProperty(\n      target,\n      propName,\n      Object.getOwnPropertyDescriptor(source, propName)\n    );\n  });\n  return target;\n}\nfunction TimeoutError() {\n  var superInstance = Error.apply(null, arguments);\n  copyOwnFrom(this, superInstance);\n}\nTimeoutError.prototype = Object.create(Error.prototype);\nTimeoutError.prototype.constructor = TimeoutError;\n```\n\n我们定义了 `TimeoutError` 类和构造函数，这个类继承了 Error 的 prototype。\n\n它的使用方法和普通的 `Error` 对象一样，使用 `throw` 语句即可，如下所示。\n\n```javascript\nvar promise = new Promise(function() {\n  throw TimeoutError(\"timeout\");\n});\n\npromise.catch(function(error) {\n  console.log(error instanceof TimeoutError); // true\n});\n```\n\n- #### 应用\n\n取消 XHR 操作本身的话并不难，只需要调用 `XMLHttpRequest` 对象的 `abort()` 方法就可以了。\n\n为了能在外部调用 `abort()` 方法，我们先对之前本节出现的 [`getURL`](http://liubin.org/promises-book/#xhr-promise.js) 进行简单的扩展，`cancelableXHR` 方法除了返回一个包装了 XHR 的 promise 对象之外，还返回了一个用于取消该 XHR 请求的`abort`方法。\n\n大体的流程就像下面这样。\n\n1. 通过 `cancelableXHR` 方法取得包装了 XHR 的 promise 对象和取消该 XHR 请求的方法\n2. 在 `timeoutPromise` 方法中通过 `Promise.race` 让 XHR 的包装 promise 和超时用 promise 进行竞争。\n   - XHR 在超时前返回结果的话\n     1. 和正常的 promise 一样，通过 `then` 返回请求结果\n   - 发生超时的时候\n     1. 抛出 `throw TimeoutError` 异常并被 `catch`\n     2. catch 的错误对象如果是 `TimeoutError` 类型的话，则调用 `abort` 方法取消 XHR 请求\n\n```javascript\nfunction copyOwnFrom(target, source) {\n  Object.getOwnPropertyNames(source).forEach(function(propName) {\n    Object.defineProperty(\n      target,\n      propName,\n      Object.getOwnPropertyDescriptor(source, propName)\n    );\n  });\n  return target;\n}\nfunction TimeoutError() {\n  var superInstance = Error.apply(null, arguments);\n  copyOwnFrom(this, superInstance);\n}\nTimeoutError.prototype = Object.create(Error.prototype);\nTimeoutError.prototype.constructor = TimeoutError;\nfunction delayPromise(ms) {\n  return new Promise(function(resolve) {\n    setTimeout(resolve, ms);\n  });\n}\nfunction timeoutPromise(promise, ms) {\n  var timeout = delayPromise(ms).then(function() {\n    return Promise.reject(\n      new TimeoutError(\"Operation timed out after \" + ms + \" ms\")\n    );\n  });\n  return Promise.race([promise, timeout]);\n}\nfunction cancelableXHR(URL) {\n  var req = new XMLHttpRequest();\n  var promise = new Promise(function(resolve, reject) {\n    req.open(\"GET\", URL, true);\n    req.onload = function() {\n      if (req.status === 200) {\n        resolve(req.responseText);\n      } else {\n        reject(new Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(new Error(req.statusText));\n    };\n    req.onabort = function() {\n      reject(new Error(\"abort this request\"));\n    };\n    req.send();\n  });\n  var abort = function() {\n    // 如果request还没有结束的话就执行abort\n    // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n    if (req.readyState !== XMLHttpRequest.UNSENT) {\n      req.abort();\n    }\n  };\n  return {\n    promise: promise,\n    abort: abort\n  };\n}\nvar object = cancelableXHR(\"http://httpbin.org/get\");\n// main\ntimeoutPromise(object.promise, 1000)\n  .then(function(contents) {\n    console.log(\"Contents\", contents);\n  })\n  .catch(function(error) {\n    if (error instanceof TimeoutError) {\n      object.abort();\n      return console.log(error);\n    }\n    console.log(\"XHR Error :\", error);\n  });\n```\n\n## promise.all 和顺序处理\n\n- 在 [重复使用多个 then 的方法](http://liubin.org/promises-book/#multiple-xhr.js) 中的实现方法如下。\n\n```javascript\nfunction getURL(URL) {\n  return new Promise(function(resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", URL, true);\n    req.onload = function() {\n      if (req.status === 200) {\n        resolve(req.responseText);\n      } else {\n        reject(new Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(new Error(req.statusText));\n    };\n    req.send();\n  });\n}\nvar request = {\n  comment: function getComment() {\n    return getURL(\"http://azu.github.io/promises-book/json/comment.json\").then(\n      JSON.parse\n    );\n  },\n  people: function getPeople() {\n    return getURL(\"http://azu.github.io/promises-book/json/people.json\").then(\n      JSON.parse\n    );\n  }\n};\nfunction main() {\n  function recordValue(results, value) {\n    results.push(value);\n    return results;\n  }\n  // [] 用来保存初始化的值\n  var pushValue = recordValue.bind(null, []);\n  return request\n    .comment()\n    .then(pushValue)\n    .then(request.people)\n    .then(pushValue);\n}\n// 运行示例\nmain()\n  .then(function(value) {\n    console.log(value);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n使用这种写法的话那么随着 `request` 中元素数量的增加，我们也需要不断增加对 `then` 方法的调用\n\n- 将处理内容统一放到数组里，再配合 for 循环进行处理\n\n```javascript\nfunction getURL(URL) {\n  return new Promise(function(resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", URL, true);\n    req.onload = function() {\n      if (req.status === 200) {\n        resolve(req.responseText);\n      } else {\n        reject(new Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(new Error(req.statusText));\n    };\n    req.send();\n  });\n}\nvar request = {\n  comment: function getComment() {\n    return getURL(\"http://azu.github.io/promises-book/json/comment.json\").then(\n      JSON.parse\n    );\n  },\n  people: function getPeople() {\n    return getURL(\"http://azu.github.io/promises-book/json/people.json\").then(\n      JSON.parse\n    );\n  }\n};\nfunction main() {\n  function recordValue(results, value) {\n    results.push(value);\n    return results;\n  }\n  // [] 用来保存初始化值\n  var pushValue = recordValue.bind(null, []);\n  // 返回promise对象的函数的数组\n  var tasks = [request.comment, request.people];\n  var promise = Promise.resolve();\n  // 开始的地方\n  for (var i = 0; i < tasks.length; i++) {\n    var task = tasks[i];\n    promise = promise.then(task).then(pushValue);\n  }\n  return promise;\n}\n// 运行示例\nmain()\n  .then(function(value) {\n    console.log(value);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n`promise = promise.then(task).then(pushValue);` 的代码就是通过不断对 promise 进行处理，不断的覆盖 `promise` 变量的值，以达到对 promise 对象的累积处理效果。\n\n但是这种方法需要 `promise` 这个临时变量，从代码质量上来说显得不那么简洁。\n\n- Promise chain 和 reduce\n\n```javascript\nfunction getURL(URL) {\n  return new Promise(function(resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", URL, true);\n    req.onload = function() {\n      if (req.status === 200) {\n        resolve(req.responseText);\n      } else {\n        reject(new Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(new Error(req.statusText));\n    };\n    req.send();\n  });\n}\nvar request = {\n  comment: function getComment() {\n    return getURL(\"http://azu.github.io/promises-book/json/comment.json\").then(\n      JSON.parse\n    );\n  },\n  people: function getPeople() {\n    return getURL(\"http://azu.github.io/promises-book/json/people.json\").then(\n      JSON.parse\n    );\n  }\n};\nfunction main() {\n  function recordValue(results, value) {\n    results.push(value);\n    return results;\n  }\n  var pushValue = recordValue.bind(null, []);\n  var tasks = [request.comment, request.people];\n  return tasks.reduce(function(promise, task) {\n    return promise.then(task).then(pushValue);\n  }, Promise.resolve());\n}\n// 运行示例\nmain()\n  .then(function(value) {\n    console.log(value);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n`Array.prototype.reduce` 的第二个参数用来设置盛放计算结果的初始值。在这个例子中， `Promise.resolve()` 会赋值给 `promise`，此时的 `task` 为 `request.comment` 。\n\n在 reduce 中第一个参数中被 `return` 的值，则会被赋值为下次循环时的 `promise` 。也就是说，通过返回由 `then` 创建的新的 promise 对象，就实现了和 for 循环类似的 [Promise chain](http://liubin.org/promises-book/#promise-chain) 了。\n\n使用 reduce 和 for 循环不同的地方是 reduce 不再需要临时变量 `promise` 了，因此也不用编写 `promise = promise.then(task).then(pushValue);` 这样冗长的代码了，这是非常大的进步。\n\n- 定义进行顺序处理的函数\n\n```javascript\nfunction sequenceTasks(tasks) {\n  function recordValue(results, value) {\n    results.push(value);\n    return results;\n  }\n  var pushValue = recordValue.bind(null, []);\n  return tasks.reduce(function(promise, task) {\n    return promise.then(task).then(pushValue);\n  }, Promise.resolve());\n}\n```\n\n需要注意的一点是，和 `Promise.all` 等不同，这个函数接收的参数是一个函数的数组。为什么传给这个函数的不是一个 promise 对象的数组呢？这是因为 promise 对象创建的时候，XHR 已经开始执行了，因此再对这些 promise 对象进行顺序处理的话就不能正常工作了。\n\n重写上例：\n\n```javascript\nfunction sequenceTasks(tasks) {\n  function recordValue(results, value) {\n    results.push(value);\n    return results;\n  }\n  var pushValue = recordValue.bind(null, []);\n  return tasks.reduce(function(promise, task) {\n    return promise.then(task).then(pushValue);\n  }, Promise.resolve());\n}\nfunction getURL(URL) {\n  return new Promise(function(resolve, reject) {\n    var req = new XMLHttpRequest();\n    req.open(\"GET\", URL, true);\n    req.onload = function() {\n      if (req.status === 200) {\n        resolve(req.responseText);\n      } else {\n        reject(new Error(req.statusText));\n      }\n    };\n    req.onerror = function() {\n      reject(new Error(req.statusText));\n    };\n    req.send();\n  });\n}\nvar request = {\n  comment: function getComment() {\n    return getURL(\"http://azu.github.io/promises-book/json/comment.json\").then(\n      JSON.parse\n    );\n  },\n  people: function getPeople() {\n    return getURL(\"http://azu.github.io/promises-book/json/people.json\").then(\n      JSON.parse\n    );\n  }\n};\nfunction main() {\n  return sequenceTasks([request.comment, request.people]);\n}\n// 运行示例\nmain()\n  .then(function(value) {\n    console.log(value);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n## 如何实现 Promise.all ?\n\n```javascript\nPromise.all = function(promises) {\n  return new Promise((resolve, reject) => {\n    let index = 0;\n    let result = [];\n    if (promises.length === 0) {\n      resolve(result);\n    } else {\n      function processValue(i, data) {\n        result[i] = data;\n        if (++index === promises.length) {\n          resolve(result);\n        }\n      }\n      for (let i = 0; i < promises.length; i++) {\n        //promises[i] 可能是普通值\n        Promise.resolve(promises[i]).then(\n          data => {\n            processValue(i, data);\n          },\n          err => {\n            reject(err);\n            return;\n          }\n        );\n      }\n    }\n  });\n};\n```\n\n## 如何实现 Promise.finally ?\n\n不管成功还是失败，都会走到 finally 中,并且 finally 之后，还可以继续 then。并且会将值原封不动的传递给后面的 then.\n\n```javascript\nPromise.prototype.finally = function(callback) {\n  return this.then(\n    value => {\n      return Promise.resolve(callback()).then(() => {\n        return value;\n      });\n    },\n    err => {\n      return Promise.resolve(callback()).then(() => {\n        throw err;\n      });\n    }\n  );\n};\n```\n\n## 常见问题\n\n1. 输出结果：success\n\n   解题思路：Promise 状态一旦改变，无法在发生变更。\n\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"success\");\n    reject(\"error\");\n  }, 1000);\n});\npromise.then(\n  res => {\n    console.log(res);\n  },\n  err => {\n    console.log(err);\n  }\n);\n```\n\n2. 输出结果：1\n\n   解题思路：Promise 的 then 方法的参数期望是函数，传入非函数则会发生值穿透。\n\n```javascript\nPromise.resolve(1)\n  .then(2)\n  .then(Promise.resolve(3))\n  .then(console.log);\n```\n\n3. 结果是：3 4 6 8 7 5 2 1\n\n   优先级关系如下：`process.nextTick > promise.then > setTimeout > setImmediate`\n\n```javascript\nsetImmediate(function() {\n  console.log(1);\n}, 0);\nsetTimeout(function() {\n  console.log(2);\n}, 0);\nnew Promise(function(resolve) {\n  console.log(3);\n  resolve();\n  console.log(4);\n}).then(function() {\n  console.log(5);\n});\nconsole.log(6);\nprocess.nextTick(function() {\n  console.log(7);\n});\nconsole.log(8);\n```\n\nV8 实现中，两个队列各包含不同的任务：\n\n`macrotasks: script(整体代码),setTimeout, setInterval, setImmediate, I/O, UI rendering`\n`microtasks: process.nextTick, Promises, Object.observe, MutationObserver`\n\n4. 实现一个简单的 Promise\n\n   ```javascript\n   function Promise(fn) {\n     var status = \"pending\";\n     function successNotify() {\n       status = \"fulfilled\"; //状态变为fulfilled\n       toDoThen.apply(undefined, arguments); //执行回调\n     }\n     function failNotify() {\n       status = \"rejected\"; //状态变为rejected\n       toDoThen.apply(undefined, arguments); //执行回调\n     }\n     function toDoThen() {\n       setTimeout(() => {\n         // 保证回调是异步执行的\n         if (status === \"fulfilled\") {\n           for (let i = 0; i < successArray.length; i++) {\n             successArray[i].apply(undefined, arguments); //执行then里面的回掉函数\n           }\n         } else if (status === \"rejected\") {\n           for (let i = 0; i < failArray.length; i++) {\n             failArray[i].apply(undefined, arguments); //执行then里面的回掉函数\n           }\n         }\n       });\n     }\n     var successArray = [];\n     var failArray = [];\n     fn.call(undefined, successNotify, failNotify);\n     return {\n       then: function(successFn, failFn) {\n         successArray.push(successFn);\n         failArray.push(failFn);\n         return undefined; // 此处应该返回一个Promise\n       }\n     };\n   }\n   ```\n\n解题思路：Promise 中的 resolve 和 reject 用于改变 Promise 的状态和传参，then 中的参数必须是作为回调执行的函数。因此，当 Promise 改变状态之后会调用回调函数，根据状态的不同选择需要执行的回调函数。\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"JS引擎执行机制","url":"/2019/07/30/JS引擎执行机制/","content":"\n# JS 引擎执行机制\n\n**(1) JS 是单线程语言**\n\n**(2) JS 的 Event Loop 是 JS 的执行机制。深入了解 JS 的执行,就等于深入了解 JS 里的 event loop**\n\n<!-- more -->\n\n## JS 为什么是单线程的? 为什么需要异步? 单线程又是如何实现异步的呢?\n\n- JS 最初被设计用在浏览器中,那么想象一下,如果浏览器中的 JS 是多线程的。\n\n  场景描述:\n\n  那么现在有 2 个线程,process1 process2,由于是多线程的 JS,所以他们对同一个 dom,同时进行操作。process1 删除了该 dom,而 process2 编辑了该 dom,同时下达 2 个矛盾的命令,浏览器究竟该如何执行呢?\n\n- JS 为什么需要异步?\n\n  如果 JS 中不存在异步,只能自上而下执行,如果上一行解析时间很长,那么下面的代码就会被阻塞。\n  对于用户而言,阻塞就意味着\"卡死\",这样就导致了很差的用户体验\n\n- JS 单线程又是如何实现异步的呢?\n\n  **是通过的事件循环(event loop),理解了 event loop 机制,就理解了 JS 的执行机制**\n\n## JS 中的 event loop\n\n### event loop（1）\n\nJS 里的一种分类方式,就是将任务分为: 同步任务和异步任务\n\nJS 的执行机制是：\n\n- 首先判断 JS 是同步还是异步,同步就进入主线程,异步就进入 event table\n- 异步任务在 event table 中注册函数,当满足触发条件后,被推入 event queue\n- 同步任务进入主线程后一直执行,直到主线程空闲时,才会去 event queue 中查看是否有可执行的异步任务,如果有就推入主线程中\n\n### event loop（2）\n\n准确的划分方式是:\n\n- macro-task(宏任务)：包括整体代码 script，setTimeout，setInterval\n- micro-task(微任务)：Promise.then，process.nextTick\n\nJS 的执行机制是：\n\n- 执行一个宏任务,过程中如果遇到微任务,就将其放到微任务的【事件队列】里\n- 当前宏任务执行完成后,会查看微任务的【事件队列】,并将里面全部的微任务依次执行完\n\n**重复以上 2 步骤,结合 event loop(1) event loop(2) ,就是更为准确的 JS 执行机制了。**\n\n## 理解 JavaScript 的 async/await\n\n### async 和 await 在干什么\n\n先从字面意思来理解。async 是“异步”的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。\n\n- async 函数返回的是一个 **Promise** 对象。\n  - 如果在函数中 `return` 一个直接量，async 会把这个直接量通过 `Promise.resolve()` 封装成 Promise 对象。\n  - 如果 async 函数没有返回值，又该如何？很容易想到，它会返回 `Promise.resolve(undefined)`。\n  - Promise 的特点——无等待，所以在没有 `await` 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n- await 等待的是一个表达式。\n  - 这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n  - await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。\n- await 等到了要等的，然后呢？\n  - `await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n  - 如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n  - 如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。\n\n### await 等待的表达式详解\n\n**await 等的是右侧「表达式」的结果**\n\nawait 是从**右向左执行的**\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nasync1();\nconsole.log(\"script start\");\n```\n\n先执行 async2 后，发现有 await 关键字，于是让出线程，阻塞代码\n\n右侧表达式的结果:\n\n- 如果不是 promise , await 会阻塞后面的代码，先执行 async 外面的同步代码，同步代码执行完，再回到 async 内部，把这个非 promise 的东西，作为 await 表达式的结果\n- 如果它等到的是一个 promise 对象，await 也会暂停 async 后面的代码，先执行 async 外面的同步代码，等着 Promise 对象 fulfilled，然后把 resolve 的参数作为 await 表达式的运算结果。\n\n### async/await 的优势在于处理 then 链\n\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了。\n\n- Async/await 代码清晰很多，几乎跟同步代码一样。\n- Promise 方案的死穴—— 链式调用参数传递太麻烦\n\n## async/await 和 promise 的执行顺序\n\n### 例子\n\n```javascript\nasync function async1() {\n  console.log(\"async1 start\");\n  await async2();\n  console.log(\"async1 end\");\n}\nasync function async2() {\n  console.log(\"async2\");\n}\nconsole.log(\"script start\");\nsetTimeout(function() {\n  console.log(\"setTimeout\");\n}, 0);\nasync1();\nnew Promise(function(resolve) {\n  console.log(\"promise1\");\n  resolve();\n}).then(function() {\n  console.log(\"promise2\");\n});\nconsole.log(\"script end\");\n```\n\n```javascript\nscript start\nasync1 start\nasync2\npromise1\nscript end\npromise2\nasync1 end\nsetTimeout\n```\n\n宏任务和微任务的慨念，在我脑海中宏任务和为微任务如图所示\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izm5nu3ij30f204qq2z.jpg)\n\n也就是「宏任务」、「微任务」都是队列。\n\n一段代码执行时，会先执行宏任务中的同步代码，\n\n- 如果执行中遇到 setTimeout 之类宏任务，那么就把这个 setTimeout 内部的函数推入「宏任务的队列」中，下一轮宏任务执行时调用。\n- 如果执行中遇到 promise.then()之类的微任务，就会推入到「当前宏任务的微任务队列」中，在本轮宏任务的同步代码执行都完成后，依次执行所有的微任务 1、2、3\n\n### 例子分析执行顺序\n\n#### 直接打印同步代码 console.log(‘script start’)\n\n```javascript\n// 首先是2个函数声明，虽然有async关键字，但不是调用我们就不看。然后首先是打印同步代码\nconsole.log(\"script start\");\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izmivm1ij30m801x745.jpg)\n\n#### 将 setTimeout 放入宏任务队列\n\n默认所包裹的代码，其实可以理解为是第一个宏任务，所以这里是宏任务 2\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izmvovzjj30m8034dft.jpg)\n\n#### 调用 async1，打印 同步代码 console.log( ‘async1 start’ )\n\n我们说过看到带有 async 关键字的函数，不用害怕，它的仅仅是把 return 值包装成了 promise，其他并没有什么不同的地方。所以就很普通的打印 console.log( ‘async1 start’ )\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izn7f29dj30m803dt8o.jpg)\n\n#### 分析一下 await async2()\n\n前文提过 await，1.它先计算出右侧的结果，2.然后看到 await 后，中断 async 函数\n\n- 先得到 await 右侧表达式的结果。执行 async2()，打印同步代码 console.log(‘async2’), 并且 return Promise.resolve(undefined)\n- await 后，中断 async 函数，先执行 async 外的同步代码\n\n目前就直接打印 console.log(‘async2’)\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iznit5adj30m803edfu.jpg)\n\n#### 被阻塞后，要执行 async 之外的代码\n\n执行 new Promise()，Promise 构造函数是直接调用的同步代码，所以 console.log( ‘promise1’ )\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iznu7o6jj30m803l74a.jpg)\n\n#### 代码运行到 promise.then()\n\n代码运行到 promise.then()，发现这个是微任务，所以暂时不打印，只是推入当前宏任务的微任务队列中。\n\n**注意：这里只是把 promise2 推入微任务队列，并没有执行。微任务会在当前宏任务的同步代码执行完毕，才会依次执行**\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izo8rmlkj30m803c0sp.jpg)\n\n#### 打印同步代码 console.log(‘script end’)\n\n执行完这个同步代码后，「async 外的代码」终于走了一遍\n\n下面该回到 await 表达式那里，执行 await Promise.resolve(undefined)了\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izoj1zjkj30m803c749.jpg)\n\n#### 回到 async 内部，执行 await Promise.resolve(undefined)\n\n这部分可能不太好理解，我尽量表达我的想法。\n\n对于 await Promise.resolve(undefined) 如何理解呢？\n\n根据 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/await) 原话我们知道\n\n**如果一个 Promise 被传递给一个 await 操作符，await 将等待 Promise 正常处理完成并返回其处理结果。**\n\n在我们这个例子中，就是 Promise.resolve(undefined)正常处理完成，并返回其处理结果。那么 await async2()就算是执行结束了。\n\n目前这个 promise 的状态是 fulfilled，等其处理结果返回就可以执行 await 下面的代码了。\n\n那何时能拿到处理结果呢？\n\n回忆平时我们用 promise，调用 resolve 后，何时能拿到处理结果？是不是需要在 then 的第一个参数里，才能拿到结果。\n\n（调用 resolve 时，会把 then 的参数推入微任务队列，等主线程空闲时，再调用它）\n\n所以这里的 await Promise.resolve() 就类似于\n\n```javascript\nPromise.resolve(undefined).then(undefined => {});\n```\n\n把 then 的第一个回调参数 (undefined) => {} 推入微任务队列。\n\nthen 执行完，才是 await async2()执行结束。\n\nawait async2()执行结束，才能继续执行后面的代码\n\n如图\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6izovbp1aj30m8037q2y.jpg)\n\n#### 此时当前宏任务 1 都执行完了，要处理微任务队列里的代码。\n\n微任务队列，先进选出的原则，\n\n1. 执行微任务 1，打印 promise2\n2. 执行微任务 2，没什么内容..\n\n但是微任务 2 执行后，await async2()语句结束，后面的代码不再被阻塞，所以打印\n\nconsole.log(‘async1 end’)\n\n#### 宏任务 1 执行完成后,执行宏任务 2\n\n宏任务 2 的执行比较简单，就是打印\n\nconsole.log(‘setTimeout’)\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"JS事件机制","url":"/2019/07/24/JS事件机制/","content":"\n# JS 事件机制\n\n## js 里一般的阻止事件默认行为怎么做？\n\nevent.preventDefault()可以取消默认事件\n\nevent.stopPropagation()起到阻止捕获和冒泡阶段中当前事件的进一步传播。\n\n<!-- more -->\n\n```javascript\nfunction cancelHandler(event) {\n  var event = event || window.event; //兼容IE\n  //取消事件相关的默认行为\n  if (event.preventDefault)\n    //标准技术\n    event.preventDefault();\n  if (event.returnValue)\n    //兼容IE9之前的IE\n    event.returnValue = false;\n  return false; //用于处理使用对象属性注册的处理程序\n}\n```\n\n## 冒泡的机制是什么？下面代码输出顺序是什么？（2->button->1）\n\n- 触发顺序：button->1->2\n\n```html\n<div><button>aaa</button></div>\n\n<script>\n  document.getElementById(\"div\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"1\");\n    },\n    false\n  );\n  document.getElementById(\"div\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"2\");\n    },\n    false\n  );\n  document.getElementById(\"button\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"button\");\n    },\n    false\n  );\n</script>\n```\n\n- 触发顺序：2->button->1\n\n```html\n<div><button>aaa</button></div>\n\n<script>\n  document.getElementById(\"div\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"1\");\n    },\n    false\n  );\n  document.getElementById(\"div\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"2\");\n    },\n    true\n  );\n  document.getElementById(\"button\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"button\");\n    },\n    false\n  );\n</script>\n```\n\n- 触发顺序：2->button->1\n\n```html\n<div><button>aaa</button></div>\n\n<script>\n  document.getElementById(\"div\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"1\");\n    },\n    false\n  );\n  document.getElementById(\"div\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"2\");\n    },\n    true\n  );\n  document.getElementById(\"button\").addEventListener(\n    \"click\",\n    function() {\n      console.log(\"button\");\n    },\n    true\n  );\n</script>\n```\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"JS静态作用域","url":"/2019/07/11/JS静态作用域/","content":"\n# JS 静态作用域\n\n## js 的作用域和别的编程语言的作用域有什么区别\n\n### 作用域\n\n作用域是指程序源代码中定义变量的区域。\n\n作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。\n\nJavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。\n\n<!-- more -->\n\n### 静态作用域与动态作用域\n\n因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。\n\n而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。\n\n让我们认真看个例子就能明白之间的区别：\n\n```javascript\nvar value = 1;\n\nfunction foo() {\n  console.log(value);\n}\n\nfunction bar() {\n  var value = 2;\n  foo();\n}\n\nbar();\n\n// 结果是 ???\n```\n\n假设 JavaScript 采用静态作用域，让我们分析下执行过程：\n\n执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。\n\n假设 JavaScript 采用动态作用域，让我们分析下执行过程：\n\n执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。\n\n前面我们已经说了，JavaScript 采用的是静态作用域，所以这个例子的结果是 1。\n\n最后，让我们看一个《JavaScript 权威指南》中的例子：\n\n```javascript\nvar scope = \"global scope\";\nfunction checkscope() {\n  var scope = \"local scope\";\n  function f() {\n    return scope;\n  }\n  return f();\n}\ncheckscope();\nvar scope = \"global scope\";\nfunction checkscope() {\n  var scope = \"local scope\";\n  function f() {\n    return scope;\n  }\n  return f;\n}\ncheckscope()();\n```\n\n猜猜两段代码各自的执行结果是多少？\n\n这里直接告诉大家结果，两段代码都会打印：`local scope`。\n\n原因也很简单，因为 JavaScript 采用的是词法作用域，函数的作用域基于函数创建的位置。\n\n而引用《JavaScript 权威指南》的回答就是：\n\nJavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。\n\n**bash 就是动态作用域**\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"https中间人攻击及防御","url":"/2019/07/03/https中间人攻击及防御/","content":"\n# https 中间人攻击及防御\n\nHTTPS 也不是绝对安全的，在 HTTPS 握手的过程中，如果实施不当，还是会存在漏洞，很容被中间人攻击；\n\n## 什么是中间人攻击\n\n**中间人攻击**（Man-in-the-middle attack，[缩写](https://zh.wikipedia.org/wiki/缩写)：MITM）是指攻击者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。在中间人攻击中，攻击者可以拦截通讯双方的通话并插入新的内容。\n\n<!-- more -->\n\n## 如何进行中间人攻击的呢？\n\n### 攻击一：SSLSniff\n\n攻击者在网关截获 SSL 会话，替换服务器公钥证书，将公钥`PKey`换成自己的公钥`PKey`，欺骗客户端。客户端使用`PKey`加密信息并发送会话，中间人用私钥`Skey`解密客户端返回会话，从而劫持会话。同时，中间人用`PKey`加密明文会话并返回服务器\n\n**过程如下：**\n\n1. `Attacker`截获了客户端的`say hello`，可以把`publicKey_attacker`返回给客户端，取得客户端的信任，至此`Attacker`与客户端建立了安全连接。\n2. `Attacker`冒充客户端向服务器发送`say hello`，至此`Attacker`与服务器建立了安全连接。\n\n这种攻击会存在一个问题会被感知到，就是`Attacker`的证书是伪造的不受信任的证书，所以客户端可以确认是否需要真的连接该服务器，不过如果有内鬼的话，伪造的受信任的证书的话，就当我啥也没说；\n\n### 攻击二：SSLStrip\n\n这种攻击相对于攻击一复杂一点，但是也更加厉害，几乎可以在客户端无感知的情况下实施攻击，并且不需要伪造证书；简单来说就是这样：`Attacker`在客户端与服务器建立连接时，在`Attacker`与服务器之间形成 HTTPS 连接，而在客户端与`Attacker`之间形成`HTTP`连接，即将 SSL 层从原 HTTPS 连接中“剥离”。这样，既避免了在客户端验证证书时难以避免的弹框问题，又能够劫持 HTTP 明文数据，并同时保证客户端`HTTP`数据的传输，达到欺骗服务器与客户端的效果。\n\n**过程如下：**\n\n用户在浏览器地址栏中输入网址时，多数会采用直接输入网址的方式，而忽略了传输所采用的协议。例如，在登录 gmail 过程中，大多数用户会直接在地址栏中输入`www.gmail.com`，向`Google`服务器发送一个 HTTP 连接请求，而不是输入`https：//www.gmail.com`， 向服务器发送一个`HTTPS`连接请求。因此，用户通常接触到 HTTPS 的方式有两种：一种是 Web 上的连接，比如当用户在 gmail 上输入用户名和密码后，点击的登录键，将用户的用户名和密码以`HTTPS`的形式`POST`到服务器。另一种是通过 HTTP 的 302 状态。 当客户端向 gmail 提出 HTTP 连接请求时，gmail 服务器会返回一个`REDIRECT`网址，`https：//www.google.com/accounts/ServiceLogin?service=mail...`，用户端在接收到这个 URL 后，将页面重定位到该网页，并请求 HTTPS 连接。 从另外一个角度讲，用户通常是通过`HTTP`向服务器发起`HTTPS`连接的。而`HTTP`本身是以明文的形式对外传送，并不能保证数据的安全。因此，可以考虑通过对 HTTP 进行劫持，来实现对 HTTPS 劫持的目的。\n\n1. 客户端向服务器发起`HTTP`连接请求；\n2. 中间人 MITM 监听客户端与服务器的`HTTP`数据；\n3. 服务器返回给客户端的 HTTP 数据包被在客户端与服务器之间的中间人截获。中间人解析原 HTTP 数据包，将其中`<a href=”https：//...”>`替换成`<a href=”http//...”>`，将 `Location： https：//...` 替换成`Location：http://..`，同时记录下所修改的 URL，并保存；\n4. 中间人将修改后的`HTTP`数据发送给客户端；\n5. 客户端向服务器发起`HTTP`连接请求；\n6. 中间人计算机解析客户端的`HTTP`连接请求，并与保存文件相比较。当发现存在有已修改过的`HTTP URL`时，将其替换成原`HTTPS URL`，并发送给服务器；\n7. 与服务器保持`HTTPS`连接，回到步骤 3；\n8. 与客户端保持`HTTP`连接，回到步骤 4。\n\n**效果就是：** 服务器认为 HTTPS 是安全的。对于客户端而言，由于中间人 MITM 与客户端 Client 之间是 HTTP 连接，因此并不会对证书进行认证；\n\n**HSTS**:为了解决这个问题，IETF（互联网工程任务小组）引入了一个策略，叫做 **HSTS** (HTTP Strict Transport Security, HTTP 严格传输安全)。HSTS 的作用是强制客户端与服务端建立安全的 HTTPS 连接，而非不安全的 HTTP 连接。如果一个站点启用了 HSTS 策略，那么客户端在第一次与该站点建立连接之后，在未来的一段时间内（由一个 HTTP 头部控制，这个头部为：Strict-Transport-Security），客户端与该站点的所有连接都会直接使用 HTTPS，_即使客户端访问的是 HTTP，也会直接在客户端重定向到 HTTPS 连接。_\n\n假设 `https://example.com` 的响应头部含有 `Strict-Transport-Security: max-age=31536000; includeSubDomains`，这意味着：\n\n1. 在未来的 1 年时间里（即 31536000 秒中），只要浏览器向 `example.com` 或者其子域名发送请求，必须采用 HTTPS 来发起连接。即使用户在地址栏里写的是 `http://example.com`，那也直接重写为 `https://example.com` 并直接发起 HTTPS 连接。\n2. 在接下去的一年中，如果服务器提供的 HTTPS 证书无效（不论是域名对不上还是自签名还是不在有效期内），用户都无法访问该站点。\n\n如果站点没有启用 HSTS，用户可以忽略证书无效的警告，继续建立连接，而如果站点启用了 HSTS，那么用户即使想冒风险，浏览器也不会继续访问。\n\nHSTS 可以很大程度上防止 SSLTrip 攻击，不过这样还是有个问题，那就是要启用 HSTS，浏览器至少要和服务器建立一次 HTTPS 连接，如果中间人一直阻止浏览器与服务器建立 HTTPS 连接，那么 HSTS 就失效了。解决这个问题有个办法，那就是将 HSTS 站点列表内置到浏览器中，这样只要浏览器**离线**判断该站点启用了 HSTS，就会跳过原先的 HTTP 重定向，直接发起 HTTPS 请求。\n\n## 如何防御中间人攻击？\n\n中间人攻击是一个（缺乏）相互认证的攻击；由于客户端与服务器之间在 SSL 握手的过程中缺乏相互认证而造成的漏洞\n\n防御中间人攻击的方案通常基于以下几种技术\n\n- 公钥基础建设 PKI，更强力的相互认证\n\n使用 PKI 相互认证机制，客户端验证服务器，服务器验证客户端；上述两个例子中都是只验证服务器，这样就造成了 SSL 握手环节的漏洞，而如果使用相互认证的的话，基本可以保证\n\n- 延迟测试\n\n使用复杂加密哈希函数进行计算以造成数十秒的延迟；如果双方通常情况下都要花费 20 秒来计算，并且整个通讯花费了 60 秒计算才到达对方，这就能表明存在第三方中间人。\n\n## https 通信安全性的保证\n\n通信过程的安全性**自下而上**就是这样保证的：\n\n1. 双方通信内容的安全性是靠公钥加密、私钥解密来保证的，这一安全性由非对称加密的特性，即由公钥加密的信息只能使用对应的私钥才能解开来保证。由于私钥不会传递，只有拥有者知道，所以*安全性就由**公钥**的正确性来保证。*\n2. 公钥由对方在通信初始所提供，但是这时很容易被中间人替换掉，为了保证公钥的正确性，所以在发送公钥的时候也会提供对应的数字证书，用于验证这个公钥是对方的而不是中间人的。那么*安全性就是由**数字证书**的正确性来保证了。*\n3. 数字证书是由上级 CA 签发给个人 / 组织的，上级 CA 用自己的私钥给个人证书进行签名，保证证书中的公钥不被篡改，而接受者需要用上级 CA 证书中的公钥来解密个人数字证书中的**数字签名**来验证证书中的公钥是否是正确的。那么*安全性就是由**上级 CA 证书**的正确性保证的了。*（**数字签名保证了数字证书没有被篡改**）\n4. 但是，上级 CA 证书也是由其上级 CA 签发的，这种信任关系一直到根证书。根证书没有上级 CA 为其签名，而是自签名的，也就是说，它自身为自身签名，保证正确性。所以根证书就是这个信任链最重要的部分。如果根证书泄露的话，其签名的所有证书及使用其签名的证书所签名的证书的安全性将不复存在。现在，_安全性就是靠系统**根证书**的私钥不被泄露或者其公钥不被篡改来保证的了。_\n5. 根证书不应该通过网络分发，因为通过网络分发的话，可能会被中间人攻击。一般根证书都通过操作系统或者浏览器分发，在操作系统中会内置很多根证书，但是最初的操作系统也不能通过网络分发，因为中间人可以修改操作系统中的根证书。所以要保证安全只能靠最原始的方法，当面交流。硬件厂商会和证书签发机构合作，在电脑、手机等设备出厂的时候在其操作系统中**内置**签发机构的根证书，再将这些设备分发出去，这样，这些设备的用户就可以安全地进行信息交换了。所以，_安全性就依赖于这些设备在分发到消费者手中之前不会被恶意修改来保证了。_\n\n至此，整个信任链就建立起来了，只需要有一台设备上安装了可以信任的根证书，就可以用来分发更多安全的操作系统了。之后的所有信任链都是安全的了。\n","tags":["安全","HTTP","浏览器"],"categories":["浏览器"]},{"title":"CSRF攻击","url":"/2019/06/18/CSRF攻击/","content":"\n# CSRF 攻击\n\n## 1.什么是 CSRF\n\nCSRF（Cross-site request forgery）跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。\n\n一个典型的 CSRF 攻击有着如下的流程：\n\n<!-- more -->\n\n- 受害者登录 a.com，并保留了登录凭证（Cookie）。\n- 攻击者引诱受害者访问了 b.com。\n- b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带 a.com 的 Cookie。\n- a.com 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。\n- a.com 以受害者的名义执行了 act=xx。\n- 攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 a.com 执行了自己定义的操作。\n\n## 2.常见的攻击类型\n\n- **GET 类型的 CSRF**\n\nGET 类型的 CSRF 利用非常简单，只需要一个 HTTP 请求，一般会这样利用：\n\n```html\n<img src=\"http://bank.example/withdraw?amount=10000&for=hacker\" />\n```\n\n在受害者访问含有这个 img 的页面后，浏览器会自动向`http://bank.example/withdraw?account=xiaoming&amount=10000&for=hacker`发出一次 HTTP 请求。bank.example 就会收到包含受害者登录信息的一次跨域请求。\n\n- **POST 类型的 CSRF**\n\n这种类型的 CSRF 利用起来通常使用的是一个自动提交的表单，如：\n\n```html\n<form action=\"http://bank.example/withdraw\" method=\"POST\">\n  <input type=\"hidden\" name=\"account\" value=\"xiaoming\" />\n  <input type=\"hidden\" name=\"amount\" value=\"10000\" />\n  <input type=\"hidden\" name=\"for\" value=\"hacker\" />\n</form>\n<script>\n  document.forms[0].submit();\n</script>\n```\n\n访问该页面后，表单会自动提交，相当于模拟用户完成了一次 POST 操作。\n\nPOST 类型的攻击通常比 GET 要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许 POST 上面。\n\n- **链接类型的 CSRF**\n\n链接类型的 CSRF 并不常见，比起其他两种用户打开页面就中招的情况，这种需要用户点击链接才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：\n\n```html\n<a\n  href=\"http://test.com/csrf/withdraw.php?amount=1000&for=hacker\"\n  taget=\"_blank\"\n>\n  重磅消息！！\n  <a\n/></a>\n```\n\n由于之前用户登录了信任的网站 A，并且保存登录状态，只要用户主动访问上面的这个 PHP 页面，则表示攻击成功。\n\n## 3.CSRF 的特点\n\n- 攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。\n- 攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。\n- 整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。\n- 跨站请求可以用各种方式：图片 URL、超链接、CORS、Form 提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。\n\nCSRF 通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。\n\n## 4.防护策略\n\nCSRF 通常从第三方网站发起，被攻击的网站无法防止攻击发生，只能通过增强自己网站针对 CSRF 的防护能力来提升安全性。\n\n上文中讲了**CSRF 的两个特点：**\n\n- CSRF（通常）发生在第三方域名。\n- CSRF 攻击者不能获取到 Cookie 等信息，只是使用。\n\n针对这两点，我们可以专门制定防护策略，如下：\n\n- 阻止不明外域的访问\n  - 同源检测\n  - Samesite Cookie\n- 提交时要求附加本域才能获取的信息\n  - CSRF Token\n  - 双重 Cookie 验证\n\n### 同源检测\n\n既然 CSRF 大多来自第三方网站，那么我们就直接禁止外域（或者不受信任的域名）对我们发起请求。\n\n我们如何判断请求是否来自外域呢？\n\n在 HTTP 协议中，每一个*异步请求*都会携带两个 Header，用于标记来源域名：\n\n- Origin Header\n- Referer Header\n\n这两个 Header 在浏览器发起请求时，大多数情况会自动带上，并且*不能由前端自定义内容。*\n服务器可以通过解析这两个 Header 中的域名，确定请求的来源域。\n\n##### 1. 使用 Origin Header 确定来源域名\n\n在部分与 CSRF 有关的请求中，请求的 Header 中会携带 Origin 字段。字段内包含请求的域名（不包含 path 及 query）。\n\n如果 Origin 存在，那么直接使用 Origin 中的字段确认来源域名就可以。\n\n但是 Origin 在以下两种情况下并不存在：\n\n- **IE11 同源策略：** IE 11 不会在跨站 CORS 请求上添加 Origin 标头，Referer 头将仍然是唯一的标识。最根本原因是因为 IE 11 对同源的定义和其他浏览器有不同，有两个主要的区别，可以参考[MDN Same-origin_policy#IE_Exceptions](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#IE_Exceptions)\n- **302 重定向：** 在 302 重定向之后 Origin 不包含在重定向的请求中，因为 Origin 可能会被认为是其他来源的敏感信息。对于 302 重定向的情况来说都是定向到新的服务器上的 URL，因此浏览器不想将 Origin 泄漏到新的服务器上。\n\n##### 2. 使用 Referer Header 确定来源域名\n\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，记录了该 HTTP 请求的来源地址。\n对于 Ajax 请求，图片和 script 等资源请求，Referer 为发起请求的页面地址。对于页面跳转，Referer 为打开页面历史记录的前一个页面地址。因此我们使用 Referer 中链接的 Origin 部分可以得知请求的来源域名。\n\n这种方法并非万无一失，Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 Referer 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 Referer 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不是很安全。在部分情况下，攻击者可以隐藏，甚至修改自己请求的 Referer。\n\n2014 年，W3C 的 Web 应用安全工作组发布了 Referrer Policy 草案，对浏览器该如何发送 Referer 做了详细的规定。截止现在新版浏览器大部分已经支持了这份草案，我们终于可以灵活地控制自己网站的 Referer 策略了。新版的 Referrer Policy 规定了五种 Referer 策略：No Referrer、No Referrer When Downgrade、Origin Only、Origin When Cross-origin、和 Unsafe URL。之前就存在的三种策略：never、default 和 always，在新标准里换了个名称。他们的对应关系如下：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyglvo3mj31bo0e63yy.jpg)\n\n根据上面的表格因此需要把 Referrer Policy 的策略设置成 same-origin，对于同源的链接和引用，会发送 Referer，referer 值为 Host 不带 Path；跨域访问则不携带 Referer。例如：`aaa.com`引用`bbb.com`的资源，不会发送 Referer。\n\n设置 Referrer Policy 的方法有三种：\n\n1. 在 CSP 设置\n2. 页面头部增加 meta 标签\n3. a 标签增加 referrerpolicy 属性\n\n**攻击者可以在自己的请求中隐藏 Referer。**\n\n另外在以下情况下 Referer 没有或者不可信：\n\n1. IE6、7 下使用 window.location.href=url 进行界面的跳转，会丢失 Referer。\n2. IE6、7 下使用 window.open，也会缺失 Referer。\n3. HTTPS 页面跳转到 HTTP 页面，所有浏览器 Referer 都丢失。\n4. 点击 Flash 上到达另外一个网站的时候，Referer 的情况就比较杂乱，不太可信。\n\n##### 无法确认来源域名情况\n\n当 Origin 和 Referer 头文件不存在时该怎么办？如果 Origin 和 Referer 都不存在，建议直接进行阻止，特别是如果您没有使用随机 CSRF Token（参考下方）作为第二次检查。\n\n##### 如何阻止外域请求\n\n通过 Header 的验证，我们可以知道发起请求的来源域名，这些来源域名可能是网站本域，或者子域名，或者有授权的第三方域名，又或者来自不可信的未知域名。\n\nCSRF 大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等，统称 UGC），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。\n\n综上所述：同源验证是一个相对简单的防范方法，能够防范绝大多数的 CSRF 攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。\n\n### CSRF Token\n\n我们可以要求所有的用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确的 Token，来把正常的请求和攻击的请求区分开，也可以防范 CSRF 的攻击。\n\nCSRF Token 的防护策略分为三个步骤：\n\n1. 将 CSRF Token 输出到页面中\n\n   首先，用户打开页面的时候，服务器需要给这个用户生成一个 Token，该 Token 通过加密算法对数据进行加密，一般 Token 都包括随机字符串和时间戳的组合，显然在**提交时 Token 不能再放在 Cookie 中了，否则又会被攻击者冒用。因此，为了安全起见 Token 最好还是存在服务器的 Session 中**，之后在每次页面加载时，使用 JS 遍历整个 DOM 树，对于 DOM 中所有的 a 和 form 标签后加入 Token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 HTML 代码，这种方法就没有作用，还需要程序员在编码时手动添加 Token。\n\n2. 页面提交的请求携带这个 Token\n\n   对于 GET 请求，Token 将附在请求地址之后，这样 URL 就变成 [http://url?csrftoken=tokenvalue](http://url/?csrftoken=tokenvalue)。 而对于 POST 请求来说，要在 form 的最后加上：\n\n```html\n<input type=\"”hidden”\" name=\"”csrftoken”\" value=\"”tokenvalue”\" />\n```\n\n​ 这样，就把 Token 以参数的形式加入请求了。\n\n3. 服务器验证 Token 是否正确\n\n   当用户从客户端得到了 Token，再次提交给服务器的时候，服务器需要判断 Token 的有效性，验证过程是先解密 Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个 Token 就是有效的。\n\n   这种方法要比之前检查 Referer 或者 Origin 要安全一些，Token 可以在产生并放于 Session 之中，然后在每次请求时把 Token 从 Session 中拿出，与请求中的 Token 进行比对，但这种方法的比较麻烦的在于如何把 Token 以参数的形式加入请求。\n\n   ### 分布式校验\n\n在大型网站中，使用 Session 存储 CSRF Token 会带来很大的压力。访问单台服务器 session 是同一个。但是现在的大型网站中，我们的服务器通常不止一台，可能是几十台甚至几百台之多，甚至多个机房都可能在不同的省份，用户发起的 HTTP 请求通常要经过像 Ngnix 之类的负载均衡器之后，再路由到具体的服务器上，由于 Session 默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次 HTTP 请求可能会先后落到不同的服务器上，导致后面发起的 HTTP 请求无法拿到之前的 HTTP 请求存储在服务器中的 Session 数据，从而使得 Session 机制在分布式环境下失效，因此在分布式集群中 CSRF Token 需要存储在 Redis 之类的公共存储空间。\n\n由于使用 Session 存储，读取和验证 CSRF Token 会引起比较大的复杂度和性能问题，目前很多网站采用 Encrypted Token Pattern 方式。这种方法的 Token 是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的 Token，只用再次计算一次即可。\n\n这种 Token 的值通常是使用 UserID、时间戳和随机数，通过加密的方法生成。这样既可以保证分布式服务的 Token 一致，又能保证 Token 不容易被破解。\n\n在 token 解密成功之后，服务器可以访问解析值，Token 中包含的 UserID 和时间戳将会被拿来被验证有效性，将 UserID 与当前登录的 UserID 进行比较，并将时间戳与当前时间进行比较。\n\n### 双重 Cookie 验证\n\n使用双重提交 Cookie。利用 CSRF 攻击不能获取到用户 Cookie 的特点，我们可以要求 Ajax 和表单请求携带一个 Cookie 中的值。\n\n双重 Cookie 采用以下流程：\n\n- 在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串（例如`csrfcookie=v8g9e4ksfhw`）。\n- 在前端向后端发起请求时，取出 Cookie，并添加到 URL 的参数中（接上例`POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw`）。\n- 后端接口验证 Cookie 中的字段与 URL 参数中的字段是否一致，不一致则拒绝。\n\n此方法相对于 CSRF Token 就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储 Token。\n\n由于任何跨域都会导致前端无法获取 Cookie 中的字段（包括子域名之间），于是发生了如下情况：\n\n- 如果用户访问的网站为`www.a.com`，而后端的 api 域名为`api.a.com`。那么在`www.a.com`下，前端拿不到`api.a.com`的 Cookie，也就无法完成双重 Cookie 认证。\n- 于是这个认证 Cookie 必须被种在`a.com`下，这样每个子域都可以访问。\n- 任何一个子域都可以修改`a.com`下的 Cookie。\n- 某个子域名存在漏洞被 XSS 攻击（例如`upload.a.com`）。虽然这个子域下并没有什么值得窃取的信息。但攻击者修改了`a.com`下的 Cookie。\n- 攻击者可以直接使用自己配置的 Cookie，对 XSS 中招的用户再向`www.a.com`下，发起 CSRF 攻击。\n\n**总结**\n\n用双重 Cookie 防御 CSRF 的优点：\n\n- 无需使用 Session，适用面更广，易于实施。\n- Token 储存于客户端中，不会给服务器带来压力。\n- 相对于 Token，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。\n\n缺点：\n\n- Cookie 中增加了额外的字段。\n- 如果有其他漏洞（例如 XSS），攻击者可以注入 Cookie，那么该防御方式失效。\n- 难以做到子域名的隔离。\n- 为了确保 Cookie 传输安全，采用这种防御方式最好确保用整站 HTTPS 的方式，如果还没切 HTTPS 的使用这种方式也会有风险。\n\n### Samesite Cookie 属性\n\nSet-Cookie 响应头新增 Samesite 属性，它用来标明这个 Cookie 是个“同站 Cookie”，同站 Cookie 只能作为第一方 Cookie，不能作为第三方 Cookie，Samesite 有两个属性值，分别是 Strict 和 Lax\n\n1. ##### Samesite=Strict\n\n   这种称为严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie，绝无例外。比如说 b.com 设置了如下 Cookie：\n\n   ```http\n   Set-Cookie: foo=1; Samesite=Strict\n   Set-Cookie: bar=2; Samesite=Lax\n   Set-Cookie: baz=3\n   ```\n\n   我们在 a.com 下发起对 b.com 的任意请求，foo 这个 Cookie 都不会被包含在 Cookie 请求头中，但 bar 会。举个实际的例子就是，假如淘宝网站用来识别用户登录与否的 Cookie 被设置成了 Samesite=Strict，那么用户从百度搜索页面甚至天猫页面的链接点击进入淘宝后，淘宝都不会是登录状态，因为淘宝的服务器不会接受到那个 Cookie，其它网站发起的对淘宝的任意请求都不会带上那个 Cookie。\n\n2. ##### Samesite=Lax\n\n   这种称为宽松模式，比 Strict 放宽了点限制：假如这个请求是这种请求（改变了当前页面或者打开了新页面）且同时是个 GET 请求，则这个 Cookie 可以作为第三方 Cookie。\n\n   当用户从 a.com 点击链接进入 b.com 时，foo 这个 Cookie 不会被包含在 Cookie 请求头中，但 bar 和 baz 会，也就是说用户在不同网站之间通过链接跳转是不受影响了。但假如这个请求是从 a.com 发起的对 b.com 的异步请求，或者页面跳转是通过表单的 post 提交触发的，则 bar 也不会发送。\n\n生成 Token 放到 Cookie 中并且设置 Cookie 的 Samesite\n\n##### 我们应该如何使用 SamesiteCookie\n\n如果 SamesiteCookie 被设置为 Strict，浏览器在任何跨域请求中都不会携带 Cookie，新标签重新打开也不携带，所以说 CSRF 攻击基本没有机会。\n\n但是跳转子域名或者是新标签重新打开刚登陆的网站，之前的 Cookie 都不会存在。尤其是有登录的网站，那么我们新打开一个标签进入，或者跳转到子域名的网站，都需要重新登录。对于用户来讲，可能体验不会很好。\n\n如果 SamesiteCookie 被设置为 Lax，那么其他网站通过页面跳转过来的时候可以使用 Cookie，可以保障外域连接打开页面时用户的登录状态。但相应的，其安全性也比较低。\n\n另外一个问题是 Samesite 的兼容性不是很好，现阶段除了从新版 Chrome 和 Firefox 支持以外，Safari 以及 iOS Safari 都还不支持，现阶段看来暂时还不能普及。\n\n而且，SamesiteCookie 目前有一个致命的缺陷：不支持子域。例如，种在 topic.a.com 下的 Cookie，并不能使用 a.com 下种植的 SamesiteCookie。这就导致了当我们网站有多个子域名时，不能使用 SamesiteCookie 在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。\n\n总之，SamesiteCookie 是一个可能替代同源验证的方案，但目前还并不成熟，其应用场景有待观望。\n\n## 5.防止网站被利用（防止攻击的发生）\n\nCSRF 的攻击可以来自：\n\n- 攻击者自己的网站。\n- 有文件上传漏洞的网站。\n- 第三方论坛等用户内容。\n- 被攻击网站自己的评论功能等。\n\n如何防止自己的网站被利用成为攻击的源头呢？\n\n- 严格管理所有的上传接口，防止任何预期之外的上传内容（例如 HTML）。\n- 添加 Header `X-Content-Type-Options: nosniff` 防止黑客上传 HTML 内容的资源（例如图片）被解析为网页。\n- 对于用户上传的图片，进行转存或者校验。不要直接使用用户填写的图片链接。\n- 当前用户打开其他用户填写的链接时，需告知风险（这也是很多论坛不允许直接在内容中发布外域链接的原因之一，不仅仅是为了用户留存，也有安全考虑）。\n\n## 6.CSRF 其他防范措施\n\n#### CSRF 测试\n\nCSRFTester 是一款 CSRF 漏洞的测试工具，CSRFTester 工具的测试原理大概是这样的，使用代理抓取我们在浏览器中访问过的所有的连接以及所有的表单等信息，通过在 CSRFTester 中修改相应的表单等信息，重新提交，相当于一次伪造客户端请求，如果修改后的测试请求成功被网站服务器接受，则说明存在 CSRF 漏洞，当然此款工具也可以被用来进行 CSRF 攻击。\nCSRFTester 使用方法大致分下面几个步骤：\n\n- 步骤 1：设置浏览器代理\n\nCSRFTester 默认使用 Localhost 上的端口 8008 作为其代理，如果代理配置成功，CSRFTester 将为您的浏览器生成的所有后续 HTTP 请求生成调试消息。\n\n- 步骤 2：使用合法账户访问网站开始测试\n\n我们需要找到一个我们想要为 CSRF 测试的特定业务 Web 页面。找到此页面后，选择 CSRFTester 中的“开始录制”按钮并执行业务功能；完成后，点击 CSRFTester 中的“停止录制”按钮；正常情况下，该软件会全部遍历一遍当前页面的所有请求。\n\n- 步骤 3：通过 CSRF 修改并伪造请求\n\n之后，我们会发现软件上有一系列跑出来的记录请求，这些都是我们的浏览器在执行业务功能时生成的所有 GET 或者 POST 请求。通过选择列表中的某一行，我们现在可以修改用于执行业务功能的参数，可以通过点击对应的请求修改 query 和 form 的参数。当修改完所有我们希望诱导用户 form 最终的提交值，可以选择开始生成 HTML 报告。\n\n- 步骤 4：拿到结果如有漏洞进行修复\n\n首先必须选择“报告类型”。报告类型决定了我们希望受害者浏览器如何提交先前记录的请求。目前有 5 种可能的报告：表单、iFrame、IMG、XHR 和链接。一旦选择了报告类型，我们可以选择在浏览器中启动新生成的报告，最后根据报告的情况进行对应的排查和修复。\n\n#### CSRF 监控\n\n对于一个比较复杂的网站系统，某些项目、页面、接口漏掉了 CSRF 防护措施是很可能的。\n\n一旦发生了 CSRF 攻击，我们如何及时的发现这些攻击呢？\n\nCSRF 攻击有着比较明显的特征：\n\n- 跨域请求。\n- GET 类型请求 Header 的 MIME 类型大概率为图片，而实际返回 Header 的 MIME 类型为 Text、JSON、HTML。\n\n我们可以在网站的代理层监控所有的接口请求，如果请求符合上面的特征，就可以认为请求有 CSRF 攻击嫌疑。我们可以提醒对应的页面和项目负责人，检查或者 Review 其 CSRF 防护策略。\n\n### 个人用户 CSRF 安全的建议\n\n经常上网的个人用户，可以采用以下方法来保护自己：\n\n- 使用网页版邮件的浏览邮件或者新闻也会带来额外的风险，因为查看邮件或者新闻消息有可能导致恶意代码的攻击。\n- 尽量不要打开可疑的链接，一定要打开时，使用不常用的浏览器。\n","tags":["JavaScript","安全"],"categories":["安全"]},{"title":"XSS攻击","url":"/2019/06/13/XSS攻击/","content":"\n# XSS 攻击\n\n## 1.什么是 XSS\n\nCross-Site Scripting（跨站脚本攻击）简称 XSS，是一种代码注入攻击。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。\n\n为了和 CSS 区分，这里把攻击的第一个字母改成了 X，于是叫做 XSS。\n\nXSS 的本质是：恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。\n\n  <!-- more -->\n\n而由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求。\n\n在处理输入时，以下内容都不可信：\n\n- 来自用户的 UGC 信息\n- 来自第三方的链接\n- URL 参数\n- POST 参数\n- Referer （可能来自不可信的来源）\n- Cookie （可能来自其他子域注入）\n\n## 2.XSS 分类\n\n根据攻击的来源，XSS 攻击可分为存储型、反射型和 DOM 型三种。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5yj76xtj31by0ecgm2.jpg)\n\n#### 存储型 XSS\n\n存储型 XSS 的攻击步骤：\n\n1. 攻击者将恶意代码提交到目标网站的数据库中。\n2. 用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。\n3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。\n4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。\n\n这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。\n\n#### 反射型 XSS\n\n反射型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. 用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。\n3. 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。\n4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。\n\n反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。\n\n反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。\n\n由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。\n\nPOST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见。\n\n#### DOM 型 XSS\n\nDOM 型 XSS 的攻击步骤：\n\n1. 攻击者构造出特殊的 URL，其中包含恶意代码。\n2. 用户打开带有恶意代码的 URL。\n3. 用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。\n4. 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。\n\nDOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。\n\n## 3.XSS 的预防\n\nXSS 攻击有两大要素：\n\n1. 攻击者提交恶意代码。\n2. 浏览器执行恶意代码。\n\n- ### 输入过滤\n\n  输入侧过滤能够在某些情况下解决特定的 XSS 问题，但会引入很大的不确定性和乱码问题。\n\n  对于明确的输入类型，例如数字、URL、电话号码、邮件地址等等内容，进行输入过滤还是必要的。\n\n  输入过滤并非完全可靠，我们就要通过“防止浏览器执行恶意代码”来防范 XSS。这部分分为两类：\n\n  - 防止 HTML 中出现注入。\n  - 防止 JavaScript 执行时，执行恶意代码。\n\n- ### 预防存储型和反射型 XSS 攻击\n\n  预防这两种漏洞，有两种常见做法：\n\n  - 改成纯前端渲染，把代码和数据分隔开。\n\n    纯前端渲染的过程：\n\n    1. 浏览器先加载一个静态 HTML，此 HTML 中不包含任何跟业务相关的数据。\n    2. 然后浏览器执行 HTML 中的 JavaScript。\n    3. JavaScript 通过 Ajax 加载业务数据，调用 DOM API 更新到页面上。\n\n    在纯前端渲染中，我们会明确的告诉浏览器：下面要设置的内容是文本（`.innerText`），还是属性（`.setAttribute`），还是样式（`.style`）等等。浏览器不会被轻易的被欺骗，执行预期外的代码了。\n\n    但纯前端渲染还需注意避免 DOM 型 XSS 漏洞\n\n  - 对 HTML 做充分转义。\n\n    **转义应该在输出 HTML 时进行，而不是在提交用户输入时。**\n\n    常用的模板引擎，如 doT.js、ejs、FreeMarker 等，对于 HTML 转义通常只有一个规则，就是把 `& < > \" ' /` 这几个字符转义掉，确实能起到一定的 XSS 防护作用，但并不完善：\n\n  ![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5yiazcnj31by0giaac.jpg)\n\n- ### 预防 DOM 型 XSS 攻击\n\n  1. 在使用 `.innerHTML`、`.outerHTML`、`document.write()` 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 `.textContent`、`.setAttribute()` 等。\n  2. 如果用 Vue/React 技术栈，并且不使用 `v-html`/`dangerouslySetInnerHTML` 功能，就在前端 render 阶段避免 `innerHTML`、`outerHTML` 的 XSS 隐患。\n  3. DOM 中的内联事件监听器，如 `location`、`onclick`、`onerror`、`onload`、`onmouseover` 等，`<a>` 标签的 `href` 属性，JavaScript 的 `eval()`、`setTimeout()`、`setInterval()` 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。\n\n## 4.其他 XSS 防范措施\n\n### Content Security Policy\n\n严格的 CSP 在 XSS 的防范中可以起到以下的作用：\n\n- 禁止加载外域代码，防止复杂的攻击逻辑。\n- 禁止外域提交，网站被攻击后，用户的数据不会泄露到外域。\n- 禁止内联脚本执行（规则较严格，目前发现 GitHub 使用）。\n- 禁止未授权的脚本执行（新特性，Google Map 移动版在使用）。\n- 合理使用上报可以及时发现 XSS，利于尽快修复问题。\n\n### 输入内容长度控制\n\n对于不受信任的输入，都应该限定一个合理的长度。虽然无法完全防止 XSS 发生，但可以增加 XSS 攻击的难度。\n\n### 其他安全措施\n\n- HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。\n- 验证码：防止脚本冒充用户提交危险操作。\n\n## 5.XSS 漏洞总结\n\n### 漏洞总结\n\n- 在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。\n- 在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。\n- 在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。\n- 在标签的 href、src 等属性中，包含 `javascript:` 等可执行代码。\n- 在 onload、onerror、onclick 等事件中，注入不受控制代码。\n- 在 style 属性和标签中，包含类似 `background-image:url(\"javascript:...\");` 的代码（新版本浏览器已经可以防范）。\n- 在 style 属性和标签中，包含类似 `expression(...)` 的 CSS 表达式代码（新版本浏览器已经可以防范）。\n\n总之，如果开发者没有将用户输入的文本进行合适的过滤，就贸然插入到 HTML 中，这很容易造成注入漏洞。攻击者可以利用漏洞，构造出恶意的代码指令，进而利用恶意代码危害数据安全。\n\n- 内联 JSON 也是不安全的：\n  - 当 JSON 中包含 `U+2028` 或 `U+2029` 这两个字符时，不能作为 JavaScript 的字面量使用，否则会抛出语法错误。\n  - 当 JSON 中包含字符串 `</script>` 时，当前的 script 标签将会被闭合，后面的字符串内容浏览器会按照 HTML 进行解析；通过增加下一个 `<script>` 标签等方法就可以完成注入。\n\n## 6.减少漏洞产生的原则\n\n- **利用模板引擎**\n  开启模板引擎自带的 HTML 转义功能。例如：\n  在 ejs 中，尽量使用 `<%= data %>` 而不是 `<%- data %>`；\n  ![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j6vu6iq2j30ns01gjr9.jpg)\n  在 FreeMarker 中，确保引擎版本高于 2.3.24，并且选择正确的 `freemarker.core.OutputFormat`。\n- **避免内联事件**\n  尽量不要使用 `onLoad=\"onload('{{data}}')\"`、`onClick=\"go('{{action}}')\"` 这种拼接内联事件的写法。在 JavaScript 中通过 `.addEventlistener()` 事件绑定会更安全。\n- **避免拼接 HTML**\n  前端采用拼接 HTML 的方法比较危险，如果框架允许，使用 `createElement`、`setAttribute` 之类的方法实现。或者采用比较成熟的渲染框架，如 Vue/React 等。\n- **时刻保持警惕**\n  在插入位置为 DOM 属性、链接等位置时，要打起精神，严加防范。\n- **增加攻击难度，降低攻击后果**\n  通过 CSP、输入长度配置、接口安全措施等方法，增加攻击的难度，降低攻击的后果。\n- **主动检测和发现**\n  可使用 XSS 攻击字符串和自动扫描工具寻找潜在的 XSS 漏洞。\n\n## 7.vue react 框架对 xss 的防护有做什么？\n\n- VUE\n\n  - 尽量使用插值表达式(双花括号)，它会把要显示的内容转为字符串。\n  - - 如果使用`v-html`，要保证来自服务端的渲染数据都是安全的。\n  - 在使用第三方 UI 组件库的的时候，要检查一下它们渲染页面的方式，是否使用了`v-html`\n\n- REACT\n\n  XSS 防御措施就是对任何用户输入的信息进行处理，只允许合法值，其它值一概过滤掉\n\n  1. 所有的用户输入都需要经过 HTML 实体编码，React 已经做了，它会在运行时动态创建 DOM 节点然后填入文本内容 (也可以强制设置 HTML 内容，不过这样比较危险)\n  2. 序列化某些状态并且传给客户端的时候，也进行 HTML 实体编码，可以使用 Yahoo 的 Serialize JavaScript 中的 serialize 方法替换 JSON.stringify 方法，Serialize JavaScript 中的方法会自动将 HTML 和 JavaScript 代码进行转码，GitHub 访问地址 : https://github.com/yahoo/serialize-javascript\n\n  默认情况下，React DOM 在重新渲染页面时将所有进行转码，官方宣称在 React 应用中确保不会注入任何没显式编写的数据，所有的数据在页面渲染之前都会被转换成字符串，这防止 XSS 进攻\n\n## 8.xss 攻击后果？\n\n恶意代码未经过滤，与网站正常的代码混在一起；浏览器无法分辨哪些脚本是可信的，导致恶意脚本被执行。\n\n而由于直接在用户的终端执行，恶意代码能够直接获取用户的信息，或者利用这些信息冒充用户向网站发起攻击者定义的请求。\n\n## 9.需要转义的字符？\n\n- `escapeHTML()` 按照如下规则进行转义：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5yh9feqj30ne0gqglm.jpg)\n\n- 连 `javascript:` 这样的字符串如果出现在特定的位置也会引发 XSS 攻击。\n\n  `%20javascript:alert('XSS')` 经过 URL 解析后变成 `javascript:alert('XSS')`，这个字符串以空格开头。这样攻击者可以绕过后端的关键词规则，又成功的完成了注入。\n\n- 插入 JSON 的地方不能使用 `escapeHTML()`，因为转义 `\"` 后，JSON 格式会被破坏。\n\n  要实现一个 `escapeEmbedJSON()` 函数，对内联 JSON 进行转义。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j5ygpakdj31bk0csq2y.jpg)\n","tags":["JavaScript","安全"],"categories":["安全"]},{"title":"ES6 的新特性总结","url":"/2019/06/01/ES6 的新特性总结/","content":"\n# ES6 的新特性\n\n## 1. 数组的拓展\n\n### 数组的方法\n\n- `array.concat(array1, array2,…arrayN)`合并多个数组，返回合并后的新数组，原数组没有变化。\n- `array.every(callback[, thisArg])`检测数组中的每一个元素是否都通过了 callback 测试，全部通过返回 true，否则返回 false。\n- `array.filter(callback[, thisArg])`返回一个新数组，包含通过 callback 函数测试的所有元素。(callback 定义，三个参数： element:当前元素值；index：当前元素下标； array:当前数组)\n- `array.find(callback[, thisArg])`返回通过 callback 函数测试的第一个元素，否则返回 undefined，callback 函数定义同上。\n  <!-- more -->\n- `array.findIndex(callback[, thisArg])`返回通过 callback 函数测试的第一个元素的索引，否则返回-1，callback 函数定义同上。\n- `array.includes(searchElement, fromIndex)`includes() 方法用来判断一个数组是否包含一个指定的值，返回 true 或 false。searchElement：要查找的元素；fromIndex：开始查找的索引位置。\n- `array.indexOf(searchElement[, fromIndex = 0])`返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。searchElement：要查找的元素；fromIndex：开始查找的索引位置。\n- `array.join(separator=',')`将数组中的元素通过 separator 连接成字符串，并返回该字符串，separator 默认为\",\"。\n- `array.map(callback[, thisArg])`返回一个新数组，新数组中的每个元素都是调用 callback 函数后返回的结果。注意：如果没有 return 值，则新数组会插入一个 undefined 值。array.map 由于不具有过滤的功能，因此 array 调用 map 函数时，如果 array 中的数据并不是每一个都会 return，则必须先 filter，然后再 map，即 map 调用时必须是对数组中的每一个元素都有效。\n- `array.pop() 与 array.shift()`pop 为从数组中删除最后一个元素，并返回最后一个元素的值，原数组的最后一个元素被删除。数组为空时返回 undefined。shift 删除数组的第一个元素，并返回第一个元素，原数组的第一个元素被删除。数组为空返回 undefined。\n- `array.push(element1, element2, ....elementN) 与 array.unshift(element1, element2, ...elementN)`push 是将一个或多个元素添加到数组的末尾，并返回新数组的长度; unshift 将一个或多个元素添加到数组的开头，并返回新数组的长度。唯一的区别就是插入的位置不同。\n- `array.reduce(callback[, initialValue])`对数组中的每个元素（从左到右）执行 callback 函数累加，将其减少为单个值。\n- `array.reverse()`将数组中元素的位置颠倒。\n- `array.slice(begin, end)`返回一个新数组，包含原数组从 begin 到 end(不包含 end)索引位置的所有元素。\n- `array.some(callback[, thisArg])`判断数组中是否包含可以通过 callback 测试的元素，与 every 不同的是，这里只要某一个元素通过测试，即返回 true。callback 定义同上。\n- `array.sort([compareFunction])`对数组中的元素进行排序，compareFunction 不存在时，元素按照转换为的字符串的诸个字符的 Unicode 位点进行排序，慎用！请使用时一定要加 compareFunction 函数，而且该排序是不稳定的。\n- `array.splice(start[, deleteCount, item1, item2, ...])`通过删除现有元素和/或添加新元素来更改一个数组的内容。start:指定修改的开始位置；deleteCount：从 start 位置开始要删除的元素个数；item...：要添加进数组的元素,从 start 位置开始。返回值是由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。\n\n注：push、 shift、 pop、 unshift、 reverse、 sort、 splice 方法会对原来的数组进行修改，其他的数组操作方法只有返回值不同，对原数组都没有影响，即原数组不变。\n\n### ES6 中对数组的扩展\n\n- Array.from() : 将伪数组对象或可遍历对象转换为真数组\n\n- Array.of(v1, v2, v3) : 将一系列值转换成数组。\n\n  当使用单个数值参数来调用 Array 构造器时，数组的长度属性会被设置为该参数。 如果使用多个参数(无论是否为数值类型)来调用，这些参数也会成为目标数组的项。数组的这种行为既混乱又有风险，因为有时可能不会留意所传参数的类型。\n\n  Array.of( )方法总会创建一个包含所有传入参数的数组，而不管参数的数量与类型\n\n  ```javascript\n  let items = Array.of(1, 2);\n  console.log(items.length); // 2\n  console.log(items[0]); // 1\n  console.log(items[1]); // 2\n  items = Array.of(2);\n  console.log(items.length); // 1\n  console.log(items[0]); // 2\n  ```\n\n  Array.of 基本上可以用来替代 Array()或 newArray()，并且不存在由于参数不同而导致的重载，而且他们的行为非常统一。\n\n- 数组实例的 find() 和 findIndex()\n\n  - find 方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为 true 的成员，然后返回该成员。如果没有符合条件的成员，则返回 undefined。\n\n    ```javascript\n    [1, 4, -5, 10].find(n => n < 0); // -5\n    ```\n\n* findIndex 方法的用法与 find 方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。\n\n  ```javascript\n  [1, 5, 10, 15].findIndex(function(value, index, arr) {\n    return value > 9;\n  }); // 2\n  ```\n\n* 数组实例的 includes()\n\n  Array.prototype.includes 方法返回一个布尔值，表示某个数组是否包含给定的值。该方法的第二个参数表示搜索的起始位置，默认为 0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为 3），则会重置为从 0 开始。\n\n  ```javascript\n  [1, 2, 3]\n    .includes(2) // true\n    [(1, 2, 3)].includes(3, -1); // true\n  [1, 2, 3, 5, 1].includes(1, 2); // true\n  ```\n\n  没有该方法之前，我们通常使用数组的 indexOf 方法，检查是否包含某个值。它内部使用严格相等运算符（===）进行判断，这会导致对 NaN 的误判。\n\n  ```javascript\n  [NaN]\n    .indexOf(NaN) // -1\n    [NaN].includes(NaN); // true\n  ```\n\n* 数组实例的 entries()，keys() 和 values()\n\n  它们都返回一个遍历器对象，可以用 for...of 循环进行遍历，唯一的区别是 keys()是对键名的遍历、values()是对键值的遍历，entries()是对键值对的遍历。\n\n  ```javascript\n  for (let index of [\"a\", \"b\"].keys()) {\n    console.log(index);\n  }\n  // 0\n  // 1\n\n  for (let elem of [\"a\", \"b\"].values()) {\n    console.log(elem);\n  }\n  // 'a'\n  // 'b'\n\n  for (let [index, elem] of [\"a\", \"b\"].entries()) {\n    console.log(index, elem);\n  }\n  // 0 \"a\"\n  // 1 \"b\"\n  ```\n\n## 2. 箭头函数\n\n- 缩减代码和改变 this 指向\n- 使用注意点：\n  - 函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。\n  - 不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。\n  - 不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n  - 不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。\n\n## 3. rest 参数\n\n- 用于获取函数的多余参数，这样就不需要使用 arguments 对象了。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。\n- 注意点：\n  - 每个函数最多只能声明一个 rest 参数，而且 rest 参数必须是最后一个参数，否则报错。\n  - rest 参数不能用于对象字面量 setter 之中\n\n## 4. 展开运算符\n\n剩余参数允许你把多个独立的参数合并到一个数组中；而扩展运算符则允许将一个数组分割，并将各个项作为分离的参数传给函数。\n\n## 5. 解构赋值----更方便的数据访问\n\n## 6. 模板字符串\n\n用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。模板字符串中嵌入变量和函数，需要将变量名写在\\${}之中。\n\n## 7. class 类\n\n## 8. promise\n\n## 9. Iterator 和 for...of 循环\n\nJavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 添加了 Map 和 Set。\n\n任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。\n\n- Iterator 的作用：\n  - 为各种数据结构，提供一个统一的、简便的访问接口；\n  - 使得数据结构的成员能够按某种次序排列\n  - ES6 创造了一种新的遍历命令 for...of 循环，Iterator 接口主要供 for...of 消费。\n- 原生具备 iterator 接口的数据(可用 for of 遍历)\n  - Array\n  - set 容器\n  - map 容器\n  - String\n  - 函数的 arguments 对象\n  - NodeList 对象\n- 几种遍历方式比较\n  - for of 循环不仅支持数组、大多数伪数组对象，也支持字符串遍历，此外还支持 Map 和 Set 对象遍历\n  - for in 循环可以遍历字符串、对象、数组，不能遍历 Set/Map\n  - forEach 循环不能遍历字符串、对象,可以遍历 Set/Map\n\n## 10. ES6 模块化\n\n其模块功能主要由两个命令构成：export 和 import。export 命令用于规定模块的对外接口，import 命令用于输入其他模块提供的功能。\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"CSS元素居中","url":"/2019/05/23/CSS元素居中/","content":"\n# CSS 元素居中\n\n## 1.水平居中\n\n- ### 行内元素水平居中\n\n**利用 text-align: center 可以实现在块级元素内部的行内元素水平居中**。此方法对 inline、inline-block、inline-table 和 inline-flex 元素水平居中都有效。\n\n<!-- more -->\n\n```css\n.parent {\n  //在父容器设置\n  text-align: center;\n}\n```\n\n此外，如果块级元素内部包着也是一个块级元素，**我们可以先将其由块级元素改变为行内块元素，再通过设置行内块元素居中以达到水平居中**。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">Demo</div>\n</div>\n<style>\n  .parent {\n    text-align: center;\n  }\n  .child {\n    display: inline-block;\n  }\n</style>\n```\n\n- ### 块级元素的水平居中\n\n这种情形可以有多种实现方式，下面我们详细介绍:\n\n#### ① 将该块级元素左右外边距 margin-left 和 margin-right 设置为 auto\n\n```css\n.child {\n  width: 100px; //确保该块级元素定宽\n  margin: 0 auto;\n}\n```\n\n#### ② 使用 table+margin\n\n先将子元素设置为块级表格来显示（类似），再将其设置水平居中\n\ndisplay:table 在表现上类似 block 元素，但是宽度为内容宽。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">Demo</div>\n</div>\n<style>\n  .child {\n    display: table;\n    margin: 0 auto;\n  }\n</style>\n```\n\n#### ③ 使用 absolute+transform\n\n先将父元素设置为相对定位，再将子元素设置为绝对定位，向右移动子元素，移动距离为父容器的一半，最后通过向左移动子元素的一半宽度以达到水平居中。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">Demo</div>\n</div>\n<style>\n  .child {\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n  .parent {\n    position: relative;\n  }\n</style>\n```\n\n不过 transform 属于 css3 内容，兼容性存在一定问题，高版本浏览器需要添加一些前缀\n\n#### ④ 使用 flex+justify-content\n\n通过 CSS3 中的布局利器 flex 中的 justify-content 属性来达到水平居中。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">Demo</div>\n</div>\n<style>\n  .parent {\n    display: flex;\n    justify-content: center;\n  }\n</style>\n```\n\n#### ⑤ 使用 flex+margin\n\n通过 flex 将父容器设置为为 Flex 布局，再设置子元素居中。\n\n```\n<div class=\"parent\">\n  <div class=\"child\">Demo</div>\n</div>\n<style>\n  .parent {\n    display: flex;\n  }\n  .child {\n    margin:0 auto;\n  }\n</style>\n```\n\n- ### 多块级元素水平居中\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iywusnatj30gg03q3yv.jpg)\n\n#### ① 利用 flex 布局\n\n**利用弹性布局(flex)，实现水平居中，其中 justify-content 用于设置弹性盒子元素在主轴（默认横轴）方向上的对齐方式**，本例中设置子元素水平居中显示。\n\n```css\n#container {\n  display: flex;\n  justify-content: center;\n}\n```\n\n#### ② 利用 inline-block\n\n将要水平排列的块状元素设为 display:inline-block，然后在父级元素上设置 text-align:center，达到与上面的行内元素的水平居中一样的效果。\n\n```css\n.container {\n  text-align: center;\n}\n.inline-block {\n  display: inline-block;\n}\n```\n\n- ### 浮动元素水平居中\n\n  - 对于定宽的浮动元素，通过子元素设置 relative + 负 margin\n  - 对于不定宽的浮动元素，父子容器都用相对定位\n  - 通用方法(不管是定宽还是不定宽)：flex 布局\n\n#### ① 定宽的非浮动元素\n\n**通过子元素设置 relative + 负 margin,原理见下图：**\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyzsq98xj30i80acmx5.jpg)\n**注意：样式设置在浮动元素本身**\n\n```html\n.child { position:relative; left:50%; margin-left:-250px; }\n<div class=\"parent\">\n  <span class=\"child\" style=\"float: left;width: 500px;\"\n    >我是要居中的浮动元素</span\n  >\n</div>\n```\n\n#### ② 不定宽的浮动元素\n\n通过父子容器都相对定位，偏移位移见下图：\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyxlpetcj30pw06tmx8.jpg)\n**注意：要清除浮动，给外部元素加上 float。这里的父元素就是外部元素**\n\n```html\n<div class=\"box\">\n  <p>我是浮动的</p>\n  <p>我也是居中的</p>\n</div>\n.box{ float:left; position:relative; left:50%; } p{ float:left;\nposition:relative; right:50%; }\n```\n\n#### ③ 通用办法 flex 布局(不管是定宽还是不定宽)\n\n**利用弹性布局(flex)的 justify-content 属性，实现水平居中**。\n\n```html\n.parent { display:flex; justify-content:center; } .chlid{ float: left; width:\n200px;//有无宽度不影响居中 }\n<div class=\"parent\">\n  <span class=\"chlid\">我是要居中的浮动元素</span>\n</div>\n```\n\n- ### 绝对定位元素水平居中\n\n这种方式非常独特，**通过子元素绝对定位，外加 margin: 0 auto 来实现**。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">让绝对定位的元素水平居中对齐。</div>\n</div>\n.parent{ position:relative; } .child{ position: absolute; /*绝对定位*/ width:\n200px; height:100px; background: yellow; margin: 0 auto; /*水平居中*/ left: 0;\n/*此处不能省略，且为0*/ right: 0;/*此处不能省略，且为0*/ }\n```\n\n## 2.垂直居中\n\n- ### 单行内联元素垂直居中\n\n```html\n<div id=\"box\"><span>单行内联元素垂直居中。</span>。</div>\n<style>\n  #box {\n    height: 120px;\n    line-height: 120px;\n    border: 2px dashed #f69c55;\n  }\n</style>\n```\n\n- ### 多行内联元素垂直居中\n\n#### ① 利用 flex 布局（flex）\n\n**利用 flex 布局实现垂直居中，其中 flex-direction: column 定义主轴方向为纵向**。这种方式在较老的浏览器存在兼容性问题。\n\n```html\n<div class=\"parent\">\n  <p>\n    Dance like nobody is watching, code like everybody is. Dance like nobody is\n    watching, code like everybody is. Dance like nobody is watching, code like\n    everybody is.\n  </p>\n</div>\n<style>\n  .parent {\n    height: 140px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    border: 2px dashed #f69c55;\n  }\n</style>\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iz0f2donj30k504ejrj.jpg)\n\n#### ② 利用表布局（table）\n\n**利用表布局的 vertical-align: middle 可以实现子元素的垂直居中**\n\n```html\n<div class=\"parent\">\n  <p class=\"child\">\n    The more technology you learn, the more you realize how little you know. The\n    more technology you learn, the more you realize how little you know. The\n    more technology you learn, the more you realize how little you know.\n  </p>\n</div>\n<style>\n  .parent {\n    display: table;\n    height: 140px;\n    border: 2px dashed #f69c55;\n  }\n  .child {\n    display: table-cell;\n    vertical-align: middle;\n  }\n</style>\n```\n\n- ### 块级元素垂直居中\n\n#### ① 使用 absolute+负 margin(已知高度宽度)\n\n**通过绝对定位元素距离顶部 50%，并设置 margin-top 向上偏移元素高度的一半，就可以实现了**。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">固定高度的块级元素垂直居中。</div>\n</div>\n.parent { position: relative; } .child { position: absolute; top: 50%; height:\n100px; margin-top: -50px; }\n```\n\n#### ② 使用 absolute+transform\n\n**当垂直居中的元素的高度和宽度未知时，可以借助 CSS3 中的 transform 属性向 Y 轴反向偏移 50%的方法实现垂直居中**。但是部分浏览器存在兼容性的问题。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">未知高度的块级元素垂直居中。</div>\n</div>\n.parent { position: relative; } .child { position: absolute; top: 50%;\ntransform: translateY(-50%); }\n```\n\n#### ③ 使用 flex+align-items\n\n**通过设置 flex 布局中的属性 align-items，使子元素垂直居中**。\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">未知高度的块级元素垂直居中。</div>\n</div>\n.parent { display:flex; align-items:center; }\n```\n\n#### ④ 使用 table-cell+vertical-align\n\n**通过将父元素转化为一个表格单元格显示（类似 <td> 和 <th>），再通过设置 vertical-align 属性，使表格单元格内容垂直居中。**\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">Demo</div>\n</div>\n<style>\n  .parent {\n    display: table-cell;\n    vertical-align: middle;\n  }\n</style>\n```\n\n## 3.水平垂直居中\n\n```html\n// html部分(这部分不做变化,下面例子直接共用)\n<body>\n  <div id=\"container\">\n    <div id=\"center\" style=\"width: 100px;height: 100px;background-color: #666\">\n      center\n    </div>\n  </div>\n</body>\n```\n\n- ### 绝对定位与负边距实现（已知高度宽度）\n\n**这种方式需要知道被垂直居中元素的高和宽，才能计算出 margin 值，兼容所有浏览器**。\n\n```css\n// css部分\n#container {\n  position: relative;\n}\n#center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px 0 0 -50px;\n}\n```\n\n- ### 绝对定位与 margin:auto（已知高度宽度）\n\n**这种方式无需知道被垂直居中元素的高和宽，但不能兼容低版本的 IE 浏览器。**\n\n```css\n#container {\n  position: relative;\n  height: 100px; //必须有个高度\n}\n#center {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto; //注意此处的写法\n}\n```\n\n- ### 绝对定位+transform(未知元素的高宽)\n\n**利用 Css3 的 transform，可以轻松的在未知元素的高宽的情况下实现元素的垂直居中**。\nCSS3 的 transform 固然好用，但在项目的实际运用中必须考虑兼容问题，大量的 hack 代码可能会导致得不偿失。\n\n```css\n#container {\n  position: relative;\n}\n#center {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n```\n\n- ### flex 布局\n\n**利用 flex 布局，其中 justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而 align-items 属性定义 flex 子项在 flex 容器的当前行的侧轴（纵轴）方向上的对齐方式。不能兼容低版本的 IE 浏览器。**\n\n```css\n#container {\n  //直接在父容器设置即可\n  height: 100vh; //必须有高度\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n```\n\n- ### flex/grid 与 margin:auto(最简单写法)\n\n**容器元素设为 flex 布局或是 grid 布局，子元素只要写 margin: auto 即可,不能兼容低版本的 IE 浏览器。**\n\n```css\n#container {\n  height: 100vh; //必须有高度\n  display: grid;\n}\n#center {\n  margin: auto;\n}\n```\n","tags":["CSS","居中"],"categories":["CSS"]},{"title":"CSS多列布局","url":"/2019/05/08/CSS多列布局/","content":"\n## 1.单列布局\n\n常见的单列布局有两种：\n\n- header,content 和 footer 等宽的单列布局\n- header 与 footer 等宽,content 略窄的单列布局\n  <!-- more -->\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iysrsoe5j31100h2q3f.jpg)\n\n### 第一种：\n\n对于第一种，先通过对 header,content,footer 统一设置 width：1000px;或者 max-width：1000px(这两者的区别是当屏幕小于 1000px 时，前者会出现滚动条，后者则不会，显示出实际宽度);然后设置 margin:auto 实现居中即可得到。\n\n```html\n<div class=\"header\"></div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>\n```\n\n```css\n.header {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: blue;\n}\n.content {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 400px;\n  background-color: aquamarine;\n}\n.footer {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: aqua;\n}\n```\n\n### 第二种：\n\n对于第二种，header、footer 的内容宽度不设置，块级元素充满整个屏幕，但 header、content 和 footer 的内容区设置同一个 width，并通过 margin:auto 实现居中。\n\n```html\n<div class=\"header\">\n  <div class=\"nav\"></div>\n</div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>\n```\n\n```css\n.header {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: blue;\n}\n.nav {\n  margin: 0 auto;\n  max-width: 800px;\n  background-color: darkgray;\n  height: 50px;\n}\n.content {\n  margin: 0 auto;\n  max-width: 800px;\n  height: 400px;\n  background-color: aquamarine;\n}\n.footer {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: aqua;\n}\n```\n\n## 2.两列自适应布局\n\n**两列自适应布局是指一列由内容撑开，另一列撑满剩余宽度的布局方式**\n\n### float+overflow:hidden\n\n如果是普通的两列布局，**浮动+普通元素的 margin**便可以实现，但如果是自适应的两列布局，利用**float+overflow:hidden**便可以实现，**这种办法主要通过 overflow 触发 BFC,而 BFC 不会重叠浮动元素**。由于设置 overflow:hidden 并不会触发 IE6-浏览器的 haslayout 属性，所以需要设置 zoom:1 来兼容 IE6-浏览器。具体代码如下：\n\n```html\n<div class=\"parent\" style=\"background-color: lightgrey;\">\n  <div class=\"left\" style=\"background-color: lightblue;\">\n    <p>left</p>\n  </div>\n  <div class=\"right\" style=\"background-color: lightgreen;\">\n    <p>right</p>\n    <p>right</p>\n  </div>\n</div>\n```\n\n```css\n.parent {\n  overflow: hidden;\n  zoom: 1;\n}\n.left {\n  float: left;\n  margin-right: 20px;\n}\n.right {\n  overflow: hidden;\n  zoom: 1;\n}\n```\n\n注意点:如果侧边栏在右边时，注意渲染顺序。即在 HTML 中，先写侧边栏后写主内容\n\n### Flex 布局\n\nFlex 布局，也叫弹性盒子布局，区区简单几行代码就可以实现各种页面的的布局。\n\n```css\n//html部分同上\n.parent {\n  display: flex;\n}\n.right {\n  margin-left: 20px;\n  flex: 1;\n}\n```\n\n### grid 布局\n\nGrid 布局，是一个基于网格的二维布局系统，目的是用来优化用户界面设计。\n\n```css\n//html部分同上\n.parent {\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-gap: 20px;\n}\n```\n\n## 3.三栏布局\n\n**特征：中间列自适应宽度，旁边两侧固定宽度**\n\n### 圣杯布局\n\n- #### 特点\n\n**比较特殊的三栏布局，同样也是两边固定宽度，中间自适应，唯一区别是 dom 结构必须是先写中间列部分，这样实现中间列可以优先加载**。\n\n```html\n<article class=\"container\">\n  <div class=\"center\">\n    <h2>圣杯布局</h2>\n  </div>\n  <div class=\"left\"></div>\n  <div class=\"right\"></div>\n</article>\n```\n\n```css\n.container {\n  padding-left: 220px; //为左右栏腾出空间\n  padding-right: 220px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: red;\n  margin-left: -100%;\n  position: relative;\n  left: -220px;\n}\n.center {\n  float: left;\n  width: 100%;\n  height: 500px;\n  background: yellow;\n}\n.right {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: blue;\n  margin-left: -200px;\n  position: relative;\n  right: -220px;\n}\n```\n\n- #### 实现步骤\n\n  - 三个部分都设定为左浮动，**否则左右两边内容上不去，就不可能与中间列同一行**。然后设置 center 的宽度为 100%(**实现中间列内容自适应**)，此时，left 和 right 部分会跳到下一行\n  - 通过设置 margin-left 为负值让 left 和 right 部分回到与 center 部分同一行\n  - 通过设置父容器的 padding-left 和 padding-right，让左右两边留出间隙。\n  - 通过设置相对定位，让 left 和 right 部分移动到两边。\n\n- #### 缺点\n\n  - center 部分的最小宽度不能小于 left 部分的宽度，否则会 left 部分掉到下一行\n  - 如果其中一列内容高度拉长(如下图)，其他两列的背景并不会自动填充。(借助等高布局正 padding+负 margin 可解决，下文会介绍)\n\n### 双飞翼布局\n\n- #### 特点\n\n**同样也是三栏布局，在圣杯布局基础上进一步优化，解决了圣杯布局错乱问题，实现了内容与布局的分离。而且任何一栏都可以是最高栏，不会出问题**。\n\n```html\n<article class=\"container\">\n  <div class=\"center\">\n    <div class=\"inner\">双飞翼布局</div>\n  </div>\n  <div class=\"left\"></div>\n  <div class=\"right\"></div>\n</article>\n```\n\n```css\n.container {\n  min-width: 600px; //确保中间内容可以显示出来，两倍left宽+right宽\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: red;\n  margin-left: -100%;\n}\n.center {\n  float: left;\n  width: 100%;\n  height: 500px;\n  background: yellow;\n}\n.center .inner {\n  margin: 0 200px; //新增部分\n}\n.right {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: blue;\n  margin-left: -200px;\n}\n```\n\n- #### 实现步骤(前两步与圣杯布局一样)\n\n  - 三个部分都设定为左浮动，然后设置 center 的宽度为 100%，此时，left 和 right 部分会跳到下一行；\n  - 通过设置 margin-left 为负值让 left 和 right 部分回到与 center 部分同一行；\n  - center 部分增加一个内层 div，并设 margin: 0 200px；\n\n- #### 缺点\n\n  **多加一层 dom 树节点，增加渲染树生成的计算量**。\n\n- #### 两种布局实现方式对比:\n\n  - 两种布局方式都是把主列放在文档流最前面，使主列优先加载。\n  - 两种布局方式在实现上也有相同之处，都是让三列浮动，然后通过负外边距形成三列布局。\n  - 两种布局方式的不同之处在于如何处理中间主列的位置：\n    **圣杯布局是利用父容器的左、右内边距+两个从列相对定位**；\n    **双飞翼布局是把主列嵌套在一个新的父级块中利用主列的左、右外边距进行布局调整**\n\n### 浮动布局\n\n```html\n<article class=\"left-right-center\">\n  <div class=\"left\"></div>\n  <div class=\"right\"></div>\n  // 右栏部分要写在中间内容之前\n  <div class=\"center\">\n    <h2>浮动解决方案</h2>\n    1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案；\n    3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案；\n    5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；\n  </div>\n</article>\n```\n\n```css\n.layout.float .left {\n  float: left;\n  width: 300px;\n  background: red;\n}\n.layout.float .center {\n  background: yellow;\n}\n.layout.float .right {\n  float: right;\n  width: 300px;\n  background: blue;\n}\n```\n\n这种布局方式，dom 结构必须是先写浮动部分，然后再中间块，否则右浮动块会掉到下一行。\n**浮动布局的优点就是比较简单，兼容性也比较好。但浮动布局是有局限性的，浮动元素脱离文档流，要做清除浮动，这个处理不好的话，会带来很多问题，比如父容器高度塌陷等**。\n\n### 绝对布局\n\n```html\n<article class=\"left-center-right\">\n  <div class=\"left\"></div>\n  <div class=\"center\">\n    <h2>绝对定位解决方案</h2>\n    1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案；\n    3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案；\n    5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；\n  </div>\n  <div class=\"right\"></div>\n</article>\n```\n\n```css\n.layout.absolute .left-center-right > div {\n  position: absolute; //三块都是绝对定位\n}\n.layout.absolute .left {\n  left: 0;\n  width: 300px;\n  background: red;\n}\n.layout.absolute .center {\n  right: 300px;\n  left: 300px; //离左右各三百\n  background: yellow;\n}\n.layout.absolute .right {\n  right: 0;\n  width: 300px;\n  background: blue;\n}\n```\n\n**绝对定位布局优点就是快捷，设置很方便，而且也不容易出问题。缺点就是，容器脱离了文档流，后代元素也脱离了文档流，高度未知的时候，会有问题，这就导致了这种方法的有效性和可使用性是比较差的。**\n\n### flexbox 布局\n\n```html\n<article class=\"left-center-right\">\n  <div class=\"left\"></div>\n  <div class=\"center\">\n    <h2>flexbox解决方案</h2>\n    1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案；\n    3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案；\n    5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；\n  </div>\n  <div class=\"right\"></div>\n</article>\n```\n\n```css\n.layout.flexbox .left-center-right {\n  display: flex;\n}\n.layout.flexbox .left {\n  width: 300px;\n  background: red;\n}\n.layout.flexbox .center {\n  background: yellow;\n  flex: 1;\n}\n.layout.flexbox .right {\n  width: 300px;\n  background: blue;\n}\n```\n\n**flexbox 布局是 css3 里新出的一个，它就是为了解决上述两种方式的不足出现的，是比较完美的一个。目前移动端的布局也都是用 flexbox。 flexbox 的缺点就是 IE10 开始支持，但是 IE10 的是-ms 形式的。**\n\n### 表格布局\n\n```html\n<article class=\"left-center-right\">\n  <div class=\"left\"></div>\n  <div class=\"center\">\n    <h2>表格布局解决方案</h2>\n    1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案；\n    3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案；\n    5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；\n  </div>\n  <div class=\"right\"></div>\n</article>\n```\n\n```css\n.layout.table .left-center-right {\n  display: table;\n  height: 150px;\n  width: 100%;\n}\n.layout.table .left-center-right > div {\n  display: table-cell;\n}\n.layout.table .left {\n  width: 300px;\n  background: red;\n}\n.layout.table .center {\n  background: yellow;\n}\n.layout.table .right {\n  width: 300px;\n  background: blue;\n}\n```\n\n**表格布局的兼容性很好(见下图)，在 flex 布局不兼容的时候，可以尝试表格布局。当内容溢出时会自动撑开父元素**。\n\n**表格布局也是有缺陷:① 无法设置栏边距；② 对 seo 不友好；③ 当其中一个单元格高度超出的时候，两侧的单元格也是会跟着一起变高的，然而有时候这并不是我们想要的效果。**\n\n### 网格布局\n\n```html\n<article class=\"left-center-right\">\n  <div class=\"left\"></div>\n  <div class=\"center\">\n    <h2>网格布局解决方案</h2>\n    1.这是三栏布局的浮动解决方案； 2.这是三栏布局的浮动解决方案；\n    3.这是三栏布局的浮动解决方案； 4.这是三栏布局的浮动解决方案；\n    5.这是三栏布局的浮动解决方案； 6.这是三栏布局的浮动解决方案；\n  </div>\n  <div class=\"right\"></div>\n</article>\n```\n\n```css\n.layout.grid .left-center-right {\n  display: grid;\n  width: 100%;\n  grid-template-columns: 300px auto 300px;\n  grid-template-rows: 150px; //行高\n}\n.layout.grid .left {\n  background: red;\n}\n.layout.grid .center {\n  background: yellow;\n}\n.layout.grid .right {\n  background: blue;\n}\n```\n\n**CSS Grid 是创建网格布局最强大和最简单的工具。就像表格一样，网格布局可以让 Web 设计师根据元素按列或行对齐排列，但他和表格不同，网格布局没有内容结构，从而使各种布局不可能与表格一样。例如，一个网格布局中的子元素都可以定位自己的位置，这样他们可以重叠和类似元素定位**。\n\n**但网格布局的兼容性不好。IE10+上支持，而且也仅支持部分属性**。\n\n## 4.等高布局\n\n等高布局是指子元素在父元素中高度相等的布局方式。接下来我们介绍常见几种实现方式：\n\n- #### 利用正 padding+负 margin\n\n我们通过等高布局便可解决圣杯布局的第二点缺点，因为背景是在 padding 区域显示的，**设置一个大数值的 padding-bottom，再设置相同数值的负的 margin-bottom，并在所有列外面加上一个容器，并设置 overflow:hidden 把溢出背景切掉**。这种可能实现多列等高布局，并且也能实现列与列之间分隔线效果，结构简单，兼容所有浏览器。新增代码如下：\n\n```css\n.center,\n.left,\n.right {\n  padding-bottom: 10000px;\n  margin-bottom: -10000px;\n}\n.container {\n  padding-left: 220px;\n  padding-right: 220px;\n  overflow: hidden; //把溢出背景切掉\n}\n```\n\n- #### 利用背景图片\n\n这种方法是我们实现等高列最早使用的一种方法，就是使用背景图片，在列的父元素上使用这个背景图进行 Y 轴的铺放，从而实现一种等高列的假象。实现方法简单，兼容性强，不需要太多的 css 样式就可以轻松实现,但此方法不适合流体布局等高列的布局。\n\n在制作样式之前需要一张类似下面的背景图：\n\n[![img](https://camo.githubusercontent.com/7b26b4a48392ca95709486320efc031dd8e9ea58/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32312f313637636633633031343664323436343f773d35303026683d313226663d67696626733d333133)](https://camo.githubusercontent.com/7b26b4a48392ca95709486320efc031dd8e9ea58/68747470733a2f2f757365722d676f6c642d63646e2e786974752e696f2f323031382f31322f32312f313637636633633031343664323436343f773d35303026683d313226663d67696626733d333133)\n\n```html\n<div class=\"”container\" clearfix”>\n  <div class=\"”left”\"></div>\n  <div class=\"”content”\"></div>\n  <div class=\"”right”\"></div>\n</div>\n```\n\n```css\n.container {\n  background: url(\"column.png\") repeat-y;\n  width: 960px;\n  margin: 0 auto;\n}\n.left {\n  float: left;\n  width: 220px;\n}\n.content {\n  float: left;\n  width: 480px;\n}\n.right {\n  float: left;\n  width: 220px;\n}\n```\n\n- #### 模仿表格布局\n\n这是一种非常简单，易于实现的方法。不过兼容性不好，在 ie6-7 无法正常运行。\n\n```html\n<div class=\"container table\">\n  <div class=\"containerInner tableRow\">\n    <div class=\"column tableCell cell1\">\n      <div class=\"left aside\">\n        ....\n      </div>\n    </div>\n    <div class=\"column tableCell cell2\">\n      <div class=\"content section\">\n        ...\n      </div>\n    </div>\n    <div class=\"column tableCell cell3\">\n      <div class=\"right aside\">\n        ...\n      </div>\n    </div>\n  </div>\n</div>\n```\n\n```css\n.table {\n  width: auto;\n  min-width: 1000px;\n  margin: 0 auto;\n  padding: 0;\n  display: table;\n}\n.tableRow {\n  display: table-row;\n}\n.tableCell {\n  display: table-cell;\n  width: 33%;\n}\n.cell1 {\n  background: #f00;\n  height: 800px;\n}\n.cell2 {\n  background: #0f0;\n}\n.cell3 {\n  background: #00f;\n}\n```\n\n- #### 使用边框和定位\n\n这种方法是使用边框和绝对定位来实现一个假的高度相等列的效果。结构简单，兼容各浏览器，容易掌握。假设你需要实现一个两列等高布局，侧栏高度要和主内容高度相等。\n\n```html\n<div id=\"wrapper\">\n  <div id=\"mainContent\">...</div>\n  <div id=\"sidebar\">...</div>\n</div>\n```\n\n```css\n#wrapper {\n  width: 960px;\n  margin: 0 auto;\n}\n#mainContent {\n  border-right: 220px solid #dfdfdf;\n  position: absolute;\n  width: 740px;\n  height: 800px;\n  background: green;\n}\n#sidebar {\n  background: #dfdfdf;\n  margin-left: 740px;\n  position: absolute;\n  height: 800px;\n  width: 220px;\n}\n```\n\n## 5.粘连布局\n\n- #### 特点\n\n  - 有一块内容`<main>`，当`<main>`的高康足够长的时候，紧跟在`<main>`后面的元素`<footer>`会跟在`<main>`元素的后面。\n  - 当`<main>`元素比较短的时候(比如小于屏幕的高度),我们期望这个`<footer>`元素能够“粘连”在屏幕的底部\n\n具体代码如下：\n\n```html\n<div id=\"wrap\">\n  <div class=\"main\">\n    main <br />\n    main <br />\n    main <br />\n  </div>\n</div>\n<div id=\"footer\">footer</div>\n```\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n}\nhtml,\nbody {\n  height: 100%; //高度一层层继承下来\n}\n#wrap {\n  min-height: 100%;\n  background: pink;\n  text-align: center;\n  overflow: hidden;\n}\n#wrap .main {\n  padding-bottom: 50px;\n}\n#footer {\n  height: 50px;\n  line-height: 50px;\n  background: deeppink;\n  text-align: center;\n  margin-top: -50px;\n}\n```\n\n- #### 实现步骤\n\n  - footer 必须是一个独立的结构，与 wrap 没有任何嵌套关系\n  - wrap 区域的高度通过设置 min-height，变为视口高度\n  - footer 要使用 margin 为负来确定自己的位置\n  - 在 main 区域需要设置 padding-bottom。这也是为了防止负 margin 导致 footer 覆盖任何实际内容。\n","tags":["CSS","布局"],"categories":["CSS"]},{"title":"CSS常用布局方式","url":"/2019/05/02/CSS常用布局方式/","content":"\n# CSS 常用布局方式\n\n## 1.静态布局（固定布局）\n\n### 布局特点\n\n不管浏览器尺寸具体是多少，网页布局始终按照最初写代码时的布局来显示。常规的 pc 的网站都是静态（定宽度）布局的，也就是设置了 min-width，这样的话，如果小于这个宽度就会出现滚动条，如果大于这个宽度则内容居中外加背景，这种设计常见于 pc 端。\n\n  <!-- more -->\n\n### 设计方法\n\n- PC：居中布局，所有样式使用绝对宽度/高度(px)，设计一个 Layout，在屏幕宽高有调整时，使用横向和竖向的滚动条来查阅被遮掩部分；\n\n```css\n.wrap {\n  width: 640px;\n  overflow: hidden;\n  margin: 0 auto;\n}\n```\n\n​ 有固定的版型大小，例如 640px，然后设置 margin：0 auto；来居中。小于 640 时出现滚动条。\n\n- 移动设备：另外建立移动网站，单独设计一个布局，使用不同的域名如 wap.或 m.。在 `<viewport meta>` 标签上设置 `width`，页面的各个元素也采用`px`作为单位。通过用 JS 动态修改标签的`initial-scale`使得页面等比缩放，从而刚好占满整个屏幕。\n\n### 实现方法\n\n- 普通/文档流 布局\n- Float 布局\n- 绝对布局\n\n### 优缺点\n\n优点：这种布局方式对设计师和 CSS 编写者来说都是最简单的，亦没有兼容性问题。\n\n缺点：显而易见，不能根据用户的屏幕尺寸做出不同的展现。当前，大部分门户网站、大部分企业的 PC 宣传站点都采用了这种布局方式。固定像素尺寸的网页是匹配固定像素尺寸显示器的最简单办法。但这种方法不是一种完全兼容未来网页的制作方法，我们需要一些适应未知设备的方法。\n\n- 窄屏幕滚动条体验很差\n- 宽屏有大片空白，不利于空间利用\n\n## 2.流式布局\n\n流式布局（Liquid）的特点（也叫\"Fluid\") 是**页面元素的宽度**按照屏幕分辨率进行适配调整，但整体布局不变。代表作栅栏系统（网格系统）。网页中主要的划分区域的**尺寸使用百分数**（搭配 min-*、max-*属性使用），例如，设置网页主体的宽度为 80%，min-width 为 960px。图片也作类似处理（width:100%, max-width 一般设定为图片本身的尺寸，防止被拉伸而失真）。\n\n### 布局特点\n\n屏幕分辨率变化时，页面里元素的大小会变化而但布局不变。【这就导致如果屏幕太大或者太小都会导致元素无法正常显示。\n\n### 设计方法\n\n**使用%百分比定义宽度，而高度大都是用 px 来固定住**，可以根据可视区域 (viewport) 和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合 max-width/min-width 等属性控制尺寸流动范围以免过大或者过小影响阅读。\n\n**这种布局方式在 Web 前端开发的早期历史上，用来应对不同尺寸的 PC 屏幕**（那时屏幕尺寸的差异不会太大），**在当今的移动端开发也是常用布局方式**。流式布局目的是在不同大小的设备上**满屏呈现同样网页**。它是用于解决类似的设备不同分辨率之间的兼容(一般分辨率差异较少)。\n\n**百分比能够设置的属性是 width、height、padding、margin。其他属性比如 border、font-size 不能用百分比设置的。**\n\n- 如果用百分比写 width，那么指的是父元素 width 的百分之多少。\n- 如果用百分比写 height，那么指的是父元素 height 的百分之多少。\n- 如果用百分比写 padding，那么指的是**父元素 width **的百分之多少，无论是水平的 padding 还是竖直的 padding。\n- 如果用百分比写 margin，那么指的是**父元素 width** 的百分之多少，无论是水平的 margin 还是竖直的 margin。\n- 不能用百分比写 border 的宽度\n\n### 实现方法\n\n- 允许网页宽度自动调整：`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />`\n- 不使用绝对尺寸（包括容器/字体/图片），使用百分比、em、rem、vw、vh 等\n- 可使用 flex 等弹性盒子（不要使用 px 定尺寸）\n\n### 优缺点\n\n优点：页面左右满屏。\n\n但缺点明显：\n\n主要的问题\\*\\*是如果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示。因为宽度使用%百分比定义，但是高度和文字大小等大都是用 px 来固定，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度、文字大小还是和原来一样（即，这些东西无法变得“流式”），显示非常不协调\n\n- 使用百分比定义，所以在大屏幕的手机/Pad 下（或者横屏下）显示效果会变成有些页面元素被拉的很大，但是内容数量却不变，显得稀疏不紧凑，空间利用率低下。\n- 如果文字也按照百分比放大，则整体效果会非常不协调（老人机效果）。\n\n### 例子\n\nhttps://www.trip.com/flightsh5/status/\n\n## 3.自适应布局\n\n自适应布局的特点是分别为不同的屏幕分辨率定义布局，即创建多个静态布局，每个静态布局对应一个屏幕分辨率范围。改变屏幕分辨率可以切换不同的静态局部（页面元素位置发生改变），但在每个静态布局中，页面元素不随窗口大小的调整发生变化。可以把自适应布局看作是静态布局的一个合集。\n\n### 布局特点\n\n屏幕分辨率变化时，页面里面元素的位置会变化而大小不会变化。\n\n### 设计方法\n\n使用 @media 媒体查询给不同尺寸和介质的设备切换不同的样式。在优秀的响应范围设计下可以给适配范围内的设备最好的体验，在同一个设备下实际还是固定的布局。\n\n### 实现方式\n\n- 静态布局方法\n- 分辨率 detector（media query/server-side detector/UA）\n\n### 优缺点\n\n优点：自适应布局**页面里面元素的位置会变化，很好的解决了流式布局中的大屏空间利用率不高弊端**。\n\n缺点：单个布局容器无法灵活伸缩，未触发布局切换的情况下，容器仍然容易出现静态布局中提到的问题。\n\n### 例子\n\n[www.baidu.com/](https://link.juejin.im/?target=https%3A%2F%2Fwww.baidu.com%2F)\n\n### 自适应设计（AWD）\n\n自适应设计是通过**服务端检测设备类型、从 site 的不同版本中选择最合适该设备类型的设计布局/尺寸的版本进行展示。**它可以使用到所有（包括响应式布局）布局方案。\n\n实现方式：\n\n- server-side detection\n\n- different versions to different devices\n\n  对于 PC: 可使用流式布局；\n\n  对于 Mobile: 可使用流式布局。推荐一个 Rem 解决方案：\n\n  - 设置元素（可以包括字体等）大小为 `rem` （`rem` 是以跟元素`font-size`为基准的单位）\n  - 按照屏幕宽度的不同，JS 动态设置 `<html>` 的 `font-size` 大小，元素同样会按照屏幕宽度等比例放大缩小\n\n举个栗子：[www.trip.com/](https://link.juejin.im/?target=https%3A%2F%2Fwww.trip.com%2F)\n\n## 4.响应式布局（媒体查询）\n\n随着 CSS3 出现了媒体查询技术，又出现了响应式设计的概念。响应式设计的目标是确保一个页面在所有终端上（各种尺寸的 PC、手机、手表、冰箱的 Web 浏览器等等）都能显示出令人满意的效果，对 CSS 编写者而言，在实现上不拘泥于具体手法，但通常是糅合了流式布局+弹性布局，再搭配媒体查询技术使用。——分别为不同的屏幕分辨率定义布局，同时，在每个布局中，应用流式布局的理念，即页面元素宽度随着窗口调整而自动适配。即：创建多个流体式布局，分别对应一个屏幕分辨率范围。改变屏幕分辨率可以通过 CSS Media query 实时地切换不同的布局（页面元素位置可能发生改变），在每个布局中，页面元素会随窗口大小的调整发生流式布局中的自动尺寸变化。可以把响应式布局看作是流式布局和自适应布局设计理念的融合。\n\n响应式几乎已经成为优秀页面布局的标准。\n\n### 布局特点\n\n每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会变。\n\n### 设计方法\n\n媒体查询+流式布局。通常使用 @media 媒体查询和网格系统 (Grid System) 配合相对布局单位进行布局，实际上就是综合响应式、流动等上述技术通过 CSS 给单一网页不同设备返回不同样式的技术统称。\n\n### 实现方式\n\n- 流式布局\n- CSS media query\n\n### 优缺点\n\n优点：适应 pc 和移动端，如果足够耐心，效果完美。融合了流式布局和自适应布局的优势。\n\n缺点：\n\n- 媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。\n- 要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本。\n- CSS 代码繁琐，对于特定的设备有较多冗余，适用于对于各个终端（特别是移动端）性能要求不高的 Blog Dos 站点。\n\n响应式页面在头部会加上这一段代码：\n\n```html\n<meta name=\"applicable-device\" content=\"pc,mobile\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-transform \" />\n```\n\n### 例子\n\n[elevenbeans.github.io/](https://link.juejin.im/?target=http%3A%2F%2Felevenbeans.github.io%2F)\n\n### 响应式设计（RWD）\n\n响应式设计基于响应式布局，**使用同一套页面在各种各样不同大小的设备上进行大小合适、布局（甚至功能）合理的展现。**\n\n响应式设计会根据识别屏幕宽度对于展示的具体内容块进行位置调整，甚至展示和隐藏。\n\n实现方式：\n\n- 响应式布局\n- 特性检测 （用于网页功能的渐进增强）\n\n> 举个栗子：[elevenbeans.github.io/，](https://link.juejin.im/?target=http%3A%2F%2Felevenbeans.github.io%2F，)\n\n### RWD 和 AWD 的异同\n\n相同点：\n\n- 均针对不同的分辨率/device 采用不同的样式和布局达到页面展示最优\n- 布局方式本质没有差别（AWD 也 including responsive layout）\n\n不同点：\n\n- 前者强调同一套页面多端兼容展示，而后者给出多套页面，对于不同 device 进行了分类处理\n- 前者是通过 CSS Media query 进行分辨率检测，可以实时的响应浏览器尺寸变化，改变元素尺寸/布局，而后者一般是 server side detection，一次性渲染既定布局和样式\n\n### 媒体查询用法\n\n- #### 开始在 html 中写入 Media\n\n在 html 头部添加以下代码，用来显示兼容移动设备的显示效果\n\n```html\n<meta\n  name=\"viewport\"\n  content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"\n/>\n```\n\n参数详解：\n\n`width=device-width` ：宽度等于当前设备的宽度\n\n`initial-scale=1` ：初始的缩放比例。（默认为 1）\n\n`minimum-scale=1` ：允许用户缩放到的最小比例。（默认为 1）\n\n`maximum-scale=1` ：允许用户缩放到的最大比例。（默认为 1）\n\n`user-scalable=no` ：用户是否可以手动缩放（默认为 no）\n\n- #### 引入包含 Media 的 css 文件\n\n  **我们在媒体查询外面写的第一条规则，是“基本的”样式，它适用于任何设备。在此基础上，我们再为不同视口、不同能力的设备，渐进增加不同的视觉效果和功能。**(**IE6、7、8 不支持媒体查询，也为了防止手机端的某些浏览器不支持媒体查询，所以不要把所有的选择器都放在媒体查询里面。**)\n\n  ```css\n  body {\n    background-color: grey;\n  }\n  @media screen and (min-width: 1200px) {\n    body {\n      background-color: pink;\n    }\n  }\n  @media screen and (min-width: 700px) and (max-width: 1200px) {\n    body {\n      background-color: blue;\n    }\n  }\n  @media screen and (max-width: 700px) {\n    body {\n      background-color: orange;\n    }\n  }\n  ```\n\n1. 媒体类型\n\n   | 值         | 描述                                                                  |\n   | :--------- | :-------------------------------------------------------------------- |\n   | all        | 用于所有设备                                                          |\n   | aural      | 已废弃。用于语音和声音合成器                                          |\n   | braille    | 已废弃。 应用于盲文触摸式反馈设备                                     |\n   | embossed   | 已废弃。 用于打印的盲人印刷设备                                       |\n   | handheld   | 已废弃。 用于掌上设备或更小的装置，如 PDA 和小型电话                  |\n   | print      | 用于打印机和打印预览                                                  |\n   | projection | 已废弃。 用于投影设备                                                 |\n   | screen     | 用于电脑屏幕，平板电脑，智能手机等。                                  |\n   | speech     | 应用于屏幕阅读器等发声设备                                            |\n   | tty        | 已废弃。 用于固定的字符网格，如电报、终端设备和对字符有限制的便携设备 |\n   | tv         | 已废弃。 用于电视和网络电视                                           |\n\n2. 逻辑操作符\n\n   - `and`操作符用来把多个[媒体属性](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries#Media_features)组合成一条媒体查询，对成链式的特征进行请求，只有当每个属性都为真时，结果才为真。\n   - `not`操作符用来对一条媒体查询的结果进行取反。\n   - `only`操作符仅在媒体查询匹配成功的情况下被用于应用一个样式，这对于防止让选中的样式在老式浏览器中被应用到。\n   - 也可以将多个媒体查询以逗号分隔放在一起；只要其中任何一个为真，整个媒体语句就返回真。相当于`or`操作符。\n   - 若使用了`not`或`only`操作符，必须明确指定一个媒体类型。\n\n3. 媒体功能\n\n   | 值                  | 描述                                                                             | 值                      | 媒体           | 是否接受 min/max 前缀 |\n   | :------------------ | :------------------------------------------------------------------------------- | ----------------------- | -------------- | --------------------- |\n   | aspect-ratio        | 定义输出设备中的页面可见区域宽度与高度的比率                                     | <ratio>                 | visual/tactile | 是                    |\n   | color               | 定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于 0                   | <integer>               | visual         | 是                    |\n   | color-index         | 定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于 0         | <integer>               | visual         | 是                    |\n   | device-aspect-ratio | 定义输出设备的屏幕可见宽度与高度的比率。                                         | <ratio>                 | visual/tactile | 是                    |\n   | device-height       | 定义输出设备的屏幕可见高度。                                                     | <length>                | visual/tactile | 是                    |\n   | device-width        | 定义输出设备的屏幕可见宽度。                                                     | <length>                | visual/tactile | 是                    |\n   | grid                | 用来查询输出设备是否使用栅格或点阵。                                             | <integer>               | all            | 否                    |\n   | height              | 定义输出设备中的页面可见区域高度。                                               | <length>                | visual/tactile | 是                    |\n   | monochrome          | 定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于 0 | <integer>               | visual         | 是                    |\n   | orientation         | 定义输出设备中的页面可见区域高度是否大于或等于宽度。                             | landscape`|`portrait    | visual         | 否                    |\n   | resolution          | 定义设备的分辨率。如：96dpi, 300dpi, 118dpcm                                     | <resolution>            | bitmap         | 是                    |\n   | scan                | 定义电视类设备的扫描工序。                                                       | progressive`|`interlace | tv             | 否                    |\n   | width               | 定义输出设备中的页面可见区域宽度。                                               | <length>                | visual/tactile | 是                    |\n\n## 5.弹性布局（flex）\n\nFlex 是 Flexible Box 的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间（他会根据页面的剩余宽度自动分配空间）。\n\n采用 Flex 布局的元素，称为 Flex 容器（flex container），简称\"容器\"。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称\"项目\"。\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n### 容器的属性\n\n**基本语法：**\n\n```css\n.box {\n  display: flex; /* 或者 inline-flex */\n}\n```\n\n上述写法，定义了一个 flex 容器，根据设值的不同可以是块状容器或内联容器。这使得直接子结点拥有了一个 flex 上下文。\n\n- flex-direction\n- flex-wrap\n- flex-flow\n- justify-content\n- align-items\n- align-content\n\n#### 1.flex-direction\n\n属性决定主轴的方向（即项目的排列方向）。\n\n- `row`（默认值）：主轴为水平方向，起点在左端。\n- `row-reverse`：主轴为水平方向，起点在右端。\n- `column`：主轴为垂直方向，起点在上沿。\n- `column-reverse`：主轴为垂直方向，起点在下沿。\n\n#### 2.flex-wrap\n\n默认情况下，项目都排在一条线（又称\"轴线\"）上。`flex-wrap`属性定义，如果一条轴线排不下，如何换行。\n\n- `nowrap`（默认）：不换行。\n- `wrap`：换行，第一行在上方。\n- `wrap-reverse`：换行，第一行在下方。\n\n#### 3.flex-flow\n\n`flex-flow`属性是`flex-direction`属性和`flex-wrap`属性的简写形式，默认值为`row nowrap`。\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n#### 4.justify-content\n\n定义了项目在主轴上的对齐方式。\n\n- `flex-start`（默认值）：左对齐\n- `flex-end`：右对齐\n- `center`： 居中\n- `space-between`：两端对齐，项目之间的间隔都相等。\n- `space-around`：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyhrshycj30hp0l7dg9.jpg)\n\n#### 5.align-items\n\n定义项目在交叉轴上如何对齐。\n\n- `flex-start`：交叉轴的起点对齐。\n- `flex-end`：交叉轴的终点对齐。\n- `center`：交叉轴的中点对齐。\n- `baseline`: 项目的第一行文字的基线对齐。\n- `stretch`（默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。\n  ![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyikbcvij30h50lujrx.jpg)\n\n#### 6.align-content\n\n定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n- `flex-start`：与交叉轴的起点对齐。\n- `flex-end`：与交叉轴的终点对齐。\n- `center`：与交叉轴的中点对齐。\n- `space-between`：与交叉轴两端对齐，轴线之间的间隔平均分布。\n- `space-around`：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n- `stretch`（默认值）：轴线占满整个交叉轴。\n  ![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyj94lshj30h80lumxy.jpg)\n\n### 项目的属性\n\n- `order`\n- `flex-grow`\n- `flex-shrink`\n- `flex-basis`\n- `flex`\n- `align-self`\n\n#### 1.order\n\n定义项目的排列顺序。数值越小，排列越靠前，默认为 0。\n\n```css\n.item {\n  order: <integer>;\n}\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyk0vxo7j30kv0dct8w.jpg)\n\n#### 2.flex-grow\n\n定义项目的放大比例，默认为`0`，即如果存在剩余空间，也不放大。\n\n如果所有项目的`flex-grow`属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的`flex-grow`属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iylyev7sj30ma05v0sq.jpg)\n\n#### 3.flex-shrink\n\n定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。\n\n如果所有项目的`flex-shrink`属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的`flex-shrink`属性为 0，其他项目都为 1，则空间不足时，前者不缩小。\n\n负值对该属性无效。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iymkslb9j30jg041glp.jpg)\n\n#### 4.flex-basis\n\n定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n\n它可以设为跟`width`或`height`属性一样的值（比如 350px），则项目将占据固定空间。\n\n#### 5.flex\n\n`flex`属性是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。\n\n该属性有两个快捷值：`auto` (`1 1 auto`) 和 none (`0 0 auto`)。\n\n建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。\n\n#### 6.align-self\n\n允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n\n该属性可能取 6 个值，除了 auto，其他都与 align-items 属性完全一致。\n\n```css\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iynadp42j30kn0aut8r.jpg)\n\n### 兼容性\n\n| Chrome | Safari | Firefox | Opera | IE  | Android | iOS  |\n| ------ | ------ | ------- | ----- | --- | ------- | ---- |\n| 21+    | 6.1+   | 22+     | 12.1+ | 11+ | 4.4+    | 7.1+ |\n\nFlexbox 需要一些特定的前缀以支持大多数的浏览器。甚至还存在完全不同的属性名称或属性值。这就需要[Autoprefixer](https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fpostcss%2Fautoprefixer)或类似的 CSS 后处理器的辅助，具体内容请参考相关文档。\n\n## 6.REM 布局\n\n### rem/em 区别\n\n**rem:当前页面中元素的 REM 单位的样式值都是针对于 HTML 元素的 font-size 的值进行动态计算的**\n\n**em:表示父元素的字号的倍数。(特例：在 text-indent 属性中，表示文字宽度)**em 单位不仅仅可以用来设置字号，还可以设置任何盒模型的属性，比如 width、height、padding、margin、border。\n\nrem 作用于非根元素时，相对于根元素字体大小；rem 作用于根元素字体大小时，相对于其出初始字体大小（16px）。\n\n**rem 有一点优势就是可以和媒体查询配合，实现响应式布局：**\n\n使用 em 或 rem 单位进行相对布局，相对%百分比更加灵活，同时可以支持浏览器的字体大小调整和缩放等的正常显示，因为 em 是相对父级元素的原因没有得到推广。【中国站点制作网页的时候，习惯用 CSS 强制定义字体大小，保证每个人都看到一致的效果，包括网易、搜狐这些门户网站在内的大部分站点，用的都是绝对单位 px（像素）。但是，如果从网站**易用性**方面考虑，字体大小应该是可变的，一些视力不是那么好的人需要放大字体才能看得清页面内容。然而，占据大部分浏览器市场的 IE 无法调整那些使用 px 作为单位的字体大小。国外人士非常重视网站的易用性，相当一部分外国站点已经使用 em 作为字体单位。\n\n### 布局特点\n\n**包裹文字的各元素的尺寸采用 em/rem 做单位，而页面的主要划分区域的尺寸仍使用百分数或 px 做单位（同「流式布局」或「静态/固定布局」）**。**早期浏览器不支持整个页面按比例缩放**，仅支持网页内文字尺寸的放大，这种情况下。使用 em/rem 做单位，可以使包裹文字的元素随着文字的缩放而缩放。\n\n浏览器的默认字体高度一般为`16px`，即 1em:16px，但是 1:16 的比例不方便计算，为了使单位 em/rem 更直观，CSS 编写者常常将页面跟节点字体设为 62.5%，比如选择用 rem 控制字体时，先需要设置根节点 html 的字体大小，因为浏览器默认字体大小 16px\\*62.5%=10px。这样 1rem 便是 10px，方便了计算。\n\n### 设计思想\n\n1. 一般不要给元素设置具体的宽度,但是对于一些小图标可以设定具体宽度值\n2. 高度值可以设置固定值,设计稿有多大,我们就严格写多大\n3. 所有设置的固定值都用 REM 做单位(首先在 HTML 中设置一个基准值：PX 和 REM 的对应比例,然后在效果图上获取 PX 值,布局的时候转化为 REM 值)\n4. JS 获取真实屏幕的宽度,让其除以设计稿的宽度,算出比例,把之前的基准值按照比例进行重新的设定,这样项目就可以在移动端自适应了\n\n### 优点\n\n更能适应缩进/以字体单位 padding 或 margin／浏览器设置字体尺寸等情况（因为 em/rem 相对于字体大小，会同步改变）。例如：p{ text-indent: 2em; }。\n\n```css\np {\n  text-indent: 2em;\n}\n```\n\nrem 单位对于（根据屏幕尺寸）调整页面的各元素的尺寸、文字大小时比较好用\n\n### Rem 布局的 js 实现\n\n```javascript\n// px转rem，方便模拟小程序 rpx\npx2rem($px) {\n  $px / 750 * 10 * 1rem;\n}\n```\n\n```javascript\nif remlayout\n      script.\n        (function flexible (window, document) {\n          var docEl = document.documentElement\n          var dpr = window.devicePixelRatio || 1\n          function setBodyFontSize () {\n            if (document.body) {\n              document.body.style.fontSize = (12 * dpr) + 'px'\n            }\n            else {\n              document.addEventListener('DOMContentLoaded', setBodyFontSize)\n            }\n          }\n          setBodyFontSize()\n          function setRemUnit () {\n            var rem = docEl.clientWidth / 10\n            docEl.style.fontSize = rem + 'px'\n          }\n          setRemUnit()\n          window.addEventListener('resize', setRemUnit)\n          window.addEventListener('pageshow', function (e) {\n            if (e.persisted) { setRemUnit() }\n          })\n\n          if (dpr >= 2) {\n            var fakeBody = document.createElement('body')\n            var testElement = document.createElement('div')\n            testElement.style.border = '.5px solid transparent'\n            fakeBody.appendChild(testElement)\n            docEl.appendChild(fakeBody)\n            if (testElement.offsetHeight === 1) {\n              docEl.classList.add('hairlines')\n            }\n            docEl.removeChild(fakeBody)\n          }\n        }(window, document))\n```\n\n### 对比三种方式（响应式&&REM&&viewport）\n\n#### 响应式的优缺点\n\n优点：兼容性好，@media 在 ie9 以上是支持的，PC 和 MOBILE 是同一套代码的，不用分开。\n\n缺点：要写得 css 相对另外两个多很多，而且各个断点都要做好。css 样式会稍微大点，更麻烦。\n\n#### REM 优缺点\n\n优点：能维持能整体的布局效果，移动端兼容性好，不用写多个 css 代码，而且还可以利用@media 进行优化。\n\n缺点：开头要引入一段 js 代码，单位都要改成 rem(font-size 可以用 px)，计算 rem 比较麻烦(可以引用预处理器，但是增加了编译过程，相对麻烦了点)。pc 和 mobile 要分开。\n\n#### 设置 viewport 中的 width\n\n```html\n<meta name=\"viewport\" content=\"width=750\" />\n```\n\n优点：和 REM 相同，而且不用写 rem，直接使用 px，更加快捷。\n\n缺点：效果可能没 rem 的好，图片可能会相对模糊，而且无法使用@media 进行断点，不同 size 的手机上显示，高度间距可能会相差很大。\n\n## 7.Grid 布局（BOOTSTRAP 布局）\n\n网格布局（Grid）是最强大的 CSS 布局方案。\n\n它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。\n\nFlex 布局是轴线布局，只能指定\"项目\"针对轴线的位置，可以看作是**一维布局**。Grid 布局则是将容器划分成\"行\"和\"列\"，产生单元格，然后指定\"项目所在\"的单元格，可以看作是**二维布局**。Grid 布局远比 Flex 布局强大。\n\n采用网格布局的区域，称为\"容器\"（container）。容器内部采用网格定位的子元素，称为\"项目\"（item）。容器里面的水平区域称为\"行\"（row），垂直区域为\"列\"（column）。行和列的交叉区域，称为\"单元格\"（cell）。划分网格的线，称为\"网格线\"（grid line）。水平网格线划分出行，垂直网格线划分出列。\n\n### 容器的属性\n\n#### 1.display\n\n`display: grid`指定一个容器采用网格布局。\n\n默认情况下，容器元素都是块级元素，但也可以设成行内元素。`display: inline-grid;`\n\n注意，设为网格布局以后，容器子元素（项目）的`float`、`display: inline-block`、`display: table-cell`、`vertical-align`和`column-*`等设置都将失效。\n\n#### 2.grid-template-columns 属性， grid-template-rows 属性\n\n容器指定了网格布局以后，接着就要划分行和列。`grid-template-columns`属性定义每一列的列宽，`grid-template-rows`属性定义每一行的行高。\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 100px 100px 100px;\n  grid-template-rows: 100px 100px 100px;\n}\n```\n\n除了使用绝对单位，也可以使用百分比\n\n- repeat()：接受两个参数，第一个参数是重复的次数（上例是 3），第二个参数是所要重复的值。重复某种模式也是可以的。\n\n  ```css\n  grid-template-columns: repeat(2, 100px 20px 80px);\n  ```\n\n- auto-fill 关键字：有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用`auto-fill`关键字表示自动填充。\n\n  ```css\n  .container {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 100px);\n  }\n  ```\n\n- fr 关键字：为了方便表示比例关系，网格布局提供了`fr`关键字（fraction 的缩写，意为\"片段\"）。如果两列的宽度分别为`1fr`和`2fr`，就表示后者是前者的两倍。（`fr`可以与绝对长度的单位结合使用）\n\n- minmax()：`minmax()`函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。\n\n  ```css\n  grid-template-columns: 1fr 1fr minmax(100px, 1fr);\n  ```\n\n  上面代码中，`minmax(100px, 1fr)`表示列宽不小于`100px`，不大于`1fr`。\n\n- auto 关键字：表示由浏览器自己决定长度\n\n- 网格线的名称：`grid-template-columns`属性和`grid-template-rows`属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。（网格布局允许同一根线有多个名字，比如`[fifth-line row-5]`。）\n\n  ```css\n  .container {\n    display: grid;\n    grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];\n    grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];\n  }\n  ```\n\n#### 3.grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性\n\n- `grid-row-gap`属性设置行与行的间隔（行间距）\n- `grid-column-gap`属性设置列与列的间隔（列间距）。\n- `grid-gap`属性是`grid-column-gap`和`grid-row-gap`的合并简写形式：`grid-gap: <grid-row-gap> <grid-column-gap>;`(如果`grid-gap`省略了第二个值，浏览器认为第二个值等于第一个值。)\n\n1.  根据最新标准，上面三个属性名的`grid-`前缀已经删除，`grid-column-gap`和`grid-row-gap`写成`column-gap`和`row-gap`，`grid-gap`写成`gap`。\n\n#### 4.grid-template-areas 属性\n\n网格布局允许指定\"区域\"（area），一个区域由单个或多个单元格组成。\n\n```css\ngrid-template-areas:\n  \"header header header\"\n  \"main main sidebar\"\n  \"footer footer footer\";\n```\n\n区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为`区域名-start`，终止网格线自动命名为`区域名-end`。\n\n#### 5.grid-auto-flow 属性\n\n划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是\"先行后列\"，即先填满第一行，再开始放入第二行，即下图数字的顺序。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyo19otvj30au0b6glp.jpg)\n\n- 这个顺序由`grid-auto-flow`属性决定，默认值是`row`，即\"先行后列\"。\n- 也可以将它设成`column`，变成\"先列后行\"。\n- 设为`row dense`，表示\"先行后列\"，并且尽可能紧密填满，尽量不出现空格。\n- `column dense`，表示\"先列后行\"，并且尽量填满空格。\n\n#### 6.justify-items 属性， align-items 属性， place-items 属性\n\n- `justify-items`属性设置单元格内容的水平位置（左中右）\n\n- `align-items`属性设置单元格内容的垂直位置（上中下）。\n\n  这两个属性的写法完全相同，都可以取下面这些值。\n\n  - start：对齐单元格的起始边缘。\n  - end：对齐单元格的结束边缘。\n  - center：单元格内部居中。\n  - stretch：拉伸，占满单元格的整个宽度（默认值）。\n\n- `place-items`属性是`align-items`属性和`justify-items`属性的合并简写形式。（如果省略第二个值，则浏览器认为与第一个值相等。）\n\n  ```css\n  place-items: <align-items> <justify-items>;\n  ```\n\n#### 7.justify-content 属性， align-content 属性， place-content 属性\n\n- `justify-content`属性是整个内容区域在容器里面的水平位置（左中右）\n\n- `align-content`属性是整个内容区域的垂直位置（上中下）。\n\n  这两个属性的写法完全相同，都可以取下面这些值。\n\n  只是将水平方向改成垂直方向。）\n\n  - start - 对齐容器的起始边框。\n  - end - 对齐容器的结束边框。\n  - center - 容器内部居中。\n  - stretch - 项目大小没有指定时，拉伸占据整个网格容器。\n  - space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。\n  - space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。\n  - space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。\n\n- `place-content`属性是`align-content`属性和`justify-content`属性的合并简写形式。（如果省略第二个值，浏览器就会假定第二个值等于第一个值。）\n\n  ```css\n  place-content: <align-content> <justify-content>;\n  ```\n\n#### 8.grid-auto-columns 属性， grid-auto-rows 属性\n\n有时候，一些项目的指定位置，在现有网格的外部。比如网格只有 3 列，但是某一个项目指定在第 5 行。这时，浏览器会自动生成多余的网格，以便放置项目。\n\n`grid-auto-columns`属性和`grid-auto-rows`属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与`grid-template-columns`和`grid-template-rows`完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。\n\n划分好的网格是 3 行 x 3 列，但是，8 号项目指定在第 4 行，9 号项目指定在第 5 行。\n\n```css\n.container {\n  display: grid;\n  grid-template-columns: 100px 100px 100px;\n  grid-template-rows: 100px 100px 100px;\n  grid-auto-rows: 50px;\n}\n```\n\n上面代码指定新增的行高统一为 50px（原始的行高为 100px）。\n\n#### 9.grid-template 属性， grid 属性\n\n`grid-template`属性是`grid-template-columns`、`grid-template-rows`和`grid-template-areas`这三个属性的合并简写形式。\n\n`grid`属性是`grid-template-rows`、`grid-template-columns`、`grid-template-areas`、 `grid-auto-rows`、`grid-auto-columns`、`grid-auto-flow`这六个属性的合并简写形式。\n\n### 项目属性\n\n#### 1.grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性\n\n项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。\n\n- `grid-column-start`属性：左边框所在的垂直网格线\n- `grid-column-end`属性：右边框所在的垂直网格线\n- `grid-row-start`属性：上边框所在的水平网格线\n- `grid-row-end`属性：下边框所在的水平网格线\n\n```css\n.item-1 {\n  grid-column-start: 2;\n  grid-column-end: 4;\n}\n```\n\n这四个属性的值还可以使用`span`关键字，表示\"跨越\"，即左右边框（上下边框）之间跨越多少个网格。\n\n使用这四个属性，如果产生了项目的重叠，则使用`z-index`属性指定项目的重叠顺序。\n\n#### 2.grid-column 属性， grid-row 属性\n\n- `grid-column`属性是`grid-column-start`和`grid-column-end`的合并简写形式\n\n- `grid-row`属性是`grid-row-start`属性和`grid-row-end`的合并简写形式。\n\n  这两个属性之中，也可以使用`span`关键字，表示跨越多少个网格。斜杠以及后面的部分可以省略，默认跨越一个网格。\n\n  ```css\n  .item-1 {\n    background: #b03532;\n    grid-column: 1 / 3;\n    grid-row: 1 / 3;\n  }\n  /* 等同于 */\n  .item-1 {\n    background: #b03532;\n    grid-column: 1 / span 2;\n    grid-row: 1 / span 2;\n  }\n  ```\n\n#### 3.grid-area 属性\n\n`grid-area`属性指定项目放在哪一个区域。\n\n```css\n.item-1 {\n  grid-area: e;\n}\n```\n\n`grid-area`属性还可用作`grid-row-start`、`grid-column-start`、`grid-row-end`、`grid-column-end`的合并简写形式，直接指定项目的位置。\n\n```css\n.item {\n  grid-area: <row-start> / <column-start> / <row-end> / <column-end>;\n}\n```\n\n#### 4.justify-self 属性， align-self 属性， place-self 属性\n\n- `justify-self`属性设置单元格内容的水平位置（左中右），跟`justify-items`属性的用法完全一致，但只作用于单个项目。\n\n- `align-self`属性设置单元格内容的垂直位置（上中下），跟`align-items`属性的用法完全一致，也是只作用于单个项目。\n\n  这两个属性都可以取下面四个值。\n\n  - start：对齐单元格的起始边缘。\n  - end：对齐单元格的结束边缘。\n  - center：单元格内部居中。\n  - stretch：拉伸，占满单元格的整个宽度（默认值）。\n\n- `place-self`属性是`align-self`属性和`justify-self`属性的合并简写形式。\n\n  ```css\n  place-self: <align-self> <justify-self>;\n  ```\n\n### 兼容性\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iyqd0osoj326m0rok1w.jpg)\n\n### 对比 Bootstrap\n\n- 标签会更加简洁：相比`Bootstrap`，使用 grid 会使你的 HTML 更加干净。`Bootstrap`需要创建的标签，每个 row 都需要一个`<div>`标签，使用了 class name 来指定布局(`col-xs-2`)。grid 用来布局看起来更简单，丑陋的类名和每行所需的额外的 div 标签一去不复返了，简简单单一个 container 和里面的 item。与`Bootstrap`不同的是，随着布局复杂度的增加，Grid 布局标签的复杂度将不会增加太多。\n- 更灵活：用`CSS Grid`的话会非常简单，我们只需要添加一个`media query`就可以重新排列布局。而如果想在`Bootstrap`中做同样的事情，就必须得修改 HTML 了，需要调整标签的顺序。\n- 不再限死 12 列：`Bootstrap`的 grid 系统分为了 12 列，如果你想要一个 5 列的布局就会纠结，或是 7 列、9 列、任何不会合为 12 列的。`CSS Grid`就没有任何限制，你可以让 grid 正好有你想要的数量。\n- 浏览器支持：全球 75%的网站流量支持`CSS Grid`\n\n## 结论：\n\n1. 如果只做 pc 端，那么静态布局（定宽度）是最好的选择；\n2. 如果做移动端，且设计对高度和元素间距要求不高，那么弹性布局（rem+js）是最好的选择，一份 css+一份 js 调节 font-size 搞定；\n3. 如果 pc，移动要兼容，而且要求很高那么响应式布局还是最好的选择，前提是设计根据不同的高宽做不同的设计，响应式根据媒体查询做不同的布局.\n","tags":["CSS","布局"],"categories":["CSS"]},{"title":"CSS3新特性","url":"/2019/04/28/CSS3新特性/","content":"\n# CSS3 新特性\n\n## 1. 选择器\n\nCSS3 中新添加了很多选择器，解决了很多之前需要用 javascript 才能解决的布局问题。\n\n- element1~element2: 选择前面有 element1 元素的每个 element2 元素。\n- [attribute^=value] ：选择某元素 attribute 属性是以 value 开头的。\n- [attribute$=value]：选择某元素 attribute 属性是以 value 结尾的。\n- [attribute*=value]：选择某元素 attribute 属性包含 value 字符串的。\n- E:first-of-type: 选择属于其父元素的首个 E 元素的每个 E 元素。\n- E:last-of-type: 选择属于其父元素的最后 E 元素的每个 E 元素。\n- E:only-of-type: 选择属于其父元素唯一的 E 元素的每个 E 元素。\n- E:only-child: 选择属于其父元素的唯一子元素的每个 E 元素。\n- E:nth-child(n): 选择属于其父元素的第 n 个子元素的每个 E 元素。\n- E:nth-last-child(n): 选择属于其父元素的倒数第 n 个子元素的每个 E 元素。\n- E:nth-of-type(n): 选择属于其父元素第 n 个 E 元素的每个 E 元素。\n- E:nth-last-of-type(n): 选择属于其父元素倒数第 n 个 E 元素的每个 E 元素。\n- E:last-child: 选择属于其父元素最后一个子元素每个 E 元素。\n- :root: 选择文档的根元素。\n- E:empty: 选择没有子元素的每个 E 元素（包括文本节点)。\n- E:target: 选择当前活动的 E 元素。\n- E:enabled: 选择每个启用的 E 元素。\n- E:disabled: 选择每个禁用的 E 元素。\n- E:checked: 选择每个被选中的 E 元素。\n- E:not(selector): 选择非 selector 元素的每个元素。\n- E::selection: 选择被用户选取的元素部分。\n  <!-- more -->\n\n## 2. Transition,Transform 和 Animation\n\n这三个特性是 CSS3 新增的和动画相关的特性。\n\n- Transition\n\n  Transition 可以在当元素从一种样式变换为另一种样式时为元素添加效果，而不用使用 Flash 动画或 JavaScript。\n  Transition 有如下属性：\n\n  - transition-property: 规定应用过渡的 CSS 属性的名称。\n  - transition-duration: 规定完成过渡效果需要多长时间。\n  - transition-delay: 规定过渡效果何时开始，默认是 0。\n  - transition-timing-function: 规定过渡效果的时间曲线，默认是”ease”，还有 linear、ease-in、ease-out、ease-in-out 和 cubic-bezier 等过渡类型。\n  - transition: 简写属性，用于在一个属性中设置四个过渡属性。\n\n- Transform\n\n  Transform 用来向元素应用各种 2D 和 3D 转换，该属性允许我们对元素进行旋转、缩放、移动或倾斜等操作。\n\n  变换类型：\n\n  - none: 定义不进行转换。\n  - matrix(n,n,n,n,n,n): 定义 2D 转换，使用六个值的矩阵。\n  - matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n): 定义 3D 转换，使用 16 个值的 4x4 矩阵。\n  - translate(x,y): 定义 2D 位移转换。\n  - translate3d(x,y,z): 定义 3D 位移转换。\n  - translateX(x): 定义位移转换，只是用 X 轴的值。\n  - translateY(y): 定义位移转换，只是用 Y 轴的值。\n  - translateZ(z): 定义 3D 位移转换，只是用 Z 轴的值。\n  - scale(x,y): 定义 2D 缩放转换。\n  - scale3d(x,y,z): 定义 3D 缩放转换。\n  - scaleX(x): 通过设置 X 轴的值来定义缩放转换。\n  - scaleY(y): 通过设置 Y 轴的值来定义缩放转换。\n  - scaleZ(z): 通过设置 Z 轴的值来定义 3D 缩放转换。\n  - rotate(angle): 定义 2D 旋转，在参数中规定角度。\n  - rotate3d(x,y,z,angle): 定义 3D 旋转。\n  - rotateX(angle): 定义沿着 X 轴的 3D 旋转。\n  - rotateY(angle): 定义沿着 Y 轴的 3D 旋转。\n  - rotateZ(angle): 定义沿着 Z 轴的 3D 旋转。\n  - skew(x-angle,y-angle): 定义沿着 X 和 Y 轴的 2D 倾斜转换。\n  - skewX(angle): 定义沿着 X 轴的 2D 倾斜转换。\n  - skewY(angle): 定义沿着 Y 轴的 2D 倾斜转换。\n  - perspective(n): 为 3D 转换元素定义透视视图。\n\n- Animation\n\n  Animation 让 CSS 拥有了可以制作动画的功能。使用 CSS3 的 Animation 制作动画我们可以省去复杂的 js 代码。\n\n## 3. 边框\n\nCSS3 新增了三个边框属性，分别是 border-radius、box-shadow 和 border-image。\n\n- border-radius 可以创建圆角边框\n- box-shadow 可以为元素添加阴影\n- border-image 可以使用图片来绘制边框。\n\n## 4. 背景\n\nCSS3 新增了几个关于背景的属性，分别是 background-clip、background-origin、background-size 和 background-break。\n\n- background-clip\n\n  background-clip 属性用于确定背景画区，有以下几种可能的属性：\n\n  - background-clip: border-box; 背景从 border 开始显示\n  - background-clip: padding-box; 背景从 padding 开始显示\n  - background-clip: content-box; 背景显 content 区域开始显示\n  - background-clip: no-clip; 默认属性，等同于 border-box\n\n  通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围。\n\n- background-origin\n\n  background-clip 属性用于确定背景的位置，它通常与 background-position 联合使用，可以从 border、padding、content 来计算 background-position（就像 background-clip）。\n\n  - background-origin: border-box; 从 border 开始计算 background-position\n  - background-origin: padding-box; 从 padding 开始计算 background-position\n  - background-origin: content-box; 从 content 开始计算 background-position\n\n- background-size\n\n  background-size 属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：\n\n  - background-size: contain; 缩小图片以适合元素（维持像素长宽比）\n  - background-size: cover; 扩展元素以填补元素（维持像素长宽比）\n  - background-size: 100px 100px; 缩小图片至指定的大小\n  - background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包 含元素的尺寸\n\n- background-break\n\n  CSS3 中，元素可以被分成几个独立的盒子（如使内联元素 span 跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示。\n\n  - background-break: continuous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）\n  - background-break: bounding-box; 把盒之间的距离计算在内；\n  - background-break: each-box; 为每个盒子单独重绘背景。\n\n## 5. 文字效果\n\n- word-wrap\n\n  CSS3 中，word-wrap 属性允许您允许文本强制文本进行换行，即这意味着会对单词进行拆分。所有主流浏览器都支持 word-wrap 属性。\n\n- text-overflow\n\n  它与 word-wrap 是协同工作的，word-wrap 设置或检索当当前行超过指定容器的边界时是否断开转行，而 text-overflow 则设置或检索当当前行超过指定容器的边界时如何显示。对于“text-overflow”属性，有“clip”和“ellipsis”两种可供选择。\n\n- text-shadow\n\n  CSS3 中，text-shadow 可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色。\n\n- text-decoration\n\n  CSS3 里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：\n\n  - text-fill-color: 设置文字内部填充颜色\n  - text-stroke-color: 设置文字边界填充颜色\n  - text-stroke-width: 设置文字边界宽度\n\n## 6. 渐变\n\nCSS3 新增了渐变效果，包括 linear-gradient(线性渐变)和 radial-gradient(径向渐变)。\n\n## 7. @font-face 特性\n\n通过 CSS3，web 设计师可以使用他们喜欢的任意字体。当您您找到或购买到希望使用的字体时，可将该字体文件存放到 web 服务器上，它会在需要时被自动下载到用户的计算机上。字体是在 CSS3 @font-face 规则中定义的。Firefox、Chrome、Safari 以及 Opera 支持 .ttf(True Type Fonts)和 .otf(OpenType Fonts)类型的字体。IE9+ 支持新的@font-face 规则，但是仅支持 .eot 类型的字体(Embedded OpenType)。\n\n在新的@font-face 规则中，必须首先定义字体的名称（比如 myFont），然后指向该字体文件。\n如需为 HTML 元素使用字体，请通过 font-family 属性来引用字体的名称 (myFont)\n\n## 8. 多列布局\n\n通过 CSS3，能够创建多个列来对文本进行布局，IE10 和 Opera 支持多列属性。Firefox 需要前缀-moz-，Chrome 和 Safari 需要前缀-webkit-。主要有如下三个属性：\n\n- column-count: 规定元素应该被分隔的列数。\n- column-gap: 规定列之间的间隔。\n- column-rule: 设置列之间的宽度、样式和颜色规则\n\n## 9. 用户界面\n\nCSS3 中，新的用户界面特性包括重设元素尺寸、盒尺寸以及轮廓等。Firefox、Chrome 以及 Safari 支持 resize 属性。IE、Chrome、Safari 以及 Opera 支持 box-sizing 属性。Firefox 需要前缀-moz-。\n所有主流浏览器都支持 outline-offset 属性，除了 IE。\n\n- resize\n\n  resize 属性规定是否可由用户调整元素尺寸。如果希望此属性生效，需要设置元素的 overflow 属性，值可以是 auto、hidden 或 scroll。\n\n- box-sizing\n\n  box-sizing 属性可设置的值有 content-box、border-box 和 inherit。\n\n  - content-box: padding 和 border 不被包含在定义的 width 和 height 之内。对象的实际宽度等于设置的 width 值和 border、padding 之和，即 (Element width = width + border + padding)，此属性表现为标准模式下的盒模型。\n  - border-box: padding 和 border 被包含在定义的 width 和 height 之内。对象的实际宽度就等于设置的 width 值，即使定义有 border 和 padding 也不会改变对象的实际宽度，即 (Element width = width)，此属性表现为怪异模式下的盒模型。\n\n- outline-offset\n\n  outline-offset 属性对轮廓进行偏移，并在超出边框边缘的位置绘制轮廓。\n","tags":["CSS"],"categories":["CSS"]},{"title":"BFC","url":"/2019/04/10/BFC/","content":"\n# BFC\n\n## BFC 的定义：\n\nBFC(Block formatting context)直译为\"块级格式化上下文\"。它**是一个独立的渲染区域**，只有**Block-level box**参与（在下面有解释）， 它规定了内部的 Block-level Box 如何布局，并且与这个区域外部毫不相干。**通俗地讲，BFC 是一个容器，用于管理块级元素。**\n\n <!-- more -->\n\n## 触发 BFC 的方式（以下任意一条就可以）\n\n1. 根元素，即 HTML 元素\n2. float 的值不为 none（为 `left`或`right`）\n3. overflow 的值不为 visible（为`hidden`或`auto`或`scroll`）\n4. display 的值为`table-cell`、`table-caption`、`inline-flex`、`flex`和`inline-block`之一\n5. position 的值不为 static 或者 releative 中任何一个(为`absolute`或`fixed`)\n\n## BFC 的布局规则\n\n1. 内部的 Box 会在垂直方向，一个接一个地放置。\n2. Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠（**margin 重叠三个条件:同属于一个 BFC;相邻;块级元素**），两个相邻的 BFC 上下 margin 不会重叠\n3. 每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。\n4. BFC 的区域不会与 float box 重叠。非浮动元素不会覆盖浮动元素的位置。\n5. BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。（触发 BFC，回流的局部渲染）\n6. 计算 BFC 的高度时，浮动元素也参与计算（清除浮动 haslayout）\n7. margin 不会传递给父级（父级触发了 BFC）\n\n### 对比普通文档流的布局规则\n\n1. 浮动的元素是不会被父级计算高度\n2. 非浮动元素会覆盖浮动元素的位置\n3. margin 会传递给父级\n4. 两个相邻的元素上下 margin 会重叠\n\n## BFC 有哪些作用：\n\n1. 自适应两栏布局（规则 4）\n2. 可以阻止元素被浮动元素覆盖（规则 4）\n3. 可以包含浮动元素——清除内部浮动（规则 6）\n4. 分属于不同的 BFC 时可以阻止 margin 重叠（规则 2）\n","tags":["CSS","布局"],"categories":["CSS"]},{"title":"字符编码：Unicode与JavaScript","url":"/2019/04/06/字符编码：Unicode与Javascript/","content":"\n# 字符编码：Unicode 与 Javascript\n\n## 1.**ASCII 码**\n\n我们知道，计算机内部，所有信息最终都是一个二进制值。每一个二进制位（bit）有`0`和`1`两种状态，因此八个二进制位就可以组合出 256 种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示 256 种不同的状态，每一个状态对应一个符号，就是 256 个符号，从`00000000`到`11111111`。\n\n上个世纪 60 年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为 ASCII 码，一直沿用至今。\n\nASCII 码一共规定了 128 个字符的编码，比如空格`SPACE`是 32（二进制`00100000`），大写的字母`A`是 65（二进制`01000001`）。这 128 个符号（包括 32 个不能打印出来的控制符号），只占用了一个字节的后面 7 位，最前面的一位统一规定为`0`。\n\n <!-- more -->\n\n## 2.非 ASCII 编码\n\n英语用 128 个符号编码就够了，但是用来表示其他语言，128 个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的`é`的编码为 130（二进制`10000010`）。这样一来，这些欧洲国家使用的编码体系，可以表示最多 256 个符号。\n\n这里就又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用 256 个符号的编码方式，代表的字母却不一样。比如，130 在法语编码中代表了`é`，在希伯来语编码中却代表了字母`Gimel` (`ג`)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0--127 表示的符号是一样的，不一样的只是 128--255 的这一段。\n\n至于亚洲国家的文字，使用的符号就更多了，汉字就多达 10 万左右。一个字节只能表示 256 种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是 GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 = 65536 个符号。\n\n中文编码的问题需要专文讨论，此处不涉及。这里只指出，虽然都是用多个字节表示一个符号，但是 GB 类的汉字编码与后文的 Unicode 和 UTF-8 是毫无关系的。\n\n## 3.Unicode\n\nUnicode 源于一个很简单的想法：将全世界所有的字符包含在一个集合里，计算机只要支持这一个字符集，就能显示所有的字符，再也不会有乱码了。\n\nUnicode 当然是一个很大的集合，现在的规模可以容纳 100 多万个符号。每个符号的编码都不一样，比如，`U+0639`表示阿拉伯字母`Ain`，`U+0041`表示英语的大写字母`A`，`U+4E25`表示汉字`严`。具体的符号对应表，可以查询[unicode.org](http://www.unicode.org/)，或者专门的[汉字对应表](http://www.chi2ko.com/tool/CJK.htm)。\n\n### 码点\n\n**它从 0 开始，为每个符号指定一个编号，这叫做\"码点\"（code point）。**比如，码点 0 的符号就是 null（表示所有二进制位都是 0）。\n\n```javascript\nU+0000 = null\n```\n\n上式中，U+表示紧跟在后面的十六进制数是 Unicode 的码点。\n\n目前，Unicode 的最新版本是 7.0 版，一共收入了 109449 个符号，其中的中日韩文字为 74500 个。可以近似认为，全世界现有的符号当中，三分之二以上来自东亚文字。比如，中文\"好\"的码点是十六进制的 597D。\n\n### 分区（基本平面&&辅助平面）\n\n这么多符号，Unicode 不是一次性定义的，而是分区定义。每个区可以存放 65536 个（216）字符，称为一个平面（plane）。目前，一共有 17 个（25）平面，也就是说，整个 Unicode 字符集的大小现在是 221。\n\n最前面的 65536 个字符位，称为基本平面（缩写 BMP），它的码点范围是从 0 一直到 216-1，写成 16 进制就是从 U+0000 到 U+FFFF。所有最常见的字符都放在这个平面，这是 Unicode 最先定义和公布的一个平面。\n\n剩下的字符都放在辅助平面（缩写 SMP），码点范围从 U+010000 一直到 U+10FFFF。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7fmupoj30ug0fedin.jpg)\n\n### 问题\n\n需要注意的是，Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。\n\n比如，汉字`严`的 Unicode 是十六进制数`4E25`，转换成二进制数足足有 15 位（`100111000100101`），也就是说，这个符号的表示至少需要 2 个字节。表示其他更大的符号，可能需要 3 个字节或者 4 个字节，甚至更多。\n\n- 如何才能区别 Unicode 和 ASCII ？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？\n- 我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是`0`，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。\n\n## 4.UTF-32 与 UTF-8\n\n### UTF-32\n\n**最直观的编码方法是，每个码点使用四个字节表示，字节内容一一对应码点。这种编码方法就叫做 UTF-32。**比如，码点 0 就用四个字节的 0 表示，码点 597D 就在前面加两个字节的 0。\n\n```javascript\nU+0000 = 0x0000 0000\n\nU+597D = 0x0000 597D\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7hhpnmj30tc0g8412.jpg)\n\n- #### UTF-32 的优点\n\n  转换规则简单直观，查找效率高。\n\n- #### 缺点\n\n  浪费空间，同样内容的英语文本，它会比 ASCII 编码大四倍。这个缺点很致命，导致实际上没有人使用这种编码方法，HTML 5 标准就明文规定，网页不得编码成 UTF-32。\n\n### UTF-8\n\n**UTF-8 是一种变长的编码方法，字符长度从 1 个字节到 4 个字节不等。**越是常用的字符，字节越短，最前面的 128 个字符，只使用 1 个字节表示，与 ASCII 码完全相同。\n\n由于 UTF-8 这种节省空间的特性，导致它成为互联网上最常见的网页编码。\n\n- #### UTF-8 的编码规则很简单，只有二条：\n\n1）对于单字节的符号，字节的第一位设为`0`，后面 7 位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。\n\n2）对于`n`字节的符号（`n > 1`），第一个字节的前`n`位都设为`1`，第`n + 1`位设为`0`，后面字节的前两位一律设为`10`。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。\n\n- #### 编码规则：\n\n```javascript\nUnicode符号范围      |        UTF-8编码方式\n(十六进制)        \t |              （二进制）\n----------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n```\n\n跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是`0`，则这个字节单独就是一个字符；如果第一位是`1`，则连续有多少个`1`，就表示当前字符占用多少个字节。\n\n下面，还是以汉字`严`为例，演示如何实现 UTF-8 编码。\n\n`严`的 Unicode 是`4E25`（`100111000100101`），根据上表，可以发现`4E25`处在第三行的范围内（`0000 0800 - 0000 FFFF`），因此`严`的 UTF-8 编码需要三个字节，即格式是`1110xxxx 10xxxxxx 10xxxxxx`。然后，从`严`的最后一个二进制位开始，依次从后向前填入格式中的`x`，多出的位补`0`。这样就得到了，`严`的 UTF-8 编码是`11100100 10111000 10100101`，转换成十六进制就是`E4B8A5`。\n\n## 5.UTF-16\n\nUTF-16 编码介于 UTF-32 与 UTF-8 之间，同时结合了定长和变长两种编码方法的特点。\n\n它的编码规则很简单：基本平面的字符占用 2 个字节，辅助平面的字符占用 4 个字节。**也就是说，UTF-16 的编码长度要么是 2 个字节（U+0000 到 U+FFFF），要么是 4 个字节（U+010000 到 U+10FFFF）。**\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7e7xfaj30q40e40v3.jpg)\n\n于是就有一个问题，当我们遇到两个字节，怎么看出它本身是一个字符，还是需要跟其他两个字节放在一起解读？\n\n在基本平面内，从 U+D800 到 U+DFFF 是一个空段，即这些码点不对应任何字符。因此，这个空段可以用来映射辅助平面的字符。\n\n具体来说，辅助平面的字符位共有 220 个，也就是说，对应这些字符至少需要 20 个二进制位。UTF-16 将这 20 位拆成两半，前 10 位映射在 U+D800 到 U+DBFF（空间大小 210），称为高位（H），后 10 位映射在 U+DC00 到 U+DFFF（空间大小 210），称为低位（L）。这意味着，一个辅助平面的字符，被拆成两个基本平面的字符表示。\n\n- #### 编码规则\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7gmgarj30w20g2myq.jpg)\n\n**所以，当我们遇到两个字节，发现它的码点在 U+D800 到 U+DBFF 之间，就可以断定，紧跟在后面的两个字节的码点，应该在 U+DC00 到 U+DFFF 之间，这四个字节必须放在一起解读。**\n\n- #### Unicode 码点与 UTF-16 转码\n\n首先区分这是基本平面字符，还是辅助平面字符。如果是前者，直接将码点转为对应的十六进制形式，长度为两字节。\n\n```javascript\nU+597D = 0x597D\n```\n\n如果是辅助平面字符，Unicode 3.0 版给出了转码公式。\n\n```javascript\nH = Math.floor((c - 0x10000) / 0x400) + 0xd800;\n\nL = ((c - 0x10000) % 0x400) + 0xdc00;\n```\n\n## 6.JavaScript 用的是 UCS-2\n\nJavaScript 语言采用 Unicode 字符集，但是只支持一种编码方法。**UCS-2！**\n\n_互联网还没出现的年代，曾经有两个团队，不约而同想搞统一字符集。一个是 1988 年成立的 Unicode 团队，另一个是 1989 年成立的 UCS 团队。等到他们发现了对方的存在，很快就达成一致：世界上不需要两套统一字符集 1991 年 10 月，两个团队决定合并字符集。也就是说，从今以后只发布一套字符集，就是 Unicode，并且修订此前发布的字符集，UCS 的码点将与 Unicode 完全一致。_\n\n**两者的关系简单说，就是 UTF-16 取代了 UCS-2，或者说 UCS-2 整合进了 UTF-16。**\n\n**在 JavaScript 语言出现的时候，还没有 UTF-16 编码。**\n\n**由于 JavaScript 只能处理 UCS-2 编码，造成所有字符在这门语言中都是 2 个字节，如果是 4 个字节的字符，会当作两个双字节的字符处理。**JavaScript 的字符函数都受到这一点的影响，无法返回正确结果。\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7g1rsaj30xi0bogn7.jpg)\n\n以字符![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7epbosj301c01g741.jpg)为例，它的 UTF-16 编码是 4 个字节的 0xD834 DF06。问题就来了，4 个字节的编码不属于 UCS-2，JavaScript 不认识，只会把它看作单独的两个字符 U+D834 和 U+DF06。前面说过，这两个码点是空的，所以 JavaScript 会认为![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7epbosj301c01g741.jpg)是两个空字符组成的字符串！\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7gyspej30gk0go0tp.jpg)\n\n上面代码表示，JavaScript 认为字符![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7epbosj301c01g741.jpg)的长度是 2，取到的第一个字符是空字符，取到的第一个字符的码点是 0xDB34。这些结果都不正确！\n\n解决这个问题，必须对码点做一个判断，然后手动调整。下面是正确的遍历字符串的写法。\n\n```javascript\nwhile (++index < length) {\n  // ...\n  if (charCode >= 0xd800 && charCode <= 0xdbff) {\n    output.push(character + string.charAt(++index));\n  } else {\n    output.push(character);\n  }\n}\n```\n\n上面代码表示，遍历字符串的时候，必须对码点做一个判断，只要落在 0xD800 到 0xDBFF 的区间，就要连同后面 2 个字节一起读取。\n\n类似的问题存在于所有的 JavaScript 字符操作函数。\n\n- String.prototype.replace()\n- String.prototype.substring()\n- String.prototype.slice()\n- ...\n\n上面的函数都只对 2 字节的码点有效。要正确处理 4 字节的码点，就必须逐一部署自己的版本，判断一下当前字符的码点范围。\n\n## 7.ES6\n\nECMAScript 6（简称 ES6），大幅增强了 Unicode 支持，基本上解决了这个问题。\n\n**（1）正确识别字符**\n\nES6 可以自动识别 4 字节的码点。因此，遍历字符串就简单多了。\n\n```javascript\nfor (let s of string) {\n  // ...\n}\n```\n\n但是，为了保持兼容，length 属性还是原来的行为方式。为了得到字符串的正确长度，可以用下面的方式。\n\n```javascript\nArray.from(string).length;\n```\n\n**（2）码点表示法**\n\nJavaScript 允许直接用码点表示 Unicode 字符，写法是\"反斜杠+u+码点\"。\n\n```javascript\n\"好\" === \"\\u597D\"; // true\n```\n\n但是，这种表示法对 4 字节的码点无效。ES6 修正了这个问题，只要将码点放在大括号内，就能正确识别。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7f113bj30xo08mgm0.jpg)\n\n**（3）字符串处理函数**\n\nES6 新增了几个专门处理 4 字节码点的函数。\n\n- **String.fromCodePoint()**：从 Unicode 码点返回对应字符\n- **String.prototype.codePointAt()**：从字符返回对应的码点\n- **String.prototype.at()**：返回字符串给定位置的字符\n\n**（4）正则表达式**\n\nES6 提供了 u 修饰符，对正则表达式添加 4 字节码点的支持。\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy7emd6cj30xu08qt95.jpg)\n\n**（5）Unicode 正规化**\n\n有些字符除了字母以外，还有[附加符号](http://zh.wikipedia.org/wiki/附加符号)。比如，汉语拼音的 Ǒ，字母上面的声调就是附加符号。对于许多欧洲语言来说，声调符号是非常重要的。\n\nUnicode 提供了两种表示方法。一种是带附加符号的单个字符，即一个码点表示一个字符，比如 Ǒ 的码点是 U+01D1；另一种是将附加符号单独作为一个码点，与主体字符复合显示，即两个码点表示一个字符，比如 Ǒ 可以写成 O（U+004F） + ˇ（U+030C）。\n\n```javascript\n// 方法一\n\"\\u01D1\";\n// 'Ǒ'\n\n// 方法二\n\"\\u004F\\u030C\";\n// 'Ǒ'\n```\n\n这两种表示方法，视觉和语义都完全一样，理应作为等同情况处理。但是，JavaScript 无法辨别。\n\n```javascript\n\"\\u01D1\" === \"\\u004F\\u030C\";\n//false\n```\n\nES6 提供了 normalize 方法，允许[\"Unicode 正规化\"](http://zh.wikipedia.org/wiki/Unicode正規化)，即将两种方法转为同样的序列。\n\n```javascript\n\"\\u01D1\".normalize() === \"\\u004F\\u030C\".normalize();\n// true\n```\n\n## 8.总结截取含有四字节字符的字符串不会出现乱码的方法\n\n```javascript\nlet nickname = \"非拉🍒非拉\";\nnickname.length; // 6\n```\n\n### Array.from 方法\n\n`Array.from`这个方法能够将类数组转换为真实的数组，比如`NodeList`, `argument`等，同样，也包括字符串。\n\n```javascript\nArray.from(nickname); // [\"非\", \"拉\", \"🍒\", \"非\", \"拉\"]\nnickname.split(\"\"); // [\"非\", \"拉\", \"�\", \"�\", \"非\", \"拉\"]\n```\n\n使用 Array.from 把 nickname 转换后，可以看到转换成一个真实的数组了，樱桃字符占了数组中的一个位置，然后按照数组中的方法截取再进行拼接即可，而使用 split 方法拆分，则还是乱码：\n\n```javascript\nfunction truncated(str, num) {\n  return Array.from(str)\n    .slice(0, num)\n    .join(\"\");\n}\ntruncated(nickname, 3); // 非拉🍒\n```\n\n### codePointAt()方法\n\n在 ES6 之前， JS 的字符串以 16 位字符编码(UTF-16)为基础。每个 16 位序列(相当于 2 个字节)是一个编码单元(code unit)，可简称为码元，用于表示一个字符。字符串所有的属性与方法(如 length 属性与 charAt() 方法等)都是基于 16 位序列。\n\n比如 length 方法、nickname[2]、split 方法等操作，都会产生异常。为此在 ES6 中，加强了对 Unicode 的支持，并且扩展了字符串对象。\n\n对于 Unicode 码点大于 0xFFFF 的字符，是使用 4 个字节进行存储。ES6 提供了`codePointAt`方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点。\n\n```javascript\n// 获取樱桃的码点\n\"🍒\".codePointAt(0).toString(16); // 1f352\n\n// 输出码点对应的字符\n(\"\\u{1f352}\"); // 🍒\n```\n\n请注意： 在之前 Unicode 编码，均在`[\\u000-\\uFFFF]`之间，因此可以使用类似`\\u0047`这样的编码；但是现在码点超过`\\uFFFF`的界限，若再这样使用，则获取不到对应的字符。因此在 ES6 中，码点的字符放在中括号内，类似上面的格式（所有的码点均可以使用这种格式）：\n\n```javascript\n\"\\u{1f352}\"; // 🍒\n\"\\u{47}\"; // G\n\"\\u{0047}\"; // G\n```\n\n那么就容易了：判断需要截取的位置是否正好是 4 字节的字符，如果是则延长一位截取，否则正常截取：\n\n```javascript\nfunction truncated(str, num) {\n  let index = Array.from(str)[num - 1].codePointAt(0) > 0xffff ? num + 1 : num;\n  return str.slice(0, index);\n}\ntruncated(nickname, 3); // 非拉🍒\n```\n\n### for-of\n\n`for-in`方法是遍历 key 值，`for-of`是遍历 value 值：\n\n```javascript\nlet arr = [\"a\", \"b\", \"c\"];\nfor (let k in arr) {\n  console.log(k); // 0 1 2\n}\n\nfor (let v of arr) {\n  console.log(v); // a b c\n}\n\nfor (let v of nickname) {\n  console.log(v); // 非 拉 🍒 非 拉\n}\n```\n\n因此利用这个功能，我们也能进行截取：\n\n```javascript\nfunction truncated(str, num) {\n  let s = \"\";\n  for (let v of nickname) {\n    s += v;\n    num--;\n    if (num <= 0) {\n      break;\n    }\n  }\n  return s;\n}\ntruncated(nickname, 3);\n```\n\n### 正确输出字符串的字符个数：\n\n```javascript\nfunction getLen(str) {\n  var len = str.length;\n  for (var i = 0; i < len; i++) {\n    var charCode = str.charCodeAt(i);\n    if (charCode >= 0xd800 && charCode <= 0xdbff) {\n      len--;\n      i++;\n    }\n  }\n  return len;\n}\n```\n\n```javascript\nArray.from(str).length;\n```\n\n## 9.string.length\n\n### string.length 返回的是什么 字符的个数还是字节数？为什么会与实际长度不一样？编码的部分详细说\n\nstring.length():\n返回字符串的长度（以字节为单位）。是符合字符串内容的实际字节数，不一定等于其容量。\n\nstring.size()和 string.length()是同义词，并返回完全相同的值。\n\nstring.max_size()：\n返回字符串的最大大小，返回字符串可以达到的最大长度。\n\nstring.resize():\nstring.resize(n)：把字符串的长度设置为 n 个字符\n如果 n 小于当前字符串长度 ，则只截取前 n 个字符，删除超出第 n 个字符的字符。\n如果大于，则在末端插入尽可能多的字符来扩展当前内容，以达到大小 n。 如果指定 c，则新元素将初始化为 c 的副本，否则为值初始化字符（空字符）。\n\nstring.capacity()：\n返回已分配存储的大小。当前为字符串分配的存储空间的大小，以字节表示。\n\n此容量不一定等于字符串长度。 它可以相等或更大，额外的空间允许对象在将新字符添加到字符串时优化其操作。\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"常用的正则","url":"/2019/03/29/常用的正则/","content":"\n# 正则\n\n## 1.校验数字\n\n```javascript\n数字：^\\d*$\nn位的数字：^\\d{n}$\n至少n位的数字：^\\d{n,}$\nm-n位的数字：^\\d{m,n}$\n零和非零开头的数字：^(0|[1-9][0-9]*)$\n非零开头的最多带两位小数的数字：^([1-9]\\d*)+(\\.\\d{1,2})?$\n带1-2位小数的正数或负数：^(\\-)?\\d+\\.\\d{1,2}$\n正数、负数、和小数：^(\\-)?\\d+(\\.\\d+)?$\n有两位小数的正实数：^\\d+\\.\\d{2}$\n有1~3位小数的正实数：^\\d+\\.\\d{1,3}$\n非零的正整数：^[1-9]\\d*$\n非零的负整数：^-[1-9]\\d*$\n非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n\n   <!-- more -->\n\n## 2.校验字符的表达式\n\n```javascript\n汉字：^[\\u4e00-\\u9fa5]+$\n英文和数字：^[A-Za-z0-9]+$\n长度为3-20的所有字符：^.{3,20}$\n由26个英文字母组成的字符串：^[A-Za-z]+$\n由26个大写英文字母组成的字符串：^[A-Z]+$\n由26个小写英文字母组成的字符串：^[a-z]+$\n由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$\n由数字、26个英文字母或者下划线组成的字符串：^\\w+$\n中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$\n可以输入含有^%&',;=?$\\\"等字符：[^%&',;=?$\\x22]+\n禁止输入含有~的字符：[^~\\x22]+\n```\n\n## 3.特殊需求表达式\n\n```javascript\nEmail地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?\nInternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n国内手机号码：^1[34578]{1}\\d{9}\n帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z]\\w{4,15}$\n密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w{5,17}$\n强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n日期格式：^\\d{4}-\\d{1,2}-\\d{1,2}\n一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$\n一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$\n腾讯QQ号：[1-9][0-9]{4,}    (腾讯QQ号从10000开始)\nIP地址：\\d+\\.\\d+\\.\\d+\\.\\d+    (提取IP地址时有用)\nIP地址：^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$\nxml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$\n```\n","tags":["JavaScript","正则"],"categories":["JavaScript"]},{"title":"移动端的触屏事件","url":"/2019/03/22/移动端的触屏事件/","content":"\n# 移动端的触屏事件\n\n## 1.原生触摸事件（touch 类事件）\n\n在移动端，原生触摸事件只有以下三种类型，其他所有的触摸事件都是由这三种事件相结合产生的，例如，上划、下滑、左滑、右滑、双击等等；\n\n   <!-- more -->\n\n这三种原生触摸事件为：\n\n- **touchstart**：开始触摸\n- **touchmove**：触摸过程中\n- **touchend**：触摸结束\n\n另外，还有一个触摸被系统取消的事件：**touchcancel**（由更高级的事件打断当前正在执行的移动端事件时，会触发该事件，我们可以在这个事件中保存当前相关的触碰事件操作的数据，以保证用户回到页面后接着刚才断开的位置继续操作）；\n\n### 触摸事件下的一些相关属性\n\n- **targetTouches：**可获取到事件对象下的触摸点，该属性是一个类数组的结构，同时触发这个事件的手指有几个，则数组中就有几个元素。触摸点的相关坐标数据就存在这些对象中。\n- **pageX\\pageY:**坐标系原点在页面的左上角；\n- **screenX\\screenY:**坐标系的原点在屏幕的左上角点（不包含操作系统在左上角的组件）；\n- **clientX\\clientY:**触摸目标在视口中的坐标，原点在视口左上角(适口视用来展示 html 代码的容器)；\n- **targer:**保存的是触发事件的标签，使用事件委托时可以通过该属性获取到触发该事件的标签对象；\n- **identifier:**ID 值，唯一标示了手指触摸点，如果手指在屏幕上产生移动（如果有多个触摸点，则可以根据这个 id 值跟踪对应的触摸点）；\n\n### event 对象：\n\n由于手机端的手指触发不是单个的，所以在 event 里面生成的与触摸有关的数据都是以数组的形式列出来的，有以下三个：\n\n- touches：表示当前跟踪的触摸操作的 touch 对象的数组。当前屏幕上所有触摸点的集合列表\n- targetTouches：特定于事件目标的 Touch 对象的数组。绑定事件的那个结点上的触摸点的集合列表\n- changedTouches：表示自上次触摸以来发生了什么改变的 Touch 对象的数组。触发事件时改变的触摸点的集合\n\n## 2.触碰事件（tap 类事件）\n\n触碰事件，我目前还不知道它和 touch 的区别，一般用于代替 click 事件\n\n- tap: 手指碰一下屏幕会触发\n- longTap: 手指长按屏幕会触发\n- singleTap: 手指碰一下屏幕会触发\n- doubleTap: 手指双击屏幕会触发\n\n## 3.滑动事件（swipe 类事件）\n\n滑动事件\n\n- swipe：手指在屏幕上滑动时会触发\n- swipeLeft：手指在屏幕上向左滑动时会触发\n- swipeRight：手指在屏幕上向右滑动时会触发\n- swipeUp：手指在屏幕上向上滑动时会触发\n- swipeDown：手指在屏幕上向下滑动时会触发\n\n## 4.**自定义手势事件 gesture**\n\n手势事件只是概念型，目前还没有浏览器原生支持，按照概念可分为 gesturestart gesturechange gestureend 三种事件\n\n- gesturestart：当有两根或多根手指放到屏幕上的时候触发\n- gesturechange：当有两根或多根手指在屏幕上，并且有手指移动的时候触发\n- gestureend：当倒数第二根手指提起的时候触发，结束 gesture\n\n按照定义，当分别将两根手指放到屏幕上的时候，会有如下顺序的事件触发：\n\n1、第一根手指放下，触发 touchstart\n\n2、第二根手指放下，触发 gesturestart\n\n3、触发第二根手指的 touchstart\n\n4、立即触发 gesturechange\n\n5、手指移动，持续触发 gesturechange\n\n6、第二根手指提起，触发 gestureend，以后将不会再触发 gesturechange\n\n7、触发第二根手指的 touchend\n\n8、触发 touchstart（多根手指在屏幕上，提起一根，会刷新一次全局 touch，重新触发第一根手指的 touchstart）\n\n9、提起第一根手指，触发 touchend\n\n## 5.Zepto.js 库可以更好的支持，基于 CSS3\n","tags":["移动端","触屏"],"categories":["移动端"]},{"title":"双向数据绑定Proxy和Object.defineProperty对比","url":"/2019/03/11/双向数据绑定Proxy和Object.defineProperty对比/","content":"\n# 双向数据绑定`Proxy`和`Object.defineProperty`对比\n\n## 数据劫持的优势所在。\n\n对比其他双向绑定的实现方法,数据劫持的优势所在：\n\n1. 无需显示调用: 例如 Vue 运用数据劫持+发布订阅,直接可以通知变化并驱动视图,上面的例子也是比较简单的实现`data.name = '渣渣辉'`后直接触发变更,而比如 Angular 的脏检测则需要显示调用`markForCheck`(可以用 zone.js 避免显示调用,不展开),react 需要显示调用`setState`。\n2. 可精确得知变化数据：还是上面的小例子，我们劫持了属性的 setter,当属性值改变,我们可以精确获知变化的内容`newVal`,因此在这部分不需要额外的 diff 操作,否则我们只知道数据发生了变化而不知道具体哪些数据变化了,这个时候需要大量 diff 来找出变化值,这是额外性能损耗。\n   <!-- more -->\n\n## 基于数据劫持双向绑定的实现思路\n\n**数据劫持**是双向绑定各种方案中比较流行的一种,最著名的实现就是 Vue。\n\n基于数据劫持的双向绑定离不开`Proxy`与`Object.defineProperty`等方法对对象/对象属性的\"劫持\",我们要实现一个完整的双向绑定需要以下几个要点。\n\n1. 利用`Proxy`或`Object.defineProperty`生成的 Observer 针对对象/对象的属性进行\"劫持\",在属性发生变化后通知订阅者\n2. 解析器 Compile 解析模板中的`Directive`(指令)，收集指令所依赖的方法和数据,等待数据变化然后进行渲染\n3. Watcher 属于 Observer 和 Compile 桥梁,它将接收到的 Observer 产生的数据变化,并根据 Compile 提供的指令进行视图渲染,使得数据变化促使视图变化\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy2rxn2jj310q0jugn4.jpg)\n\n- 在 `new Vue()` 后， Vue 会调用`_init` 函数进行初始化，也就是 init 过程，在 这个过程 Data 通过 Observer 转换成了 getter/setter 的形式，来对数据追踪变化，当被设置的对象被读取的时候会执行`getter` 函数，而在当被赋值的时候会执行 `setter`函数。\n- 当 render function 执行的时候，因为会读取所需对象的值，所以会触发`getter`函数从而将 Watcher 添加到依赖中进行依赖收集。\n- 在修改对象的值的时候，会触发对应的`setter`， `setter`通知之前**依赖收集**得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher 就会开始调用 `update` 来更新视图。\n\n## 基于 Object.defineProperty 双向绑定的特点\n\nVue 通过设定对象属性的 setter/getter 方法来监听数据的变化，通过 getter 进行依赖收集，而每个 setter 方法就是一个观察者，在数据变更的时候通知订阅者更新视图。\n\n**在 getter 中收集依赖，在 setter 中触发依赖。**\n\n当外界通过 Watcher 读取数据时，便会触发 getter 从而将 Watcher 添加到依赖中，哪个 Watcher 触发了 getter，就把哪个 Watcher 收集到 Dep 中。当数据发生变化时，会循环依赖列表，把所有的 Watcher 都通知一遍。\n\n### 极简版的双向绑定\n\n`Object.defineProperty`的作用就是劫持一个对象的属性,通常我们对属性的`getter`和`setter`方法进行劫持,在对象的属性发生变化时进行特定的操作。\n\n我们就对对象`obj`的`text`属性进行劫持,在获取此属性的值时打印`'get val'`,在更改属性值的时候对 DOM 进行操作,这就是一个极简的双向绑定。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"text\", {\n  get: function() {\n    console.log(\"get val\");\n  },\n  set: function(newVal) {\n    console.log(\"set val:\" + newVal);\n    document.getElementById(\"input\").value = newVal;\n    document.getElementById(\"span\").innerHTML = newVal;\n  }\n});\n\nconst input = document.getElementById(\"input\");\ninput.addEventListener(\"keyup\", function(e) {\n  obj.text = e.target.value;\n});\n```\n\n### 升级改造\n\n我们很快会发现，这个所谓的*双向绑定*貌似并没有什么乱用。。。\n\n原因如下:\n\n1. 我们只监听了一个属性,一个对象不可能只有一个属性,我们需要对对象每个属性进行监听。\n2. 违反开放封闭原则,我们如果了解[开放封闭原则](https://link.juejin.im?target=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2F%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99)的话,上述代码是明显违反此原则,我们每次修改都需要进入方法内部,这是需要坚决杜绝的。\n3. 代码耦合严重,我们的数据、方法和 DOM 都是耦合在一起的，就是传说中的面条代码。\n\n那么如何解决上述问题？\n\nVue 的操作就是加入了**发布订阅**模式，结合`Object.defineProperty`的劫持能力，实现了可用性很高的双向绑定。\n\n首先，我们以**发布订阅**的角度看我们第一部分写的那一坨代码,会发现它的*监听*、*发布*和*订阅*都是写在一起的,我们首先要做的就是解耦。\n\n我们先实现**一个订阅发布中心，即消息管理员（Dep）,它负责储存订阅者和消息的分发,不管是订阅者还是发布者都需要依赖于它**。\n\n```javascript\nlet uid = 0;\n// 用于储存订阅者并发布消息\nclass Dep {\n  constructor() {\n    // 设置id,用于区分新Watcher和只改变属性值后新产生的Watcher\n    this.id = uid++;\n    // 储存订阅者的数组\n    this.subs = [];\n  }\n  // 触发target上的Watcher中的addDep方法,参数为dep的实例本身\n  depend() {\n    Dep.target.addDep(this);\n  }\n  // 添加订阅者\n  addSub(sub) {\n    this.subs.push(sub);\n  }\n  notify() {\n    // 通知所有的订阅者(Watcher)，触发订阅者的相应逻辑处理\n    this.subs.forEach(sub => sub.update());\n  }\n}\n// 为Dep类设置一个静态属性,默认为null,工作时指向当前的Watcher\nDep.target = null;\n```\n\n现在我们需要实现监听者(Observer),用于监听属性值的变化。\n\n```javascript\n// 监听者,监听对象属性值的变化\nclass Observer {\n  constructor(value) {\n    this.value = value;\n    this.walk(value);\n  }\n  // 遍历属性值并监听\n  walk(value) {\n    Object.keys(value).forEach(key => this.convert(key, value[key]));\n  }\n  // 执行监听的具体方法\n  convert(key, val) {\n    defineReactive(this.value, key, val);\n  }\n}\n\nfunction defineReactive(obj, key, val) {\n  const dep = new Dep();\n  // 给当前属性的值添加监听\n  let chlidOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: () => {\n      // 如果Dep类存在target属性，将其添加到dep实例的subs数组中\n      // target指向一个Watcher实例，每个Watcher都是一个订阅者\n      // Watcher实例在实例化过程中，会读取data中的某个属性，从而触发当前get方法\n      if (Dep.target) {\n        dep.depend();\n      }\n      return val;\n    },\n    set: newVal => {\n      if (val === newVal) return;\n      val = newVal;\n      // 对新值进行监听\n      chlidOb = observe(newVal);\n      // 通知所有订阅者，数值被改变了\n      dep.notify();\n    }\n  });\n}\n\nfunction observe(value) {\n  // 当值不存在，或者不是复杂数据类型时，不再需要继续深入监听\n  if (!value || typeof value !== \"object\") {\n    return;\n  }\n  return new Observer(value);\n}\n```\n\n那么接下来就简单了,我们需要实现一个订阅者(Watcher)。\n\n```javascript\nclass Watcher {\n  constructor(vm, expOrFn, cb) {\n    this.depIds = {}; // hash储存订阅者的id,避免重复的订阅者\n    this.vm = vm; // 被订阅的数据一定来自于当前Vue实例\n    this.cb = cb; // 当数据更新时想要做的事情\n    this.expOrFn = expOrFn; // 被订阅的数据\n    this.val = this.get(); // 维护更新之前的数据\n  }\n  // 对外暴露的接口，用于在订阅的数据被更新时，由订阅者管理员(Dep)调用\n  update() {\n    this.run();\n  }\n  addDep(dep) {\n    // 如果在depIds的hash中没有当前的id,可以判断是新Watcher,因此可以添加到dep的数组中储存\n    // 此判断是避免同id的Watcher被多次储存\n    if (!this.depIds.hasOwnProperty(dep.id)) {\n      dep.addSub(this);\n      this.depIds[dep.id] = dep;\n    }\n  }\n  run() {\n    const val = this.get();\n    console.log(val);\n    if (val !== this.val) {\n      this.val = val;\n      this.cb.call(this.vm, val);\n    }\n  }\n  get() {\n    // 当前订阅者(Watcher)读取被订阅数据的最新更新后的值时，通知订阅者管理员收集当前订阅者\n    Dep.target = this;\n    const val = this.vm._data[this.expOrFn];\n    // 置空，用于下一个Watcher使用\n    Dep.target = null;\n    return val;\n  }\n}\n```\n\n那么我们最后完成 Vue,将上述方法挂载在 Vue 上。\n\n```javascript\nclass Vue {\n    constructor(options = {}) {\n      // 简化了$options的处理\n      this.$options = options;\n      // 简化了对data的处理\n      let data = (this._data = this.$options.data);\n      // 将所有data最外层属性代理到Vue实例上\n      Object.keys(data).forEach(key => this._proxy(key));\n      // 监听数据\n      observe(data);\n    }\n    // 对外暴露调用订阅者的接口，内部主要在指令中使用订阅者\n    $watch(expOrFn, cb) {\n      new Watcher(this, expOrFn, cb);\n    }\n    _proxy(key) {\n      Object.defineProperty(this, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => this._data[key],\n        set: val => {\n          this._data[key] = val;\n        },\n      });\n    }\n  }\n]\n```\n\n至此,一个简单的双向绑定算是被我们实现了。\n\n### Object.defineProperty 的缺陷\n\n- `Object.defineProperty`的第一个缺陷,无法监听数组变化。[Vue 的文档](https://link.juejin.im/?target=https%3A%2F%2Fcn.vuejs.org%2Fv2%2Fguide%2Flist.html%23%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B)提到了 Vue 是可以检测到数组变化的，但是只有以下八种方法,`vm.items[indexOfItem] = newValue`这种是无法检测的。`push()`、`pop()`、`shift()`、`unshift()`、`splice()`、`sort()`、`reverse()`\n\n- `Object.defineProperty`的第二个缺陷,只能劫持对象的属性,因此我们需要对每个对象的每个属性进行遍历，如果属性值也是对象那么需要深度遍历,显然能劫持一个完整的对象是更好的选择。\n\n  `Object.keys(value).forEach(key => **this**.convert(key, value[key]));`\n\n- **无法检测到对象属性的添加或删除**(如`data.location.a=1`)。\n\n  这是因为 Vue 通过`Object.defineProperty`来将对象的 key 转换成`getter/setter`的形式来追踪变化，但`getter/setter`只能追踪一个数据是否被修改，无法追踪新增属性和删除属性。如果是删除属性，我们可以用`vm.$delete`实现，那如果是新增属性，该怎么办呢？\n  1）可以使用 `Vue.set(location, a, 1)` 方法向嵌套对象添加响应式属性;\n  2）也可以给这个对象重新赋值，比如`data.location = {...data.location,a:1}`\n\n## Proxy 实现的双向绑定的特点\n\nProxy 在 ES2015 规范中被正式发布,它在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写,我们可以这样认为,Proxy 是`Object.defineProperty`的全方位加强版\n\n### Proxy 可以直接监听对象而非属性\n\n我们还是以上文中用`Object.defineProperty`实现的极简版双向绑定为例,用 Proxy 进行改写。\n\n```javascript\nconst input = document.getElementById(\"input\");\nconst p = document.getElementById(\"p\");\nconst obj = {};\n\nconst newObj = new Proxy(obj, {\n  get: function(target, key, receiver) {\n    console.log(`getting ${key}!`);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(target, key, value, receiver);\n    if (key === \"text\") {\n      input.value = value;\n      p.innerHTML = value;\n    }\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\ninput.addEventListener(\"keyup\", function(e) {\n  newObj.text = e.target.value;\n});\n```\n\n我们可以看到,Proxy 直接可以劫持整个对象,并返回一个新对象,不管是操作便利程度还是底层功能上都远强于`Object.defineProperty`。\n\n### Proxy 可以直接监听数组的变化\n\n当我们对数组进行操作(push、shift、splice 等)时，会触发对应的方法名称和*length*的变化，我们可以借此进行操作,以上文中`Object.defineProperty`无法生效的列表渲染为例。\n\n```javascript\nconst list = document.getElementById(\"list\");\nconst btn = document.getElementById(\"btn\");\n\n// 渲染列表\nconst Render = {\n  // 初始化\n  init: function(arr) {\n    const fragment = document.createDocumentFragment();\n    for (let i = 0; i < arr.length; i++) {\n      const li = document.createElement(\"li\");\n      li.textContent = arr[i];\n      fragment.appendChild(li);\n    }\n    list.appendChild(fragment);\n  },\n  // 我们只考虑了增加的情况,仅作为示例\n  change: function(val) {\n    const li = document.createElement(\"li\");\n    li.textContent = val;\n    list.appendChild(li);\n  }\n};\n\n// 初始数组\nconst arr = [1, 2, 3, 4];\n\n// 监听数组\nconst newArr = new Proxy(arr, {\n  get: function(target, key, receiver) {\n    console.log(key);\n    return Reflect.get(target, key, receiver);\n  },\n  set: function(target, key, value, receiver) {\n    console.log(target, key, value, receiver);\n    if (key !== \"length\") {\n      Render.change(value);\n    }\n    return Reflect.set(target, key, value, receiver);\n  }\n});\n\n// 初始化\nwindow.onload = function() {\n  Render.init(arr);\n};\n\n// push数字\nbtn.addEventListener(\"click\", function() {\n  newArr.push(6);\n});\n```\n\n很显然,Proxy 不需要那么多 hack（即使 hack 也无法完美实现监听）就可以无压力监听数组的变化,我们都知道,标准永远优先于 hack。\n\n### Proxy 的其他优势\n\nProxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是`Object.defineProperty`不具备的。\n\nProxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而`Object.defineProperty`只能遍历对象属性直接修改。\n\nProxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利。\n\n当然,Proxy 的劣势就是兼容性问题,而且无法用 polyfill 磨平,因此 Vue 的作者才声明需要等到下个大版本(3.0)才能用 Proxy 重写。\n\n### 基础 proxy 的双向数据绑定的实现\n\n#### 发布订阅中心(Dep)\n\n`Dep`保存订阅者,并在 Observer 发生变化时通知保存在 Dep 中的订阅者,让订阅者得知变化并更新视图,这样才能保证视图与状态的同步。\n\n```javascript\n/**\n * [subs description] 订阅器,储存订阅者,通知订阅者\n * @type {Map}\n */\nexport default class Dep {\n  constructor() {\n    // 我们用 hash 储存订阅者\n    this.subs = new Map();\n  }\n  // 添加订阅者\n  addSub(key, sub) {\n    // 取出键为 key 的订阅者\n    const currentSub = this.subs.get(key);\n    // 如果能取出说明有相同的 key 的订阅者已经存在,直接添加\n    if (currentSub) {\n      currentSub.add(sub);\n    } else {\n      // 用 Set 数据结构储存,保证唯一值\n      this.subs.set(key, new Set([sub]));\n    }\n  }\n  // 通知\n  notify(key) {\n    // 触发键为 key 的订阅者们\n    if (this.subs.get(key)) {\n      this.subs.get(key).forEach(sub => {\n        sub.update();\n      });\n    }\n  }\n}\n```\n\n#### 监听者的实现(Observer)\n\n我们在订阅器 `Dep` 中实现了一个`notify`方法来通知相应的订阅这们,然而`notify`方法到底什么时候被触发呢?\n\n当然是当状态发生变化时,即 MVVM 中的 Modal 变化时触发通知,然而`Dep` 显然无法得知 Modal 是否发生了变化,因此我们需要创建一个监听者`Observer`来监听 Modal, 当 Modal 发生变化的时候我们就执行通知操作。\n\n与`Object.defineProperty`监听属性不同, Proxy 可以监听(实际是代理)整个对象,因此就不需要遍历对象的属性依次监听了,但是如果对象的属性依然是个对象,那么 Proxy 也无法监听,所以我们实现了一个`observify`进行递归监听即可。\n\n```javascript\n/**\n * [Observer description] 监听器,监听对象,触发后通知订阅\n * @param {[type]}   obj [description] 需要被监听的对象\n */\nconst Observer = obj => {\n  const dep = new Dep();\n  return new Proxy(obj, {\n    get: function(target, key, receiver) {\n      // 如果订阅者存在，直接添加订阅\n      if (Dep.target) {\n        dep.addSub(key, Dep.target);\n      }\n      return Reflect.get(target, key, receiver);\n    },\n    set: function(target, key, value, receiver) {\n      // 如果对象值没有变,那么不触发下面的操作直接返回\n      if (Reflect.get(receiver, key) === value) {\n        return;\n      }\n      const res = Reflect.set(target, key, observify(value), receiver);\n      // 当值被触发更改的时候,触发 Dep 的通知方法\n      dep.notify(key);\n      return res;\n    }\n  });\n};\n\n/**\n * 将对象转为监听对象\n * @param {*} obj 要监听的对象\n */\nexport default function observify(obj) {\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  // 深度监听\n  Object.keys(obj).forEach(key => {\n    obj[key] = observify(obj[key]);\n  });\n\n  return Observer(obj);\n}\n```\n\n#### 订阅者的实现(watcher)\n\n我们目前已经解决了两个问题,一个是如何得知 Modal 发生了改变(利用监听者 Observer 监听 Modal 对象),一个是如何收集订阅者并通知其变化(利用订阅器收集订阅者,并用 notify 通知订阅者)。\n\n我们目前还差一个订阅者（Watcher）\n\n```javascript\n// 订阅者\nexport default class Watcher {\n  constructor(vm, exp, cb) {\n    this.vm = vm; // vm 是 vue 的实例\n    this.exp = exp; // 被订阅的数据\n    this.cb = cb; // 触发更新后的回调\n    this.value = this.get(); // 获取老数据\n  }\n  get() {\n    const exp = this.exp;\n    let value;\n    Dep.target = this;\n    if (typeof exp === \"function\") {\n      value = exp.call(this.vm);\n    } else if (typeof exp === \"string\") {\n      value = this.vm[exp];\n    }\n    Dep.target = null;\n    return value;\n  }\n  // 将订阅者放入待更新队列等待批量更新\n  update() {\n    pushQueue(this);\n  }\n  // 触发真正的更新操作\n  run() {\n    const val = this.get(); // 获取新数据\n    this.cb.call(this.vm, val, this.value);\n    this.value = val;\n  }\n}\n```\n\n#### 批量更新的实现\n\n我们在上一节中实现了订阅者( Watcher),但是其中的`update`方法是将订阅者放入了一个待更新的队列中,而不是直接触发,原因如下:\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy4crpf3j31260l6qbp.jpg)\n\n因此这个队列需要做的是**异步**且**去重**,因此我们用 `Set`作为数据结构储存 Watcher 来去重,同时用`Promise`模拟异步更新。\n\n```javascript\n// 创建异步更新队列\nlet queue = new Set();\n\n// 用Promise模拟nextTick\nfunction nextTick(cb) {\n  Promise.resolve().then(cb);\n}\n\n// 执行刷新队列\nfunction flushQueue(args) {\n  queue.forEach(watcher => {\n    watcher.run();\n  });\n  // 清空\n  queue = new Set();\n}\n\n// 添加到队列\nexport default function pushQueue(watcher) {\n  queue.add(watcher);\n  // 下一个循环调用\n  nextTick(flushQueue);\n}\n```\n","tags":["VUE"],"categories":["VUE"]},{"title":"九种实现跨域的方式","url":"/2019/03/07/九种实现跨域的方式/","content":"\n# 基本概念\n\n同源策略是约定，它是浏览器最核心也最基本的安全功能。\n同源：\"协议+域名+端口\"\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j62z4nj1j30o805s0ta.jpg)\n\n同源策略限制内容有：\n\n1. Cookie、LocalStorage、IndexedDB 等存储性内容\n2. DOM 节点\n3. AJAX 请求发送后，结果被浏览器拦截了\n\n<!-- more -->\n\n有三个标签是允许跨域加载资源：\n\n```html\n <img src=XXX>\n <link href=XXX>\n <script src=XXX>\n```\n\n# 跨域解决方案：\n\n## JSONP\n\n### JSONP 原理\n\n利用 script 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP 请求一定需要对方的服务器做支持才可以。\n\n### JSONP 优缺点\n\nJSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是仅支持 get 方法具有局限性,不安全可能会遭受 XSS 攻击。\n\n### JSONP 的实现流程\n\n1. 声明一个回调函数，其函数名(如 show)当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据(服务器返回的 data)。\n2. 创建一个 script 标签，把那个跨域的 API 数据接口地址，赋值给 script 的 src,还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。\n3. 服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是 show，它准备好的数据是 show('我不爱你')。\n4. 最后服务器把准备的数据通过 HTTP 协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。\n\n```javascript\n// index.html\nfunction jsonp({ url, params, callback }) {\n  return new Promise((resolve, reject) => {\n    let script = document.createElement(\"script\");\n    window[callback] = function(data) {\n      resolve(data);\n      document.body.removeChild(script);\n    };\n    params = { ...params, callback }; // wd=b&callback=show\n    let arrs = [];\n    for (let key in params) {\n      arrs.push(`${key}=${params[key]}`);\n    }\n    script.src = `${url}?${arrs.join(\"&\")}`;\n    document.body.appendChild(script);\n  });\n}\njsonp({\n  url: \"http://localhost:3000/say\",\n  params: { wd: \"Iloveyou\" },\n  callback: \"show\"\n}).then(data => {\n  console.log(data);\n});\n```\n\n上面这段代码相当于向http://localhost:3000/say?wd=Iloveyou&callback=show 这个地址请求数据，然后后台返回 show('我不爱你')，最后会运行 show()这个函数，打印出'我不爱你'\n\n```javascript\n// server.js\nlet express = require(\"express\");\nlet app = express();\napp.get(\"/say\", function(req, res) {\n  let { wd, callback } = req.query;\n  console.log(wd); // Iloveyou\n  console.log(callback); // show\n  res.end(`${callback}('我不爱你')`);\n});\napp.listen(3000);\n```\n\n## cors\n\nCORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。\n浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。\n\n服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。\n\n### 简单请求\n\n使用方法为 GET、HEAD、POST 之一\nContent-Type 的值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一\n同时满足这两大条件，为简单请求\n\n### 复杂请求\n\n复杂请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为\"预检\"请求,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。\n\n```javascript\n// index.html\nlet xhr = new XMLHttpRequest();\ndocument.cookie = \"name=xiamen\"; // cookie不能跨域\nxhr.withCredentials = true; // 前端设置是否带cookie\nxhr.open(\"PUT\", \"http://localhost:4000/getData\", true);\nxhr.setRequestHeader(\"name\", \"xiamen\");\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4) {\n    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {\n      console.log(xhr.response);\n      //得到响应头，后台需设置Access-Control-Expose-Headers\n      console.log(xhr.getResponseHeader(\"name\"));\n    }\n  }\n};\nxhr.send();\n```\n\n```javascript\n//server1.js\nlet express = require(\"express\");\nlet app = express();\napp.use(express.static(__dirname));\napp.listen(3000);\n```\n\n```javascript\n//server2.js\nlet express = require(\"express\");\nlet app = express();\nlet whitList = [\"http://localhost:3000\"]; //设置白名单\napp.use(function(req, res, next) {\n  let origin = req.headers.origin;\n  if (whitList.includes(origin)) {\n    // 设置哪个源可以访问我\n    res.setHeader(\"Access-Control-Allow-Origin\", origin);\n    // 允许携带哪个头访问我\n    res.setHeader(\"Access-Control-Allow-Headers\", \"name\");\n    // 允许哪个方法访问我\n    res.setHeader(\"Access-Control-Allow-Methods\", \"PUT\");\n    // 允许携带cookie\n    res.setHeader(\"Access-Control-Allow-Credentials\", true);\n    // 预检的存活时间\n    res.setHeader(\"Access-Control-Max-Age\", 6);\n    // 允许返回的头\n    res.setHeader(\"Access-Control-Expose-Headers\", \"name\");\n    if (req.method === \"OPTIONS\") {\n      res.end(); // OPTIONS请求不做任何处理\n    }\n  }\n  next();\n});\napp.put(\"/getData\", function(req, res) {\n  console.log(req.headers);\n  res.setHeader(\"name\", \"jw\"); //返回一个响应头，后台需设置\n  res.end(\"我不爱你\");\n});\napp.get(\"/getData\", function(req, res) {\n  console.log(req.headers);\n  res.end(\"我不爱你\");\n});\napp.use(express.static(__dirname));\napp.listen(4000);\n```\n\n## postMessage\n\n是为数不多可以跨域操作的 window 属性，可用于解决以下方面的问题：\n\n1. 页面和其打开的新窗口的数据传递\n2. 多窗口之间消息传递\n3. 页面与嵌套的 iframe 消息传递\n4. 上面三个场景的跨域数据传递\n   postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。\n\n```javascript\notherWindow.postMessage(message, targetOrigin, [transfer]);\n```\n\n例子：\n\n```html\n// a.html\n<iframe\n  src=\"http://localhost:4000/b.html\"\n  frameborder=\"0\"\n  id=\"frame\"\n  onload=\"load()\"\n></iframe>\n//等它加载完触发一个事件 //内嵌在http://localhost:3000/a.html\n<script>\n  function load() {\n    let frame = document.getElementById(\"frame\");\n    frame.contentWindow.postMessage(\"我爱你\", \"http://localhost:4000\"); //发送数据\n    window.onmessage = function(e) {\n      //接受返回数据\n      console.log(e.data); //我不爱你\n    };\n  }\n</script>\n```\n\n```javascript\n// b.html\nwindow.onmessage = function(e) {\n  console.log(e.data); //我爱你\n  e.source.postMessage(\"我不爱你\", e.origin);\n};\n```\n\n## websocket\n\nWebsocket 是 HTML5 的 WebSocket 和 HTTP 都是应用层协议，都基于 TCP 协议。但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。\n\n```html\n// socket.html\n<script>\n  let socket = new WebSocket(\"ws://localhost:3000\");\n  socket.onopen = function() {\n    socket.send(\"我爱你\"); //向服务器发送数据\n  };\n  socket.onmessage = function(e) {\n    console.log(e.data); //接收服务器返回的数据\n  };\n</script>\n```\n\n```javascript\n// server.js\nlet express = require(\"express\");\nlet app = express();\nlet WebSocket = require(\"ws\"); //记得安装ws\nlet wss = new WebSocket.Server({ port: 3000 });\nwss.on(\"connection\", function(ws) {\n  ws.on(\"message\", function(data) {\n    console.log(data);\n    ws.send(\"我不爱你\");\n  });\n});\n```\n\n## Node 中间件代理(两次跨域)\n\n实现原理：同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。\n\n代理服务器，需要做以下几个步骤：\n\n1. 接受客户端请求 。\n2. 将请求 转发给服务器。\n3. 拿到服务器 响应 数据。\n4. 将 响应 转发给客户端。\n\n本地文件 index.html 文件，通过代理服务器http://localhost:3000向目标服务器http://localhost:4000请求数据：\n\n```html\n// index.html(http://127.0.0.1:5500)\n<script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n<script>\n  $.ajax({\n    url: \"http://localhost:3000\",\n    type: \"post\",\n    data: { name: \"xiamen\", password: \"123456\" },\n    contentType: \"application/json;charset=utf-8\",\n    success: function(result) {\n      console.log(result); // {\"title\":\"fontend\",\"password\":\"123456\"}\n    },\n    error: function(msg) {\n      console.log(msg);\n    }\n  });\n</script>\n```\n\n```javascript\n// server1.js 代理服务器(http://localhost:3000)\nconst http = require(\"http\");\n// 第一步：接受客户端请求\nconst server = http.createServer((request, response) => {\n  // 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段\n  response.writeHead(200, {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Methods\": \"*\",\n    \"Access-Control-Allow-Headers\": \"Content-Type\"\n  });\n  // 第二步：将请求转发给服务器\n  const proxyRequest = http\n    .request(\n      {\n        host: \"127.0.0.1\",\n        port: 4000,\n        url: \"/\",\n        method: request.method,\n        headers: request.headers\n      },\n      serverResponse => {\n        // 第三步：收到服务器的响应\n        var body = \"\";\n        serverResponse.on(\"data\", chunk => {\n          body += chunk;\n        });\n        serverResponse.on(\"end\", () => {\n          console.log(\"The data is \" + body);\n          // 第四步：将响应结果转发给浏览器\n          response.end(body);\n        });\n      }\n    )\n    .end();\n});\nserver.listen(3000, () => {\n  console.log(\"The proxyServer is running at http://localhost:3000\");\n});\n```\n\n```javascript\n// server2.js(http://localhost:4000)\nconst http = require(\"http\");\nconst data = { title: \"fontend\", password: \"123456\" };\nconst server = http.createServer((request, response) => {\n  if (request.url === \"/\") {\n    response.end(JSON.stringify(data));\n  }\n});\nserver.listen(4000, () => {\n  console.log(\"The server is running at http://localhost:4000\");\n});\n```\n\n## nginx 反向代理\n\n实现原理类似于 Node 中间件代理，需要你搭建一个中转 nginx 服务器，用于转发请求。\n\n使用 nginx 反向代理实现跨域，是最简单的跨域方式。只需要修改 nginx 的配置即可解决跨域问题，支持所有浏览器，支持 session，不需要修改任何代码，并且不会影响服务器性能。\n\n实现思路：通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。\n\n先下载 nginx，然后将 nginx 目录下的 nginx.conf 修改，最后通过命令行 nginx -s reload 启动 nginx\n\n## window.name + iframe\n\nwindow.name 属性的独特之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。\n其中 a.html 和 b.html 是同域的，都是http://localhost:3000;而c.html是http://localhost:4000\n\n```html\n// a.html(http://localhost:3000/b.html)\n<iframe\n  src=\"http://localhost:4000/c.html\"\n  frameborder=\"0\"\n  onload=\"load()\"\n  id=\"iframe\"\n></iframe>\n<script>\n  let first = true;\n  // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name\n  function load() {\n    if (first) {\n      // 第1次onload(跨域页)成功后，切换到同域代理页面\n      let iframe = document.getElementById(\"iframe\");\n      iframe.src = \"http://localhost:3000/b.html\";\n      first = false;\n    } else {\n      // 第2次onload(同域b.html页)成功后，读取同域window.name中数据\n      console.log(iframe.contentWindow.name);\n    }\n  }\n</script>\n```\n\nb.html 为中间代理页，与 a.html 同域，内容为空。\n\n```html\n// c.html(http://localhost:4000/c.html)\n<script>\n  window.name = \"我不爱你\";\n</script>\n```\n\n通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。\n\n## location.hash + iframe\n\n实现原理： a.html 欲与 c.html 跨域相互通信，通过中间页 b.html 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。\n\n具体实现步骤：一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。\n\n```html\n// a.html\n<iframe src=\"http://localhost:4000/c.html#iloveyou\"></iframe>\n<script>\n  window.onhashchange = function() {\n    //检测hash的变化\n    console.log(location.hash);\n  };\n</script>\n```\n\n```html\n// b.html\n<script>\n  window.parent.parent.location.hash = location.hash;\n  //b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面\n</script>\n```\n\n```javascript\n// c.html\nconsole.log(location.hash);\nlet iframe = document.createElement(\"iframe\");\niframe.src = \"http://localhost:3000/b.html#idontloveyou\";\ndocument.body.appendChild(iframe);\n```\n\n## document.domain + iframe\n\n该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。\n只需要给页面添加 document.domain ='test.com' 表示二级域名都相同就可以实现跨域。\n实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域。\n\n```html\n// a.zf1.cn:3000/a.html\n<body>\n  helloa\n  <iframe\n    src=\"http://b.zf1.cn:3000/b.html\"\n    frameborder=\"0\"\n    onload=\"load()\"\n    id=\"frame\"\n  ></iframe>\n  <script>\n    document.domain = \"zf1.cn\";\n    function load() {\n      console.log(frame.contentWindow.a);\n    }\n  </script>\n</body>\n```\n\n```html\n// b.zf1.cn:3000/b.html\n<body>\n  hellob\n  <script>\n    document.domain = \"zf1.cn\";\n    var a = 100;\n  </script>\n</body>\n```\n","tags":["JavaScript","浏览器","跨域"],"categories":["JavaScript"]},{"title":"树的diff算法（vue 2.0）","url":"/2019/02/26/树的diff算法（vue 2.0）/","content":"\n# 树的 diff 算法（vue 2.0）\n\n## 模板转换成视图的过程\n\n- Vue.js 通过编译将 template 模板转换成渲染函数(render ) ，执行渲染函数就可以得到一个虚拟节点树\n- 在对 Model 进行操作的时候，会触发对应 Dep 中的 Watcher 对象。Watcher 对象会调用对应的 update 来修改视图。这个过程主要是将新旧虚拟节点进行差异对比，然后根据对比结果进行 DOM 操作来更新视图。\n\n简单点讲，在 Vue 的底层实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合 Vue 自带的响应系统，在状态改变时，Vue 能够智能地计算出重新渲染组件的最小代价并应到 DOM 操作上。\n\n<!-- more -->\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixrpspcuj30qd07hdge.jpg)\n\n- **渲染函数**：渲染函数是用来生成 Virtual DOM 的。Vue 推荐使用模板来构建我们的应用界面，在底层实现中 Vue 会将模板编译成渲染函数，当然我们也可以不写模板，直接写渲染函数，以获得更好的控制。\n- **VNode 虚拟节点**：它可以代表一个真实的 dom 节点。通过 createElement 方法能将 VNode 渲染成 dom 节点。简单地说，vnode 可以理解成**节点描述对象**，它描述了应该怎样去创建真实的 DOM 节点。\n- **patch(也叫做 patching 算法)**：虚拟 DOM 最核心的部分，它可以将 vnode 渲染成真实的 DOM，这个过程是对比新旧虚拟节点之间有哪些不同，然后根据对比结果找出需要更新的的节点进行更新。这点我们从单词含义就可以看出， patch 本身就有补丁、修补的意思，其实际作用是在现有 DOM 上进行修改来实现更新视图的目的。Vue 的 Virtual DOM Patching 算法是基于[Snabbdom](https://github.com/snabbdom/snabbdom)的实现，并在些基础上作了很多的调整和改进。\n\n## Virtual DOM 是什么？\n\nVirtual DOM 其实就是一棵以 JavaScript 对象( VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。\n\n简单来说，可以把 Virtual DOM 理解为一个简单的 JS 对象，并且最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。不同的框架对这三个属性的命名会有点差别。\n\n对于虚拟 DOM，咱们来看一个简单的实例，就是下图所示的这个，详细的阐述了`模板 → 渲染函数 → 虚拟DOM树 → 真实DOM`的一个过程\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixs748iqj30yg06emxd.jpg)\n\n## Virtual DOM 作用是什么？\n\n**虚拟 DOM 的最终目标是将虚拟节点渲染到视图上**。但是如果直接使用虚拟节点覆盖旧节点的话，会有很多不必要的 DOM 操作。例如，一个 ul 标签下很多个 li 标签，其中只有一个 li 有变化，这种情况下如果使用新的 ul 去替代旧的 ul,因为这些不必要的 DOM 操作而造成了性能上的浪费。\n\n为了避免不必要的 DOM 操作，虚拟 DOM 在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的旧虚拟节点（oldVnode）做对比，找出真正需要更新的节点来进行 DOM 操作，从而避免操作其他无需改动的 DOM。\n\n其实虚拟 DOM 在 Vue.js 主要做了两件事：\n\n- 提供与真实 DOM 节点所对应的虚拟节点 vnode\n- 将虚拟节点 vnode 和旧虚拟节点 oldVnode 进行对比，然后更新视图\n\n## 为何需要 Virtual DOM？\n\n- 具备跨平台的优势\n\n由于 Virtual DOM 是以 JavaScript 对象为基础而不依赖真实平台环境，所以使它具有了跨平台的能力，比如说浏览器平台、Weex、Node 等。\n\n- 操作 DOM 慢，js 运行效率高。我们可以将 DOM 对比操作放在 JS 层，提高效率。\n\n因为 DOM 操作的执行速度远不如 Javascript 的运算速度快，因此，把大量的 DOM 操作搬运到 Javascript 中，运用 patching 算法来计算出真正需要更新的节点，最大限度地减少 DOM 操作，从而显著提高性能。\n\nVirtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）\n\n- 提升渲染性能\n\nVirtual DOM 的优势不在于单次的操作，而是在大量、频繁的数据更新下，能够对视图进行合理、高效的更新。\n\n为了实现高效的 DOM 操作，一套高效的虚拟 DOM diff 算法显得很有必要。**我们通过 patch 的核心----diff 算法，找出本次 DOM 需要更新的节点来更新，其他的不更新**。\n\n## VNode\n\n### 抽象 Dom 树\n\n把真实 Dom 树抽象成一棵以 javascript 对象构成的抽象树，在修改抽象树数据后将抽象树转化成真实 Dom 重绘到页面上呢？于是虚拟 Dom 出现了，它是真实 Dom 的一层抽象，用属性描述真实 Dom 的各个特性。当它发生变化的时候，就会去修改视图。\n\n但是这样的 javascript 操作 Dom 进行重绘整个视图层是相当消耗性能的，我们是不是可以每次只更新它的修改呢？所以 Vue.js 将 Dom 抽象成一个以 javascript 对象为节点的虚拟 Dom 树，以 VNode 节点模拟真实 Dom，可以对这颗抽象树进行创建节点、删除节点以及修改节点等操作，在这过程中都不需要操作真实 Dom，只需要操作 javascript 对象，大大提升了性能。修改以后经过 diff 算法得出一些需要修改的最小单位，再将这些小单位的视图进行更新。这样做减少了很多不需要的 Dom 操作，大大提高了性能。\n\nVue 就使用了这样的抽象节点 VNode，它是对真实 Dom 的一层抽象，而不依赖某个平台，它可以是浏览器平台，也可以是 weex，甚至是 node 平台也可以对这样一棵抽象 Dom 树进行创建删除修改等操作，这也为前后端同构提供了可能。\n\n### VNode 基类\n\n先来看一下 Vue.js 源码中对 VNode 类的定义。\n\n```javascript\nexport default class VNode {\n  tag: string | void;\n  data: VNodeData | void;\n  children: ?Array<VNode>;\n  text: string | void;\n  elm: Node | void;\n  ns: string | void;\n  context: Component | void; // rendered in this component's scope\n  functionalContext: Component | void; // only for functional component root nodes\n  key: string | number | void;\n  componentOptions: VNodeComponentOptions | void;\n  componentInstance: Component | void; // component instance\n  parent: VNode | void; // component placeholder node\n  raw: boolean; // contains raw HTML? (server only)\n  isStatic: boolean; // hoisted static node\n  isRootInsert: boolean; // necessary for enter transition check\n  isComment: boolean; // empty comment placeholder?\n  isCloned: boolean; // is a cloned node?\n  isOnce: boolean; // is a v-once node?\n\n  constructor(\n    tag?: string,\n    data?: VNodeData,\n    children?: ?Array<VNode>,\n    text?: string,\n    elm?: Node,\n    context?: Component,\n    componentOptions?: VNodeComponentOptions\n  ) {\n    /*当前节点的标签名*/\n    this.tag = tag;\n    /*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/\n    this.data = data;\n    /*当前节点的子节点，是一个数组*/\n    this.children = children;\n    /*当前节点的文本*/\n    this.text = text;\n    /*当前虚拟节点对应的真实dom节点*/\n    this.elm = elm;\n    /*当前节点的名字空间*/\n    this.ns = undefined;\n    /*编译作用域*/\n    this.context = context;\n    /*函数化组件作用域*/\n    this.functionalContext = undefined;\n    /*节点的key属性，被当作节点的标志，用以优化*/\n    this.key = data && data.key;\n    /*组件的option选项*/\n    this.componentOptions = componentOptions;\n    /*当前节点对应的组件的实例*/\n    this.componentInstance = undefined;\n    /*当前节点的父节点*/\n    this.parent = undefined;\n    /*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/\n    this.raw = false;\n    /*静态节点标志*/\n    this.isStatic = false;\n    /*是否作为跟节点插入*/\n    this.isRootInsert = true;\n    /*是否为注释节点*/\n    this.isComment = false;\n    /*是否为克隆节点*/\n    this.isCloned = false;\n    /*是否有v-once指令*/\n    this.isOnce = false;\n  }\n\n  // DEPRECATED: alias for componentInstance for backwards compat.\n  /* istanbul ignore next https://github.com/answershuto/learnVue*/\n  get child(): Component | void {\n    return this.componentInstance;\n  }\n}\n```\n\n这是一个最基础的 VNode 节点，作为其他派生 VNode 类的基类，里面定义了下面这些数据。\n\n- tag: 当前节点的标签名\n- data: 当前节点对应的对象，包含了具体的一些数据信息，是一个 VNodeData 类型，可以参考 VNodeData 类型中的数据信息\n- children: 当前节点的子节点，是一个数组\n- text: 当前节点的文本\n- elm: 当前虚拟节点对应的真实 dom 节点\n- ns: 当前节点的名字空间\n- context: 当前节点的编译作用域\n- functionalContext: 函数化组件作用域\n- key: 节点的 key 属性，被当作节点的标志，用以优化\n- componentOptions: 组件的 option 选项\n- componentInstance: 当前节点对应的组件的实例\n- parent: 当前节点的父节点\n- raw: 简而言之就是是否为原生 HTML 或只是普通文本，innerHTML 的时候为 true，textContent 的时候为 false\n- isStatic: 是否为静态节点\n- isRootInsert: 是否作为跟节点插入\n- isComment: 是否为注释节点\n- isCloned: 是否为克隆节点\n- isOnce: 是否有 v-once 指令\n\n打个比方，比如说我现在有这么一个 VNode 树\n\n```json\n{\n    tag: 'div'\n    data: {\n        class: 'test'\n    },\n    children: [\n        {\n            tag: 'span',\n            data: {\n                class: 'demo'\n            }\n            text: 'hello,VNode'\n        }\n    ]\n}\n```\n\n渲染之后的结果就是这样的\n\n```html\n<div class=\"test\">\n  <span class=\"demo\">hello,VNode</span>\n</div>\n```\n\n### 生成一个新的 VNode 的方法\n\n下面这些方法都是一些常用的构造 VNode 的方法。\n\n- **createEmptyVNode 创建一个空 VNode 节点**\n\n```javascript\n/*创建一个空VNode节点*/\nexport const createEmptyVNode = () => {\n  const node = new VNode();\n  node.text = \"\";\n  node.isComment = true;\n  return node;\n};\n```\n\n- **createTextVNode 创建一个文本节点**\n\n```javascript\n/*创建一个文本节点*/\nexport function createTextVNode(val: string | number) {\n  return new VNode(undefined, undefined, undefined, String(val));\n}\n```\n\n- **createComponent 创建一个组件节点**\n\n```javascript\n // plain options object: turn it into a constructor https://github.com/answershuto/learnVue\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor)\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  /*Github:https://github.com/answershuto*/\n  /*如果在该阶段Ctor依然不是一个构造函数或者是一个异步组件工厂则直接返回*/\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(`Invalid Component definition: ${String(Ctor)}`, context)\n    }\n    return\n  }\n\n  // async component\n  /*处理异步组件*/\n  if (isUndef(Ctor.cid)) {\n    Ctor = resolveAsyncComponent(Ctor, baseCtor, context)\n    if (Ctor === undefined) {\n      // return nothing if this is indeed an async component\n      // wait for the callback to trigger parent update.\n      /*如果这是一个异步组件则会不会返回任何东西（undifiened），直接return掉，等待回调函数去触发父组件更新。s*/\n      return\n    }\n  }\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor)\n\n  data = data || {}\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data)\n  }\n\n  // extract props\n  const propsData = extractPropsFromVNodeData(data, Ctor, tag)\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  const listeners = data.on\n  // replace with listeners with .native modifier\n  data.on = data.nativeOn\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners\n    data = {}\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data)\n\n  // return a placeholder vnode\n  const name = Ctor.options.name || tag\n  const vnode = new VNode(\n    `vue-component-${Ctor.cid}${name ? `-${name}` : ''}`,\n    data, undefined, undefined, undefined, context,\n    { Ctor, propsData, listeners, tag, children }\n  )\n  return vnode\n}\n```\n\n- **cloneVNode 克隆一个 VNode 节点**\n\n```javascript\nexport function cloneVNode(vnode: VNode): VNode {\n  const cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isCloned = true;\n  return cloned;\n}\n```\n\n### createElement\n\ncreateElement 用来创建一个虚拟节点。当 data 上已经绑定**ob**的时候，代表该对象已经被 Oberver 过了，所以创建一个空节点。tag 不存在的时候同样创建一个空节点。当 tag 不是一个 String 类型的时候代表 tag 是一个组件的构造类，直接用 new VNode 创建。当 tag 是 String 类型的时候，如果是保留标签，则用 new VNode 创建一个 VNode 实例，如果在 vm 的 option 的 components 找得到该 tag，代表这是一个组件，否则统一用 new VNode 创建。\n\n```javascript\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nexport function createElement(\n  context: Component,\n  tag: any,\n  data: any,\n  children: any,\n  normalizationType: any,\n  alwaysNormalize: boolean\n): VNode {\n  /*兼容不传data的情况*/\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  /*如果alwaysNormalize为true，则normalizationType标记为ALWAYS_NORMALIZE*/\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  /*Github:https://github.com/answershuto*/\n  /*创建虚拟节点*/\n  return _createElement(context, tag, data, children, normalizationType);\n}\n\n/*创建虚拟节点*/\nexport function _createElement(\n  context: Component,\n  tag?: string | Class<Component> | Function | Object,\n  data?: VNodeData,\n  children?: any,\n  normalizationType?: number\n): VNode {\n  /*\n    如果data未定义（undefined或者null）或者是data的__ob__已经定义（代表已经被observed，上面绑定了Oberver对象），\n    https://cn.vuejs.org/v2/guide/render-function.html#约束\n    那么创建一个空节点\n  */\n  if (isDef(data) && isDef((data: any).__ob__)) {\n    process.env.NODE_ENV !== \"production\" &&\n      warn(\n        `Avoid using observed data object as vnode data: ${JSON.stringify(\n          data\n        )}\\n` + \"Always create fresh vnode data objects in each render!\",\n        context\n      );\n    return createEmptyVNode();\n  }\n  /*如果tag不存在也是创建一个空节点*/\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode();\n  }\n  // support single function children as default scoped slot\n  /*默认默认作用域插槽*/\n  if (Array.isArray(children) && typeof children[0] === \"function\") {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  let vnode, ns;\n  if (typeof tag === \"string\") {\n    let Ctor;\n    /*获取tag的名字空间*/\n    ns = config.getTagNamespace(tag);\n    /*判断是否是保留的标签*/\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      /*如果是保留的标签则创建一个相应节点*/\n      vnode = new VNode(\n        config.parsePlatformTagName(tag),\n        data,\n        children,\n        undefined,\n        undefined,\n        context\n      );\n    } else if (\n      isDef((Ctor = resolveAsset(context.$options, \"components\", tag)))\n    ) {\n      // component\n      /*从vm实例的option的components中寻找该tag，存在则就是一个组件，创建相应节点，Ctor为组件的构造类*/\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      /*未知的元素，在运行时检查，因为父组件可能在序列化子组件的时候分配一个名字空间*/\n      vnode = new VNode(tag, data, children, undefined, undefined, context);\n    }\n  } else {\n    // direct component options / constructor\n    /*tag不是字符串的时候则是组件的构造类*/\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    /*如果有名字空间，则递归所有子节点应用该名字空间*/\n    if (ns) applyNS(vnode, ns);\n    return vnode;\n  } else {\n    /*如果vnode没有成功创建则创建空节点*/\n    return createEmptyVNode();\n  }\n}\n```\n\n## diff 概解\n\n### 1.当数据发生变化时，vue 是怎么更新节点的？\n\n周所周知，Vue 通过数据绑定来修改视图，当某个数据被修改的时候，set 方法会让闭包中的 Dep 调用 notify 通知所有订阅者 Watcher，Watcher 通过 get 方法执行 vm.\\_update(vm.\\_render(), hydrating)。\n\n这里看一下\\_update 方法\n\n```javascript\nVue.prototype._update = function (vnode: VNode, hydrating?: boolean) {\n    const vm: Component = this\n    /*如果已经该组件已经挂载过了则代表进入这个步骤是个更新的过程，触发beforeUpdate钩子*/\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate')\n    }\n    const prevEl = vm.$el\n    const prevVnode = vm._vnode\n    const prevActiveInstance = activeInstance\n    activeInstance = vm\n    vm._vnode = vnode\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    /*基于后端渲染Vue.prototype.__patch__被用来作为一个入口*/\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      )\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode)\n    }\n    activeInstance = prevActiveInstance\n    // update __vue__ reference\n    /*更新新的实例对象的__vue__*/\n    if (prevEl) {\n      prevEl.__vue__ = null\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  }复制代码\n```\n\n\\_update 方法的第一个参数是一个 VNode 对象，在内部会将该 VNode 对象与之前旧的 VNode 对象进行**patch**。\n\n要知道渲染真实 DOM 的开销是很大的，比如有时候我们修改了某个数据，如果直接渲染到真实 dom 上会引起整个 dom 树的重绘和重排，有没有可能我们只更新我们修改的那一小块 dom 而不要更新整个 dom 呢？diff 算法能够帮助我们。\n\n我们先根据真实 DOM 生成一颗`virtual DOM`，当`virtual DOM`某个节点的数据改变后会生成一个新的`Vnode`，然后`Vnode`和`oldVnode`作对比，发现有不一样的地方就直接修改在真实的 DOM 上，然后使`oldVnode`的值为`Vnode`。\n\ndiff 的过程就是调用名为`patch`的函数，比较新旧节点，一边比较一边给**真实的 DOM**打补丁。\n\n### 2. virtual DOM 和真实 DOM 的区别？\n\n虚拟 dom 对应的是真实 dom， 使用`document.CreateElement` 和 `document.CreateTextNode`创建的就是真实节点。\n\nvirtual DOM 是将真实的 DOM 的数据抽取出来，以对象的形式模拟树形结构。比如 dom 是这样的：\n\n```html\n<div>\n  <p>123</p>\n</div>\n```\n\n对应的 virtual DOM（伪代码）：\n\n```javascript\nvar Vnode = {\n  tag: \"div\",\n  children: [{ tag: \"p\", text: \"123\" }]\n};\n```\n\n**（温馨提示：`VNode`和`oldVNode`都是对象，一定要记住）**\n\n**virtual dom 很多时候都不是最优的操作，但它具有普适性，在效率、可维护性之间达平衡。**\n\n### 3. diff 的比较方式？\n\n在采取 diff 算法比较新旧节点的时候，比较只会在同层级进行, 不会跨层级比较。\n\n```javascript\n<div>\n    <p>123</p>\n</div>\n\n<div>\n    <span>456</span>\n</div>\n```\n\n上面的代码会分别比较同一层的两个 div 以及第二层的 p 和 span，但是不会拿 div 和 span 作比较。在别处看到的一张很形象的图：\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixvc151vj30ah05j3yl.jpg)\n\n## diff 流程图\n\n当数据发生改变时，set 方法会让调用`Dep.notify`通知所有订阅者 Watcher，订阅者就会调用`patch`给真实的 DOM 打补丁，更新相应的视图。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy0rlxm3j310c0syq4w.jpg)\n\ndiff 算法包括几个步骤：\n\n- 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中\n- 当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异\n- 把所记录的差异应用到所构建的真正的 DOM 树上，视图就更新了\n\n## diff 算法具体分析\n\n### 1. patch\n\n来看看`patch`是怎么打补丁的（代码只保留核心部分）\n\n```javascript\nfunction patch(oldVnode, vnode) {\n  // some code\n  if (sameVnode(oldVnode, vnode)) {\n    patchVnode(oldVnode, vnode);\n  } else {\n    const oEl = oldVnode.el; // 当前oldVnode对应的真实元素节点\n    let parentEle = api.parentNode(oEl); // 父元素\n    createEle(vnode); // 根据Vnode生成新元素\n    if (parentEle !== null) {\n      api.insertBefore(parentEle, vnode.el, api.nextSibling(oEl)); // 将新元素添加进父元素\n      api.removeChild(parentEle, oldVnode.el); // 移除以前的旧元素节点\n      oldVnode = null;\n    }\n  }\n  // some code\n  return vnode;\n}\n复制代码;\n```\n\npatch 函数接收两个参数`oldVnode`和`Vnode`分别代表新的节点和之前的旧节点\n\n- 判断两节点是否值得比较，值得比较则执行`patchVnode`\n\n```javascript\nfunction sameVnode(a, b) {\n  return (\n    a.key === b.key && // key值\n    a.tag === b.tag && // 标签名\n    a.isComment === b.isComment && // 是否为注释节点\n    // 是否都定义了data，data包含一些具体信息，例如onclick , style\n    isDef(a.data) === isDef(b.data) &&\n    sameInputType(a, b) // 当标签是<input>的时候，type必须相同\n  );\n}\n复制代码;\n```\n\n- 不值得比较则用`Vnode`替换`oldVnode`\n\n如果两个节点都是一样的，那么就深入检查他们的子节点。如果两个节点不一样那就说明`Vnode`完全被改变了，就可以直接替换`oldVnode`。\n\n虽然这两个节点不一样但是他们的子节点一样怎么办？别忘了，diff 可是逐层比较的，如果第一层不一样那么就不会继续深入比较第二层了。（我在想这算是一个缺点吗？相同子节点不能重复利用了...）\n\n### 2. patchVnode\n\n当我们确定两个节点值得比较之后我们会对两个节点指定`patchVnode`方法。那么这个方法做了什么呢？\n\n```javascript\npatchVnode (oldVnode, vnode) {\n    const el = vnode.el = oldVnode.el\n    let i, oldCh = oldVnode.children, ch = vnode.children\n    if (oldVnode === vnode) return\n    if (oldVnode.text !== null && vnode.text !== null && oldVnode.text !== vnode.text) {\n        api.setTextContent(el, vnode.text)\n    }else {\n        updateEle(el, vnode, oldVnode)\n    \tif (oldCh && ch && oldCh !== ch) {\n            updateChildren(el, oldCh, ch)\n    \t}else if (ch){\n            createEle(vnode) //create el's children dom\n    \t}else if (oldCh){\n            api.removeChildren(el)\n    \t}\n    }\n}\n复制代码\n```\n\n这个函数做了以下事情：\n\n- 找到对应的真实 dom，称为`el`\n- 判断`Vnode`和`oldVnode`是否指向同一个对象，如果是，那么直接`return`\n- 如果他们都有文本节点并且不相等，那么将`el`的文本节点设置为`Vnode`的文本节点。\n- 如果`oldVnode`有子节点而`Vnode`没有，则删除`el`的子节点\n- 如果`oldVnode`没有子节点而`Vnode`有，则将`Vnode`的子节点真实化之后添加到`el`\n- 如果两者都有子节点，则执行`updateChildren`函数比较子节点，这一步很重要\n\n其他几个点都很好理解，我们详细来讲一下 updateChildren\n\n### 3. updateChildren\n\n代码量很大，不方便一行一行的讲解，所以下面结合一些示例图来描述一下。\n\n```javascript\nupdateChildren (parentElm, oldCh, newCh) {\n    let oldStartIdx = 0, newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx\n    let idxInOld\n    let elmToMove\n    let before\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {   // 对于vnode.key的比较，会把oldVnode = null\n            oldStartVnode = oldCh[++oldStartIdx]\n        }else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx]\n        }else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx]\n        }else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx]\n        }else if (sameVnode(oldStartVnode, newStartVnode)) {\n            patchVnode(oldStartVnode, newStartVnode)\n            oldStartVnode = oldCh[++oldStartIdx]\n            newStartVnode = newCh[++newStartIdx]\n        }else if (sameVnode(oldEndVnode, newEndVnode)) {\n            patchVnode(oldEndVnode, newEndVnode)\n            oldEndVnode = oldCh[--oldEndIdx]\n            newEndVnode = newCh[--newEndIdx]\n        }else if (sameVnode(oldStartVnode, newEndVnode)) {\n            patchVnode(oldStartVnode, newEndVnode)\n            api.insertBefore(parentElm, oldStartVnode.el, api.nextSibling(oldEndVnode.el))\n            oldStartVnode = oldCh[++oldStartIdx]\n            newEndVnode = newCh[--newEndIdx]\n        }else if (sameVnode(oldEndVnode, newStartVnode)) {\n            patchVnode(oldEndVnode, newStartVnode)\n            api.insertBefore(parentElm, oldEndVnode.el, oldStartVnode.el)\n            oldEndVnode = oldCh[--oldEndIdx]\n            newStartVnode = newCh[++newStartIdx]\n        }else {\n           // 使用key时的比较\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx) // 有key生成index表\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.key]\n            if (!idxInOld) {\n                api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                newStartVnode = newCh[++newStartIdx]\n            }\n            else {\n                elmToMove = oldCh[idxInOld]\n                if (elmToMove.sel !== newStartVnode.sel) {\n                    api.insertBefore(parentElm, createEle(newStartVnode).el, oldStartVnode.el)\n                }else {\n                    patchVnode(elmToMove, newStartVnode)\n                    oldCh[idxInOld] = null\n                    api.insertBefore(parentElm, elmToMove.el, oldStartVnode.el)\n                }\n                newStartVnode = newCh[++newStartIdx]\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].el\n        addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx)\n    }else if (newStartIdx > newEndIdx) {\n        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx)\n    }\n}\n复制代码\n```\n\n先说一下这个函数做了什么\n\n- 将`Vnode`的子节点`Vch`和`oldVnode`的子节点`oldCh`提取出来\n- `oldCh`和`vCh`各有两个头尾的变量`StartIdx`和`EndIdx`，它们的 2 个变量相互比较，一共有 4 种比较方式。如果 4 种比较都没匹配，如果设置了`key`，就会用`key`进行比较，在比较的过程中，变量会往中间靠，一旦`StartIdx>EndIdx`表明`oldCh`和`vCh`至少有一个已经遍历完了，就会结束比较。\n\n#### 图解 updateChildren\n\n终于来到了这一部分，上面的总结相信很多人也看得一脸懵逼，下面我们好好说道说道。\n\n粉红色的部分为 oldCh、黄色的部分为 vCh\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy0sb71dj311i0ccmyf.jpg)\n\n我们将它们取出来并分别用 s 和 e 指针指向它们的头 child 和尾 child\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy0tc3qkj31100h8gnl.jpg)\n\n现在分别对`oldS、oldE、S、E`两两做`sameVnode`比较，有四种比较方式，当其中两个能匹配上那么真实 dom 中的相应节点会移到 Vnode 相应的位置，这句话有点绕，打个比方\n\n- 如果是 oldS 和 E 匹配上了，那么真实 dom 中的第一个节点会移到最后\n- 如果是 oldE 和 S 匹配上了，那么真实 dom 中的最后一个节点会移到最前，匹配上的两个指针向中间移动\n- 如果四种匹配没有一对是成功的，分为两种情况\n  - 如果新旧子节点都存在 key，那么会根据`oldChild`的 key 生成一张 hash 表，用`S`的 key 与 hash 表做匹配，匹配成功就判断`S`和匹配节点是否为`sameNode`，如果是，就在真实 dom 中将成功的节点移到最前面，否则，将`S`生成对应的节点插入到 dom 中对应的`oldS`位置，`oldS`和`S`指针向中间移动。\n  - 如果没有 key,则直接将`S`生成新的节点插入`真实DOM`（ps：这下可以解释为什么 v-for 的时候需要设置 key 了，如果没有 key 那么就只会做四种匹配，就算指针中间有可复用的节点都不能被复用了）\n\n再配个图（假设下图中的所有节点都是有 key 的，且 key 为自身的值）\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy0ulelpj311u0oy41x.jpg)\n\n- 第一步\n\n```json\noldS = a, oldE = d；\nS = a, E = b;\n```\n\n`oldS`和`S`匹配，则将 dom 中的 a 节点放到第一个，已经是第一个了就不管了，此时 dom 的位置为：a b d\n\n- 第二步\n\n```json\noldS = b, oldE = d；\nS = c, E = b;\n```\n\n`oldS`和`E`匹配，就将原本的 b 节点移动到最后，因为`E`是最后一个节点，他们位置要一致，这就是上面说的：**当其中两个能匹配上那么真实 dom 中的相应节点会移到 Vnode 相应的位置**，此时 dom 的位置为：a d b\n\n- 第三步\n\n```json\noldS = d, oldE = d；\nS = c, E = d;\n\n```\n\n`oldE`和`E`匹配，位置不变此时 dom 的位置为：a d b\n\n- 第四步\n\n```json\noldS++;\noldE--;\noldS > oldE;\n\n```\n\n遍历结束，说明`oldCh`先遍历完。就将剩余的`vCh`节点根据自己的的 index 插入到真实 dom 中去，此时 dom 位置为：a c d b\n\n一次模拟完成。\n\n这个匹配过程的结束有两个条件：\n\n- `oldS > oldE`表示`oldCh`先遍历完，那么就将多余的`vCh`根据 index 添加到 dom 中去（如上图）\n- `S > E`表示 vCh 先遍历完，那么就在真实 dom 中将区间为`[oldS, oldE]`的多余节点删掉\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy0vmjjqj311m0ik75k.jpg)\n\n下面再举一个例子，可以像上面那样自己试着模拟一下\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6iy0wmkh1j31180kmq5k.jpg)\n\n当这些节点`sameVnode`成功后就会紧接着执行`patchVnode`了，可以看一下上面的代码\n\n```javascript\nif (sameVnode(oldStartVnode, newStartVnode)) {\n  patchVnode(oldStartVnode, newStartVnode);\n}\n```\n\n就这样层层递归下去，直到将 oldVnode 和 Vnode 中的所有子节点比对完。也将 dom 的所有补丁都打好啦。那么现在再回过去看 updateChildren 的代码会不会容易很多呢？\n\n### 4. 操作 dom\n\n这里我们只是将虚拟 DOM 映射成了真实的 DOM。那如何给这些 DOM 加入 attr、class、style 等 DOM 属性呢？\n\n这要依赖于虚拟 DOM 的生命钩子。虚拟 DOM 提供了如下的钩子函数，分别在不同的时期会进行调用。\n\n```javascript\nconst hooks = [\"create\", \"activate\", \"update\", \"remove\", \"destroy\"];\n\n/*构建cbs回调函数，web平台上见/platforms/web/runtime/modules*/\nfor (i = 0; i < hooks.length; ++i) {\n  cbs[hooks[i]] = [];\n  for (j = 0; j < modules.length; ++j) {\n    if (isDef(modules[j][hooks[i]])) {\n      cbs[hooks[i]].push(modules[j][hooks[i]]);\n    }\n  }\n}\n```\n\n同理，也会根据不同平台有自己不同的实现，我们这里以 Web 平台为例。Web 平台的钩子函数见[/platforms/web/runtime/modules](https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fanswershuto%2FlearnVue%2Ftree%2Fmaster%2Fvue-src%2Fplatforms%2Fweb%2Fruntime%2Fmodules)。里面有对 attr、class、props、events、style 以及 transition（过渡状态）的 DOM 属性进行操作。\n\n以 attr 为例，代码很简单。\n\n```javascript\n/* @flow */\n\nimport { isIE9 } from \"core/util/env\";\n\nimport { extend, isDef, isUndef } from \"shared/util\";\n\nimport {\n  isXlink,\n  xlinkNS,\n  getXlinkProp,\n  isBooleanAttr,\n  isEnumeratedAttr,\n  isFalsyAttrValue\n} from \"web/util/index\";\n\n/*更新attr*/\nfunction updateAttrs(oldVnode: VNodeWithData, vnode: VNodeWithData) {\n  /*如果旧的以及新的VNode节点均没有attr属性，则直接返回*/\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return;\n  }\n  let key, cur, old;\n  /*VNode节点对应的Dom实例*/\n  const elm = vnode.elm;\n  /*旧VNode节点的attr*/\n  const oldAttrs = oldVnode.data.attrs || {};\n  /*新VNode节点的attr*/\n  let attrs: any = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  /*如果新的VNode的attr已经有__ob__（代表已经被Observe处理过了）， 进行深拷贝*/\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  /*遍历attr，不一致则替换*/\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, \"value\", attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\n/*设置attr*/\nfunction setAttr(el: Element, key: string, value: any) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, key);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(\n      key,\n      isFalsyAttrValue(value) || value === \"false\" ? \"false\" : \"true\"\n    );\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nexport default {\n  create: updateAttrs,\n  update: updateAttrs\n};\n```\n\nattr 只需要在 create 以及 update 钩子被调用时更新 DOM 的 attr 属性即可。\n","tags":["VUE"],"categories":["VUE"]},{"title":"leetcode算法刷题笔记（三）——排序","url":"/2019/02/22/leetcode算法刷题笔记（三）——排序/","content":"\n_该笔记只为个人所写算法，不一定是最优解法，仅供参考_\n\n# [56] Merge Intervals\n\nGiven a collection of intervals, merge all overlapping intervals.\n难度：Medium (34.95%)\n思路：\n\n1. 首先按 start 升序或按 end 升序排列\n2. 如果前一项的 end 大于后一项的 start，说明要 merge\n3. 因为已经做了升序排列，所以要 push 进结果的那一项的 start 一定为前一项的 start，而 end 为两项中 end 较大的那个值。\n\n<!-- more -->\n\n```javascript\nvar merge = function(intervals) {\n  var res = [];\n  if (intervals.length == 0) {\n    return res;\n  }\n  intervals.sort(function(a, b) {\n    return a.start !== b.start ? a.start - b.start : a.end - b.end;\n  });\n  var pre = intervals[0];\n  res.push(pre);\n  for (var cur of intervals) {\n    if (pre.end >= cur.start) {\n      if (cur.end > pre.end) {\n        pre.end = cur.end;\n      }\n    } else {\n      res.push(cur);\n      pre = cur;\n    }\n  }\n  return res;\n};\n```\n\n# [75] Sort Colors\n\nGiven an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\nNote: You are not suppose to use the library's sort function for this problem.\n难度：Medium (41.44%)\n思路：遇到 0 放在最前面，遇到 2 放在最后面，1 不动\n\n1. i 从 0 开始，如果 nums[i]等于 1，则 i++。\n2. 如果 nums[i]等于 0，则把 nums[i]放到最前面\n3. 如果 nums[i]等于 2，则把 nums[i]放到最后面\n\n```javascript\nvar sortColors = function(nums) {\n  if (nums.length == 0) {\n    return -1;\n  }\n  var i = 0;\n  var m = 0;\n  var n = nums.length - 1;\n  var temp;\n  while (i <= n) {\n    if (nums[i] == 1) {\n      i++;\n    } else if (nums[i] == 0) {\n      temp = nums[m];\n      nums[m] = nums[i];\n      nums[i] = temp;\n      m++;\n      i++;\n    } else {\n      temp = nums[n];\n      nums[n] = nums[i];\n      nums[i] = temp;\n      n--;\n    }\n  }\n  return nums;\n};\n```\n\n# [147] Insertion Sort List\n\nSort a linked list using insertion sort.\nA graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list.\nAlgorithm of Insertion Sort:\nInsertion sort iterates, consuming one input element each repetition, and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain.\n难度：Medium (36.50%)\n思路：新开辟一个空链表，作为以排序区域，每次拿出 head 来，与以排序区域的链表的 val 进行比较，找到插入位置，插入。则未排序区域的了链表长度减一。\n\n```javascript\nvar insertionSortList = function(head) {\n  var current = { val: -Number.MAX_VALUE, next: null };\n  while (head) {\n    var prev = current;\n    while (prev.next && prev.next.val < head.val) {\n      prev = prev.next;\n    }\n    var next = head.next;\n    head.next = prev.next;\n    prev.next = head;\n\n    head = next;\n  }\n  return current.next;\n};\n```\n\n# [148] Sort List\n\nSort a linked list in O(n log n) time using constant space complexity.\n难度：Medium (34.12%)\n思路：归并排序的链表实现\n\n```javascript\nvar sortList = function(head) {\n  if (head == null || head.next == null) {\n    return head;\n  }\n  var fast = head;\n  var slow = head;\n  var pre = null;\n  while (fast && fast.next != null) {\n    pre = slow;\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  pre.next = null;\n  return merge(sortList(head), sortList(slow));\n};\n\nfunction merge(left, right) {\n  var result = {};\n  var pre = result;\n  while (left && right) {\n    if (left.val < right.val) {\n      pre.next = left;\n      pre = pre.next;\n      left = left.next;\n    } else {\n      pre.next = right;\n      pre = pre.next;\n      right = right.next;\n    }\n  }\n  while (left) {\n    pre.next = left;\n    pre = pre.next;\n    left = left.next;\n  }\n  while (right) {\n    pre.next = right;\n    pre = pre.next;\n    right = right.next;\n  }\n  return result.next;\n}\n```\n\n# [179] Largest Number\n\nGiven a list of non negative integers, arrange them such that they form the largest number.\n难度：Medium (25.32%)\n\n```javascript\nvar largestNumber = function(nums) {\n  nums.sort(function(a, b) {\n    var ab = a.toString() + b.toString();\n    var ba = b.toString() + a.toString();\n    return ba - ab;\n  });\n  var result = nums.join(\"\");\n  if (parseInt(result) == 0) {\n    return \"0\";\n  } else {\n    return result;\n  }\n};\n```\n\n# [242] Valid Anagram\n\nGiven two strings s and t , write a function to determine if t is an anagram of s.\nNote: You may assume the string contains only lowercase alphabets.\n难度：Easy (51.12%)\n\n```javascript\nvar isAnagram = function(s, t) {\n  if (s.length != = t.length) {\n    return false;\n  }\n  var res = new Array(26);\n  res.fill(0);\n  for (var i = 0; i < s.length; i++) {\n    res[s.codePointAt(i) - 97]++;\n    res[t.codePointAt(i) - 97]--;\n  }\n  for (var i = 0; i < res.length; i++) {\n    if (res[i] !== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n```\n\n# [274] H-Index\n\nGiven an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: \"A scientist has index h if h of his/her N papers have at least h citations each, and the other N − h papers have no more than h citations each.\"\n难度：Medium (34.43%)\n思路：一个人在其所有学术文章中有 N 篇论文分别被引用了至少 N 次，他的 H 指数就是 N。根据这个规则，首先讲数组倒序排列，判断数组中的第 i 个，是否大于等于 i+1，如果成立，则代表，至少有 i+1 篇文章，被引用了 i+1 次，则他的 h-index 就是 i+1.\n\n```javascript\nvar hIndex = function(citations) {\n  if (citations.length == 0) {\n    return 0;\n  }\n  citations.sort((a, b) => b - a);\n  var res = citations.length;\n  for (var i = citations.length - 1; i >= 0; i--) {\n    if (citations[i] >= res) {\n      return res;\n    }\n    res--;\n  }\n  if (res == 0) {\n    return 0;\n  }\n};\n```\n\n# [324] Wiggle Sort II\n\nGiven an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\n难度：Medium (27.54%)\n思路：将数组正序排序之后，从中间分为两个数组，每次从小数组里拿一个数，从大数组里拿一个数，组成的 新数组就是一个数大一个数小的状态。\n\n```javascript\nvar wiggleSort = function(nums) {\n  if (nums.length <= 1) {\n    return nums;\n  }\n  nums = nums.sort((a, b) => a - b);\n  var mid = Math.floor((nums.length + 1) / 2);\n  var small = nums.slice(0, mid);\n  var big = nums.slice(mid);\n  if (big.length > small.length) {\n    return [];\n  }\n  var i = 0;\n  var j = small.length - 1;\n  var k = big.length - 1;\n  while (i < nums.length && j >= 0 && k >= 0) {\n    nums[i] = small[j];\n    nums[i + 1] = big[k];\n    i = i + 2;\n    j--;\n    k--;\n  }\n  while (i < nums.length && j >= 0) {\n    nums[i] = small[j];\n    i++;\n    j--;\n  }\n  return nums;\n};\n```\n","tags":["JavaScript","算法","LeetCode","排序"],"categories":["算法"]},{"title":"前端路由","url":"/2019/01/28/前端路由/","content":"\n# 前端路由\n\n## 1.什么是前端路由\n\n对于用户来说，路由就是浏览器地址栏中的 url 与所见网页的对应关系。而对于 web 开发人员来说，路由更像是 url 与处理函数的对应关系。\n\n传统的服务端路由，根据客户端请求的不同网址，返回不同的网页内容，这种情况一是会造成服务器压力增加，二是每次都重新请求，响应较慢、用户体验下降。于是，单页应用（spa,single page application）应运而生。在 url 地址改变的过程中，通过 js 来实现不同 UI 之间的切换（js 对 DOM 的操作），而不再向服务器重新请求页面，只通过 ajax 向服务端请求数据，对用户来说这种无刷新的、即时响应是更好的体验。其中，根据 url 地址栏的变化而展示不同的 UI，就是通过前端路由来实现的。目前主流的支持单页应用的前端框架，基本都有配套的或第三方的路由系统。\n\n<!-- more -->\n\n## 2.前端路由的实现方式\n\n在 HTML5 的 history API 出现之前，前端路由主要是通过 hash 来实现的，hash 能兼容低版本的浏览器。下面分别来介绍这 2 种方式。\n\n- ### 方法一：基于 hash（location.hash+hashchange 事件）\n\n我们知道 location.hash 的值是 url 中`#`后面的内容，如`http://www.163.com#netease`此网址中，location.hash='#netease'。\n\n#### hash 满足以下几个特性，才使得其可以实现前端路由：\n\n1. url 中 hash 值的变化并不会重新加载页面，因为 hash 是**用来指导浏览器行为的**，对服务端是无用的，所以不会包括在 http 请求中。\n2. hash 值的改变，都会在浏览器的访问历史中增加一个记录，也就是能通过浏览器的回退、前进按钮控制 hash 的切换\n3. 我们可以通过 hashchange 事件，监听到 hash 值的变化，从而响应不同路径的逻辑处理。\n\n```javascript\nwindow.addEventListener(\"hashchange\", funcRef, false);\n```\n\n如此一来，我们就可以在 hashchange 事件里，根据 hash 值来更新对应的视图，但不会去重新请求页面，同时呢，也在 history 里增加了一条访问记录，用户也仍然可以通过前进后退键实现 UI 的切换。\n\n#### **触发 hash 值的变化有 2 种方法:**\n\n一种是通过 a 标签，设置 href 属性，当标签点击之后，地址栏会改变，同时会触发 hashchange 事件\n\n```html\n<a href=\"#kaola\">to KAOLA</a>\n```\n\n另一种是通过 js 直接赋值给 location.hash，也会改变 url，触发 hashchange 事件。\n\n```javascript\nlocation.hash = \"#kaola\";\n```\n\n#### 下面展示一个通过 hash 实现的简易 Router：\n\n```javascript\nfunction Router() {\n  this.routes = {};\n  this.currentUrl = \"\";\n}\nRouter.prototype.route = function(path, callback) {\n  this.routes[path] = callback || function() {};\n};\nRouter.prototype.refresh = function() {\n  this.currentUrl = location.hash.slice(1) || \"/\";\n  this.routes[this.currentUrl]();\n};\nRouter.prototype.init = function() {\n  window.addEventListener(\"load\", this.refresh.bind(this), false);\n  window.addEventListener(\"hashchange\", this.refresh.bind(this), false);\n};\nwindow.Router = new Router();\nwindow.Router.init();\n// 添加路由规则\nRouter.route(\"/\", function() {\n  // 设置响应内容\n});\nRouter.route(\"/blue\", function() {\n  // 设置响应内容\n});\n```\n\n#### 【route vs router】\n\nroute 是一条路由，是将一个 URL 路径和一个处理函数相关联，是一条 url 和函数的映射规则，如上面代码中通过原型上的 route 可以设置一条路由规则，将一个 path 和其 callback 关联起来。\n\n而 router 则更像是一个容器，或者说一种机制，它管理了一组 route。简单来说，route 只是进行了 URL 和函数的映射，而在当接收到一个 URL 之后，去路由映射表中查找相应的函数，这个过程是由 router 来处理的，如上面代码，Router 管理传入的 route，并且在 hash 改变的时候，根据当前的 url 响应其对应的函数。\n\n- ### 方法二：基于 History 新 API（history.pushState()+popState 事件）\n\nHTML5 中 history 对象上新的 API，同样能实现前端的路由。通过 pushState()方法或 replaceState()方法可以修改 url 的地址，并在 popstate 事件中能监听地址的改变，不同的是，手动的进行 pushState()并不会触发 popstate 事件。\n\n#### 两个新增的 API：history.pushState 和 history.replaceState\n\n这两个 API 都接收三个参数：\n\n```javascript\nwindow.history.pushState(null, null, \"http://www.163.com\");\n```\n\n- 状态对象（state object），一个 JavaScript 对象，与用 pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，会触发 popstate 事件，并能在事件中使用该对象。\n- 标题（title） ：传入一个短标题给当前 state。现在大多数浏览器不支持或者会忽略此参数，最好传入 null 代替；\n- 地址（URL）：新的历史记录条目的地址。浏览器不会在调用 pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的 URL 不一定是绝对路径；如果是相对路径，它将以当前 URL 为基准；传入的 URL 与当前 URL 应该是**同源**的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前 URL。\n\n这两个 API 的相同之处是都会操作浏览器的历史记录，而不会引起页面的刷新。不同之处在于，pushState 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。这两个 api，加上 state 改变触发的 popstate 事件，提供了单页应该的另一种路由方式。\n\n#### 下面展示一个使用这种方式的简单 demo：\n\n```html\n<p id=\"menu\">\n  <a href=\"/profile\" title=\"profile\">profile</a>\n  <a href=\"/account\" title=\"account\">account</a>?\n</p>\n<div class=\"main\" id=\"main\"></div>\n<script>\n  (function() {\n    var menubox = document.getElementById(\"menu\");\n    var mainbox = document.getElementById(\"main\");\n\n    menubox.addEventListener(\"click\", function(e) {\n      e.preventDefault();\n      var elm = e.target;\n      var uri = elm.href;\n      var tlt = elm.title;\n      history.pushState({ path: uri, title: tlt }, null, uri);\n      mainbox.innerHTML = \"current page is \" + tlt;\n    });\n    window.addEventListener(\"popstate\", function(e) {\n      var state = e.state;\n      console.log(state);\n      mainbox.innerHTML = \"current page is \" + state.title; // 还原UI\n    });\n  })();\n</script>\n```\n\n当我们在历史记录中切换时就会触发 popstate 事件，可以在事件中还原当前 state 对应的 UI。对于触发 popstate 事件的方式，各浏览器实现也有差异，我们可以根据不同浏览器做兼容处理。\n\n- ### 两种方式对比（History&&hash）\n\n两种方式对比，基于 Hash 的路由，兼容性更好；基于 History API 的路由，则更正式，可以设置与当前 URL 同源的任意 URL，路径更直观。另外，基于 Hash 的路由不需要对服务器做改动，基于 History API 的路由需要对服务器做一些改造，配置不同的路由都返回相同的页面。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixnv47e0j31320kwq3v.jpg)\n\n1. 当直接访问http://example.com/的时候，两者的行为是一致的，都是返回了index.html文件。当从http://example.com/跳转到http://example.com/#/foobar或者http://example.com/foobar的时候，也都是正常的，因为此时已经加载了页面以及脚本文件，所以路由跳转正常。\n2. 当直接访问http://example.com/#/foobar的时候，实际上向服务器发起的请求是http://example.com/，因此会首先加载页面及脚本文件，接下来脚本执行路由跳转，一切正常。\n3. 当直接访问http://example.com/foobar的时候，实际上向服务器发起的请求也是http://example.com/foobar，然而服务器端只能匹配/而无法匹配/foobar，因此会出现404错误。\n\n因此如果使用了基于 History API 的路由，需要改造服务器端，使得访问/foobar 的时候也能返回 index.html 文件，这样当浏览器加载了页面及脚本之后，就能进行路由跳转了。\n\n# Vue Router\n\nvue-router 基本的路由配置如下：\n\n```javascript\nimport Router from 'vue-router'\nimport Index from 'pages/index'\nimport Error from 'pages/error'\n\nVue.use(Router)\n\nexport default new Router({\n mode: 'history', // 设置路由方式\n routes: [\n   {\n     path: '/',\n     name: 'index',\n     component: Index\n   },\n   {\n     path: '*',\n     name: '404',\n     component: Error\n   }\n ]\n})\n\n// 在组件中使用router视图组件\n<router-view></router-view>\n```\n\n可以通过 vue-router 实例来配置路由规则列表，指定路径 path 与组件 component 的对应关系。\n\n## 1.模式参数\n\n在 vue-router 中是通过 mode 这一参数控制路由的实现模式的：\n\n```javascript\nconst router = new VueRouter({\n  mode: 'history',\n  routes: [...]\n})\n```\n\n创建 VueRouter 的实例对象时，mode 以构造函数参数的形式传入。从 VueRouter 类的定义入手。一般插件对外暴露的类都是定义在源码 src 根目录下的 index.js 文件中，打开该文件，可以看到 VueRouter 类的定义，摘录与 mode 参数有关的部分如下：\n\n```javascript\nexport default class VueRouter {\n  mode: string; // 传入的字符串参数，指示history类别\n  history: HashHistory | HTML5History | AbstractHistory; // 实际起作用的对象属性，必须是以上三个类的枚举\n  fallback: boolean; // 如浏览器不支持，'history'模式需回滚为'hash'模式\n\n  constructor(options: RouterOptions = {}) {\n    let mode = options.mode || \"hash\"; // 默认为'hash'模式\n    this.fallback = mode === \"history\" && !supportsPushState; // 通过supportsPushState判断浏览器是否支持'history'模式\n    if (this.fallback) {\n      mode = \"hash\";\n    }\n    if (!inBrowser) {\n      mode = \"abstract\"; // 不在浏览器环境下运行需强制为'abstract'模式\n    }\n    this.mode = mode;\n\n    // 根据mode确定history实际的类并实例化\n    switch (mode) {\n      case \"history\":\n        this.history = new HTML5History(this, options.base);\n        break;\n      case \"hash\":\n        this.history = new HashHistory(this, options.base, this.fallback);\n        break;\n      case \"abstract\":\n        this.history = new AbstractHistory(this, options.base);\n        break;\n      default:\n        if (process.env.NODE_ENV !== \"production\") {\n          assert(false, `invalid mode: ${mode}`);\n        }\n    }\n  }\n\n  init(app: any /* Vue component instance */) {\n    const history = this.history;\n\n    // 根据history的类别执行相应的初始化操作和监听\n    if (history instanceof HTML5History) {\n      history.transitionTo(history.getCurrentLocation());\n    } else if (history instanceof HashHistory) {\n      const setupHashListener = () => {\n        history.setupListeners();\n      };\n      history.transitionTo(\n        history.getCurrentLocation(),\n        setupHashListener,\n        setupHashListener\n      );\n    }\n\n    history.listen(route => {\n      this.apps.forEach(app => {\n        app._route = route;\n      });\n    });\n  }\n\n  // VueRouter类暴露的以下方法实际是调用具体history对象的方法\n  push(location: RawLocation, onComplete?: Function, onAbort?: Function) {\n    this.history.push(location, onComplete, onAbort);\n  }\n\n  replace(location: RawLocation, onComplete?: Function, onAbort?: Function) {\n    this.history.replace(location, onComplete, onAbort);\n  }\n}\n```\n\n可以看出：\n\n1. 作为参数传入的字符串属性 mode 只是一个标记，用来指示实际起作用的对象属性 history 的实现类，两者对应关系如下：\n\n   modehistory：\n\n   - 'history'——HTML5History\n   - 'hash'——HashHistory\n   - 'abstract'——AbstractHistory\n\n2. 在初始化对应的 history 之前，会对 mode 做一些校验：若浏览器不支持 HTML5History 方式（通过 supportsPushState 变量判断），则 mode 强制设为'hash'；若不是在浏览器环境下运行，则 mode 强制设为'abstract'\n\n3. VueRouter 类中的 onReady(), push()等方法只是一个代理，实际是调用的具体 history 对象的对应方法，在 init()方法中初始化时，也是根据 history 对象具体的类别执行不同操作\n\n在浏览器环境下的两种方式，分别就是在 HTML5History，HashHistory 两个类中实现的。他们都定义在 src/history 文件夹下，继承自同目录下 base.js 文件中定义的 History 类。History 中定义的是公用和基础的方法，直接看会一头雾水，我们先从 HTML5History，HashHistory 两个类中看着亲切的 push(), replace()方法的说起。\n\n## 2.HashHistory\n\n看源码前先回顾一下原理：\n\nhash（“#”）符号的本来作用是加在 URL 中指示网页中的位置：\n\n> http://www.example.com/index.html#print\n\n\\#符号本身以及它后面的字符称之为 hash，可通过 window.location.hash 属性读取。它具有如下特点：\n\n- hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中。它是用来指导浏览器动作的，对服务器端完全无用，因此，改变 hash 不会重新加载页面\n\n- 可以为 hash 的改变添加监听事件：\n\n  ```javascript\n  window.addEventListener(\"hashchange\", funcRef, false);\n  ```\n\n- 每一次改变 hash（window.location.hash），都会在浏览器的访问历史中增加一个记录\n\n利用 hash 的以上特点，就可以来实现前端路由“更新视图但不重新请求页面”的功能了。\n\n### **HashHistory.push()**\n\n我们来看 HashHistory 中的 push()方法：\n\n```javascript\npush (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  this.transitionTo(location, route => {\n    pushHash(route.fullPath)\n    onComplete && onComplete(route)\n  }, onAbort)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path\n}\n```\n\ntransitionTo()方法是父类中定义的是用来处理路由变化中的基础逻辑的，**push()方法最主要的是对 window 的 hash 进行了直接赋值：**\n\n```javascript\nwindow.location.hash = route.fullPath;\n```\n\n**hash 的改变会自动添加到浏览器的访问历史记录中。**\n\n那么视图的更新是怎么实现的呢，我们来看父类 History 中 transitionTo()方法的这么一段：\n\n```javascript\ntransitionTo (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  const route = this.router.match(location, this.current)\n  this.confirmTransition(route, () => {\n    this.updateRoute(route)\n    ...\n  })\n}\n\nupdateRoute (route: Route) {\n  this.cb && this.cb(route)\n}\n\nlisten (cb: Function) {\n  this.cb = cb\n}\n```\n\n可以看到，当路由变化时，调用了 History 中的 this.cb 方法，而 this.cb 方法是通过 History.listen(cb)进行设置的。回到 VueRouter 类定义中，找到了在 init()方法中对其进行了设置：\n\n```javascript\ninit (app: any /* Vue component instance */) {\n\n  this.apps.push(app)\n\n  history.listen(route => {\n    this.apps.forEach((app) => {\n      app._route = route\n    })\n  })\n}\n\n```\n\n根据注释，app 为 Vue 组件实例，但我们知道 Vue 作为渐进式的前端框架，本身的组件定义中应该是没有有关路由内置属性\\_route，如果组件中要有这个属性，应该是在插件加载的地方，即 VueRouter 的 install()方法中混合入 Vue 对象的，查看 install.js 源码，有如下一段：\n\n```javascript\nexport function install(Vue) {\n  Vue.mixin({\n    beforeCreate() {\n      if (isDef(this.$options.router)) {\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, \"_route\", this._router.history.current);\n      }\n      registerInstance(this, this);\n    }\n  });\n}\n```\n\n通过 Vue.mixin()方法，全局注册一个混合，影响注册之后所有创建的每个 Vue 实例，该混合在 beforeCreate 钩子中通过 Vue.util.defineReactive()定义了响应式的\\_route 属性。所谓响应式属性，即当\\_route 值改变时，会自动调用 Vue 实例的 render()方法，更新视图。\n\n#### **总结一下，从设置路由改变到视图更新的流程如下：**\n\n```javascript\n$router.push() --> HashHistory.push() --> History.transitionTo() --> History.updateRoute() --> {app._route = route} --> vm.render()\n```\n\n### **HashHistory.replace()**\n\nreplace()方法与 push()方法不同之处在于，它并不是将新路由添加到浏览器访问历史的栈顶，而是替换掉当前的路由：\n\n```javascript\nreplace (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  this.transitionTo(location, route => {\n    replaceHash(route.fullPath)\n    onComplete && onComplete(route)\n  }, onAbort)\n}\n\nfunction replaceHash (path) {\n  const i = window.location.href.indexOf('#')\n  window.location.replace(\n    window.location.href.slice(0, i >= 0 ? i : 0) + '#' + path\n  )\n}\n```\n\n可以看出，它与 push()的实现结构上基本相似，**不同点在于它不是直接对 window.location.hash 进行赋值，而是调用 window.location.replace 方法将路由进行替换。**\n\n### **监听地址栏**\n\n以上讨论的 VueRouter.push()和 VueRouter.replace()是可以在 vue 组件的逻辑代码中直接调用的，除此之外在浏览器中，用户还可以直接在浏览器地址栏中输入改变路由，因此 VueRouter 还需要能监听浏览器地址栏中路由的变化，并具有与通过代码调用相同的响应行为。在 HashHistory 中这一功能通过 setupListeners 实现：\n\n```javascript\nsetupListeners () {\n  window.addEventListener('hashchange', () => {\n    if (!ensureSlash()) {\n      return\n    }\n    this.transitionTo(getHash(), route => {\n      replaceHash(route.fullPath)\n    })\n  })\n}\n\n```\n\n该方法设置监听了浏览器事件 hashchange，调用的函数为 replaceHash，即在浏览器地址栏中直接输入路由相当于代码调用了 replace()方法\n\n## 3.HTML5History\n\nHistory interface 是浏览器历史记录栈提供的接口，通过 back(), forward(), go()等方法，我们可以读取浏览器历史记录栈的信息，进行各种跳转操作。\n\n### 从 HTML5 开始，History interface 提供了两个新的方法：pushState(), replaceState()使得我们可以对浏览器历史记录栈进行修改：\n\n```javascript\nwindow.history.pushState(stateObject, title, URL);\nwindow.history.replaceState(stateObject, title, URL);\n```\n\n- stateObject: 当浏览器跳转到新的状态时，将触发 popState 事件，该事件将携带这个 stateObject 参数的副本\n- title: 所添加记录的标题\n- URL: 所添加记录的 URL\n\n这两个方法有个共同的特点：当调用他们修改浏览器历史记录栈后，虽然当前 URL 改变了，但浏览器不会立即发送请求该 URL（the browser won't attempt to load this URL after a call to pushState()），这就为单页应用前端路由“更新视图但不重新请求页面”提供了基础。\n\n我们来看 vue-router 中的源码：\n\n```javascript\npush (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  const { current: fromRoute } = this\n  this.transitionTo(location, route => {\n    pushState(cleanPath(this.base + route.fullPath))\n    handleScroll(this.router, route, fromRoute, false)\n    onComplete && onComplete(route)\n  }, onAbort)\n}\n\nreplace (location: RawLocation, onComplete?: Function, onAbort?: Function) {\n  const { current: fromRoute } = this\n  this.transitionTo(location, route => {\n    replaceState(cleanPath(this.base + route.fullPath))\n    handleScroll(this.router, route, fromRoute, false)\n    onComplete && onComplete(route)\n  }, onAbort)\n}\n\n// src/util/push-state.js\nexport function pushState (url?: string, replace?: boolean) {\n  saveScrollPosition()\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  const history = window.history\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url)\n    } else {\n      _key = genKey()\n      history.pushState({ key: _key }, '', url)\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url)\n  }\n}\n\nexport function replaceState (url?: string) {\n  pushState(url, true)\n}\n\n```\n\n代码结构以及更新视图的逻辑与 hash 模式基本类似，只不过**将对 window.location.hash 直接进行赋值 window.location.replace()改为了调用 history.pushState()和 history.replaceState()方法。**\n\n### 在 HTML5History 中添加对修改浏览器地址栏 URL 的监听是直接在构造函数中执行的：\n\n```javascript\nconstructor (router: Router, base: ?string) {\n\n  window.addEventListener('popstate', e => {\n    const current = this.current\n    this.transitionTo(getLocation(this.base), route => {\n      if (expectScroll) {\n        handleScroll(router, route, current, true)\n      }\n    })\n  })\n}\n\n```\n\n当然了 HTML5History 用到了 HTML5 的新特特性，是需要特定浏览器版本的支持的，前文已经知道，浏览器是否支持是通过变量 supportsPushState 来检查的：\n\n```javascript\n// src/util/push-state.js\nexport const supportsPushState =\n  inBrowser &&\n  (function() {\n    const ua = window.navigator.userAgent;\n\n    if (\n      (ua.indexOf(\"Android 2.\") !== -1 || ua.indexOf(\"Android 4.0\") !== -1) &&\n      ua.indexOf(\"Mobile Safari\") !== -1 &&\n      ua.indexOf(\"Chrome\") === -1 &&\n      ua.indexOf(\"Windows Phone\") === -1\n    ) {\n      return false;\n    }\n\n    return window.history && \"pushState\" in window.history;\n  })();\n```\n\n这两种模式都是通过浏览器接口实现的，除此之外 vue-router 还为非浏览器环境准备了一个 abstract 模式，其原理为用一个数组 stack 模拟出浏览器历史记录栈的功能。\n\n## 4.vue 中两种模式比较\n\n在一般的需求场景中，hash 模式与 history 模式是差不多的，但几乎所有的文章都推荐使用 history 模式，理由竟然是：\"#\" 符号太丑...0_0 \"\n\n> 如果不想要很丑的 hash，我们可以用路由的 history 模式 ——官方文档\n\n当然，严谨的我们肯定不应该用颜值评价技术的好坏。**根据 MDN 的介绍，调用 history.pushState()相比于直接修改 hash 主要有以下优势：**\n\n- pushState 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 hash 只可修改#后面的部分，故只可设置与当前同文档的 URL\n- pushState 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 hash 设置的新值必须与原来不一样才会触发记录添加到栈中\n- pushState 通过 stateObject 可以添加任意类型的数据到记录中；而 hash 只可添加短字符串\n- pushState 可额外设置 title 属性供后续使用\n\n_a 标签 hash 跳转，会改变页面路径的 hash 值，但不会重载_\n\n**history 模式的一个问题**\n\n我们知道对于单页应用来讲，理想的使用场景是仅在进入应用时加载 index.html，后续在的网络操作通过 Ajax 完成，不会根据 URL 重新请求页面，但是难免遇到特殊情况，比如用户直接在地址栏中输入并回车，浏览器重启重新加载应用等。\n\nhash 模式仅改变 hash 部分的内容，而 hash 部分是不会包含在 HTTP 请求中的：\n\n```http\nhttp://oursite.com/#/user/id   // 如重新请求只会发送http://oursite.com/\n\n```\n\n故在 hash 模式下遇到根据 URL 请求页面的情况不会有问题。\n\n而 history 模式则会将 URL 修改得就和正常请求后端的 URL 一样\n\n```http\nhttp://oursite.com/user/id\n\n```\n\n在此情况下重新向后端发送请求，如后端没有配置对应/user/id 的路由处理，则会返回 404 错误。官方推荐的解决办法是在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。同时这么做以后，服务器就不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。为了避免这种情况，在 Vue 应用里面覆盖所有的路由情况，然后在给出一个 404 页面。或者，如果是用 Node.js 作后台，可以使用服务端的路由来匹配 URL，当没有匹配到路由的时候返回 404，从而实现 fallback。\n\n## 5.AbstractHistory\n\n'abstract'模式，不涉及和浏览器地址的相关记录，流程跟'HashHistory'是一样的，其原理是通过数组模拟浏览器历史记录栈的功能\n\n```javascript\n// 对于 go 的模拟\n    go (n: number) {\n        // 新的历史记录位置\n        const targetIndex = this.index + n\n        // 超出返回了\n        if (targetIndex < 0 || targetIndex >= this.stack.length) {\n            return\n        }\n        // 取得新的 route 对象\n        // 因为是和浏览器无关的 这里得到的一定是已经访问过的\n        const route = this.stack[targetIndex]\n        // 所以这里直接调用 confirmTransition 了\n        // 而不是调用 transitionTo 还要走一遍 match 逻辑\n        this.confirmTransition(route, () => {\n            // 更新\n            this.index = targetIndex\n            this.updateRoute(route)\n        })\n    }\n\n```\n\n## 6.直接加载应用文件\n\n> Tip: built files are meant to be served over an HTTP server.\n>\n> Opening index.html over file:// won't work.\n\nVue 项目通过 vue-cli 的 webpack 打包完成后，命令行会有这么一段提示。通常情况，无论是开发还是线上，前端项目都是通过服务器访问，不存在 \"Opening index.html over file://\" ，但程序员都知道，需求和场景永远是千奇百怪的，只有你想不到的，没有产品经理想不到的。\n\n本文写作的初衷就是遇到了这样一个问题：需要快速开发一个移动端的展示项目，决定采用 WebView 加载 Vue 单页应用的形式，但没有后端服务器提供，所以所有资源需从本地文件系统加载：\n\n```javascript\n// AndroidAppWrapper\npublic class MainActivity extends AppCompatActivity {\n\n    private WebView webView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        webView = new WebView(this);\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.loadUrl(\"file:///android_asset/index.html\");\n        setContentView(webView);\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if ((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack()) {\n            webView.goBack();\n            return true;\n        }\n        return false;\n    }\n}\n\n```\n\n此情此景看来是必须 \"Opening index.html over file://\" 了，为此，我首先要进行了一些设置\n\n- 在项目 config.js 文件中将 assetsPublicPath 字段的值改为相对路径 './'\n- 调整生成的 static 文件夹中图片等静态资源的位置与代码中的引用地址一致\n\n这是比较明显的需要改动之处，但改完后依旧无法顺利加载，经过反复排查发现，项目在开发时，router 设置为了 history 模式（为了美观...0_0\"），当改为 hash 模式后就可正常加载了。\n\n为什么会出现这种情况呢？我分析原因可能如下：\n\n当从文件系统中直接加载 index.html 时，URL 为：\n\n```text\nfile:///android_asset/index.html\n\n```\n\n而首页视图需匹配的路径为 path: '/' :\n\n```javascript\nexport default new Router({\n  mode: \"history\",\n  routes: [\n    {\n      path: \"/\",\n      name: \"index\",\n      component: IndexView\n    }\n  ]\n});\n```\n\n我们先来看 history 模式，在 HTML5History 中：\n\n```javascript\nensureURL (push?: boolean) {\n  if (getLocation(this.base) !== this.current.fullPath) {\n    const current = cleanPath(this.base + this.current.fullPath)\n    push ? pushState(current) : replaceState(current)\n  }\n}\n\nexport function getLocation (base: string): string {\n  let path = window.location.pathname\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length)\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n```\n\n逻辑只会确保存在 URL，path 是通过剪切的方式直接从 window.location.pathname 获取到的，它的结尾是 index.html，因此匹配不到 '/' ，故 \"Opening index.html over file:// won't work\" 。\n\n再看 hash 模式，在 HashHistory 中：\n\n```javascript\nexport class HashHistory extends History {\n  constructor (router: Router, base: ?string, fallback: boolean) {\n    ...\n    ensureSlash()\n  }\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  setupListeners () {\n    window.addEventListener('hashchange', () => {\n      if (!ensureSlash()) {\n        return\n      }\n      ...\n    })\n  }\n\n  getCurrentLocation () {\n    return getHash()\n  }\n}\n\nfunction ensureSlash (): boolean {\n  const path = getHash()\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path)\n  return false\n}\n\nexport function getHash (): string {\n  const href = window.location.href\n  const index = href.indexOf('#')\n  return index === -1 ? '' : href.slice(index + 1)\n}\n```\n\n我们看到在代码逻辑中，多次出现一个函数 ensureSlash()，当#符号后紧跟着的是'/'，则返回 true，否则强行插入这个'/'，故我们可以看到，即使是从文件系统打开 index.html，URL 依旧会变为以下形式：\n\n```text\nfile:///C:/Users/dist/index.html#/\n```\n\ngetHash()方法返回的 path 为 '/' ，可与首页视图的路由匹配。\n\n**故要想从文件系统直接加载 Vue 单页应用而不借助后端服务器，除了打包后的一些路径设置外，还需确保 vue-router 使用的是 hash 模式。**\n\n# React Router\n\nreact-router 是基于 history 模块提供的 api 进行开发的。其路由配置是通过 react component 方式进行的，路由更改触发的回调函数是**我们自己写的操作 DOM 的函数**；在 react 中我们不直接操作 DOM，而是管理抽象出来的 VDOM 或者说 JSX，对 react 的来说**路由需要管理组件的生命周期，对不同的路由渲染不同的组件**。\n\n如下：\n\n```react\nrender((\n  <Router history={browserHistory}>\n    <Route path=\"/\" component={App}>\n      <Route path=\"about\" component={About}/>\n      <Route path=\"users\" component={Users}>\n        <Route path=\"/user/:userId\" component={User}/>\n      </Route>\n      <Route path=\"*\" component={NoMatch}/>\n    </Route>\n  </Router>\n), document.body)\n\n// link 触发路由\n<Link to={`/user/89757`}>'joey'</Link>\n```\n\n以上声明了一份含有 path to component 的各个映射的路由表。Router 在 react 组件生命周期的钩子 componentWillMount （组件被挂载前）中，使用 this.history.listen 去注册了 url 更新的回调函数。回调函数将在 url 更新时触发，回调中的 setState 会去 render 新的 component。\n\n## 1.history\n\n[history](https://github.com/ReactTraining/history#readme) 库，是 rr4 依赖的一个对 `window.history` 加强版的 history 库。\n\n### match\n\n源自 history 库，表示当前的 URL 与 path 的匹配的结果\n\n```react\nmatch: {\n    path: \"/\", // 用来匹配的 path\n\turl: \"/\", // 当前的 URL\n\tparams: {}, // 路径中的参数\n\tisExact: pathname === \"/\" // 是否为严格匹配\n}\n\n```\n\n### location\n\n还是源自 history 库，是 history 库基于 window.location 的一个衍生。\n\n```react\nhash: \"\" // hash\nkey: \"nyi4ea\" // 一个 uuid\npathname: \"/explore\" // URL 中路径部分\nsearch: \"\" // URL 参数\nstate: undefined // 路由跳转时传递的 state\n\n```\n\n我们带着问题去分析源码，先逐个分析每个组件的作用，在最后会有回答，在这里先举一个 rr4 的小 [DEMO](https://codesandbox.io/)\n\n1. 页面初始化时的渲染过程？\n2. 点击一个 Link 跳转及渲染更新的过程？\n\n## 2.packages\n\nrr4 将路由拆成了几个包：\n\n- react-router 负责通用的路由逻辑\n- react-router-dom 负责浏览器的路由管理\n- react-router-native 负责 react-native 的路由管理\n\n通用的部分直接从 react-router 中导入，用户只需引入 react-router-dom 或 react-router-native 即可，react-router 作为依赖存在不再需要单独引入。\n\n### Router\n\n```react\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './components/App';\n\nrender(){\n    return(\n\t\t<BrowserRouter>\n\t\t\t<App />\n\t\t</BrowserRouter>\n\t)\n)}\n\n```\n\n这是我们调用 Router 的方式，这里拿 BrowserRouter 来举例。\n\nBrowserRouter 的源码在 react-router-dom 中，它是一个高阶组件，**在内部创建一个全局的 history 对象（可以监听整个路由的变化），并将 history 作为 props 传递给 react-router 的 Router 组件（Router 组件再会将这个 history 的属性作为 context 传递给子组件）**\n\n```react\n  render() {\n    return <Router history={this.history} children={this.props.children} />;\n  }\n\n```\n\n**整个 Router 的核心是在 react-router 的 Router 组件中**，如下，**借助 context 向 Route 传递组件**，这也解释了为什么 Router 要在所有 Route 的外面。\n\n```react\n  getChildContext() {\n    return {\n      router: {\n        ...this.context.router,\n        history: this.props.history,\n        route: {\n          location: this.props.history.location,\n          match: this.state.match\n        }\n      }\n    };\n  }\n\n```\n\n这是 Router 传递给子组件的 context，事实上 Route 也会将 router 作为 context 向下传递，如果我们在 Route 渲染的组件中加入\n\n```react\n  static contextTypes = {\n    router: PropTypes.shape({\n      history: PropTypes.object.isRequired,\n      route: PropTypes.object.isRequired,\n      staticContext: PropTypes.object\n    })\n  };\n\n```\n\n来通过 context 访问 router，不过 rr4 一般通过 props 传递，将 history, location, match 作为三个独立的 props 传递给要渲染的组件，这样访问起来方便一点（实际上已经完全将 router 对象的属性完全传递了）。\n\n在 Router 的 componentWillMount 中， 添加了\n\n```react\n  componentWillMount() {\n    const { children, history } = this.props;\n\n    invariant(\n      children == null || React.Children.count(children) === 1,\n      \"A <Router> may have only one child element\"\n    );\n\n    // Do this here so we can setState when a <Redirect> changes the\n    // location in componentWillMount. This happens e.g. when doing\n    // server rendering using a <sStaticRouter>.\n    this.unlisten = history.listen(() => {\n      this.setState({\n        match: this.computeMatch(history.location.pathname)\n      });\n    });\n  }\n\n```\n\n`history.listen` 能够监听路由的变化并执行回调事件。\n\n在这里每次路由的变化执行的回调事件为\n\n```react\nthis.setState({\n    match: this.computeMatch(history.location.pathname)\n});\n\n```\n\n相比于在 setState 里做的操作，setState 本身的意义更大 —— **每次路由变化 -> 触发顶层 Router 的回调事件 -> Router 进行 setState -> 向下传递 nextContext（context 中含有最新的 location）-> 下面的 Route 获取新的 nextContext 判断是否进行渲染。**\n\n之所以把这个 subscribe 的函数写在 componentWillMount 里，就像源码中给出的注释：是为了 SSR 的时候，能够使用 Redirect。\n\n### Route\n\n**Route 的作用是匹配路由，并传递给要渲染的组件 props。**\n\n在 Route 的 componentWillReceiveProps 中\n\n```react\n  componentWillReceiveProps(nextProps, nextContext) {\n    ...\n    this.setState({\n      match: this.computeMatch(nextProps, nextContext.router)\n    });\n  }\n\n```\n\n**Route 接受上层的 Router 传入的 context，Router 中的 history 监听着整个页面的路由变化，当页面发生跳转时，history 触发监听事件，Router 向下传递 nextContext，就会更新 Route 的 props 和 context 来判断当前 Route 的 path 是否匹配 location，如果匹配则渲染，否则不渲染。**\n\n是否匹配的依据就是 computeMatch 这个函数，在下文会有分析，这里只需要知道匹配失败则 match 为 `null`，如果匹配成功则将 match 的结果作为 props 的一部分，在 render 中传递给传进来的要渲染的组件。\n\n接下来看一下 Route 的 render 部分。\n\n```react\n  render() {\n    const { match } = this.state; // 布尔值，表示 location 是否匹配当前 Route 的 path\n    const { children, component, render } = this.props; // Route 提供的三种可选的渲染方式\n    const { history, route, staticContext } = this.context.router; // Router 传入的 context\n    const location = this.props.location || route.location;\n    const props = { match, location, history, staticContext };\n\n    if (component) return match ? React.createElement(component, props) : null; // Component 创建\n\n    if (render) return match ? render(props) : null; // render 创建\n\n    if (typeof children === \"function\") return children(props); // 回调 children 创建\n\n    if (children && !isEmptyChildren(children)) // 普通 children 创建\n      return React.Children.only(children);\n\n    return null;\n  }\n\n```\n\nrr4 提供了三种渲染组件的方法：component props，render props 和 children props，渲染的优先级也是依次按照顺序，如果前面的已经渲染后了，将会直接 return。\n\n- component (props) —— 由于使用 React.createElement 创建，所以可以传入一个 class component。\n- render (props) —— 直接调用 render() 展开子元素，所以需要传入 stateless function component。\n- children (props) —— 其实和 render 差不多，区别是不判断 match，总是会被渲染。\n- children（子元素）—— 如果以上都没有，那么会默认渲染子元素，但是只能有一个子元素。\n\n这里解释一下官网的 [tips](https://github.com/ReactTraining/react-router/blob/a27bc562ce49b22019d380d28fa9a534111614b2/packages/react-router/docs/api/Route.md#component)，component 是使用 React.createElement 来创建新的元素，所以如果传入一个内联函数，比如\n\n```react\n<Route path='/' component={()=>(<div>hello world</div>)}\n\n```\n\n的话，由于每次的 props.component 都是新创建的，所以 React 在 diff 的时候会认为进来了一个全新的组件，所以会将旧的组件 unmount，再 re-mount。这时候就要使用 render，少了一层包裹的 component 元素，render 展开后的元素类型每次都是一样的，就不会发生 re-mount 了（children 也不会发生 re-mount）。\n\n### Switch\n\n我们紧接着 Route 来看 Switch，**Switch 是用来嵌套在 Route 的外面，当 Switch 中的第一个 Route 匹配之后就不会再渲染其他的 Route 了。**\n\n```react\n  render() {\n    const { route } = this.context.router;\n    const { children } = this.props;\n    const location = this.props.location || route.location;\n\n    let match, child;\n    React.Children.forEach(children, element => {\n      if (match == null && React.isValidElement(element)) {\n        const {\n          path: pathProp,\n          exact,\n          strict,\n          sensitive,\n          from\n        } = element.props;\n        const path = pathProp || from;\n\n        child = element;\n        match = matchPath(\n          location.pathname,\n          { path, exact, strict, sensitive },\n          route.match\n        );\n      }\n    });\n\n    return match\n      ? React.cloneElement(child, { location, computedMatch: match })\n      : null;\n  }\n\n```\n\n**Switch 也是通过 matchPath 这个函数来判断是否匹配成功，一直按照 Switch 中 children 的顺序依次遍历子元素，如果匹配失败则 match 为 null，如果匹配成功则标记这个子元素和它对应的 location、computedMatch。在最后的时候使用 React.cloneElement 渲染，如果没有匹配到的子元素则返回 `null`。**\n\n接下来我们看下 matchPath 是如何判断 location 是否符合 path 的。\n\n### matchPath\n\nmatchPath 返回的是一个如下结构的对象\n\n```react\n{\n    path, // 用来进行匹配的路径，其实是直接导出的传入 matchPath 的 options 中的 path\n    url: path === \"/\" && url === \"\" ? \"/\" : url, // 整个的 URL\n    isExact, // url 与 path 是否是 exact 的匹配\n    // 返回的是一个键值对的映射\n    // 比如你的 path 是 /users/:id，然后匹配的 pathname 是 /user/123\n    // 那么 params 的返回值就是 {id: '123'}\n    params: keys.reduce((memo, key, index) => {\n      memo[key.name] = values[index];\n      return memo;\n    }, {})\n  }\n\n```\n\n这些信息将作为匹配的参数传递给 Route 和 Switch（Switch 只是一个代理，它的作用还是渲染 Route，Switch 计算得到的 computedMatch 会传递给要渲染的 Route，此时 Route 将直接使用这个 computedMatch 而不需要再自己来计算）。\n\n在 matchPath 内部 compilePath 时，有个\n\n```react\nconst patternCache = {};\nconst cacheLimit = 10000;\nlet cacheCount = 0;\n\n```\n\n作为 pathToRegexp 的缓存，因为 ES6 的 import 模块导出的是值的**引用**，所以将 patternCache 可以理解为一个全局变量缓存，缓存以 `{option:{pattern: }}` 的形式存储，之后如果需要匹配相同 pattern 和 option 的 path，则可以直接从缓存中获得正则表达式和 keys。\n\n加缓存的原因是路由页面大部分情况下都是相似的，比如要访问 `/user/123` 或 `/users/234`，都会使用 `/user/:id` 这个 path 去匹配，没有必要每次都生成一个新的正则表达式。SPA 在页面整个访问的过程中都维护着这份缓存。\n\n### Link\n\n实际上我们可能写的最多的就是 Link 这个标签了，我们从它的 render 函数开始看\n\n```react\nrender() {\n    const { replace, to, innerRef, ...props } = this.props; // eslint-disable-line no-unused-vars\n\n    invariant(\n      this.context.router,\n      \"You should not use <Link> outside a <Router>\"\n    );\n\n    invariant(to !== undefined, 'You must specify the \"to\" property');\n\n    const { history } = this.context.router;\n    const location =\n      typeof to === \"string\"\n        ? createLocation(to, null, null, history.location)\n        : to;\n\n    const href = history.createHref(location);\n    // 最终创建的是一个 a 标签\n    return (\n      <a {...props} onClick={this.handleClick} href={href} ref={innerRef} />\n    );\n  }\n\n```\n\n可以看到**Link 最终还是创建一个 a 标签来包裹住要跳转的元素**，但是如果只是一个普通的带 href 的 a 标签，那么就会直接跳转到一个新的页面而不是 SPA 了，所以在**这个 a 标签的 handleClick 中会 preventDefault 禁止默认的跳转，所以这里的 href 并没有实际的作用**，但仍然可以标示出要跳转到的页面的 URL 并且有更好的 html 语义。\n\n在 handleClick 中，对没有被 “preventDefault 的 && 鼠标左键点击的 && 非 `_blank` 跳转 的&& 没有按住其他功能键的“ 单击进行 preventDefault，然后 push 进 history 中，这也是前面讲过的 —— **路由的变化 与 页面的跳转 是不互相关联的**，rr4 **在 Link 中通过 history 库的 push 调用了 HTML5 history 的 `pushState`，但是这仅仅会让路由变化，其他什么都没有改变**。还记不记得 Router 中的 listen，它会监听路由的变化，然后通过 context 更新 props 和 nextContext 让下层的 Route 去重新匹配，完成需要渲染部分的更新。\n\n```react\n  handleClick = event => {\n    if (this.props.onClick) this.props.onClick(event);\n\n    if (\n      !event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore everything but left clicks\n      !this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n    ) {\n      event.preventDefault();\n\n      const { history } = this.context.router;\n      const { replace, to } = this.props;\n\n      if (replace) {\n        history.replace(to);\n      } else {\n        history.push(to);\n      }\n    }\n  };\n```\n\n### withRouter\n\n```react\nconst withRouter = Component => {\n  const C = props => {\n    const { wrappedComponentRef, ...remainingProps } = props;\n    return (\n      <Route\n        children={routeComponentProps => (\n          <Component\n            {...remainingProps}\n            {...routeComponentProps}\n            ref={wrappedComponentRef}\n          />\n        )}\n      />\n    );\n  };\n\n  C.displayName = `withRouter(${Component.displayName || Component.name})`;\n  C.WrappedComponent = Component;\n  C.propTypes = {\n    wrappedComponentRef: PropTypes.func\n  };\n\n  return hoistStatics(C, Component);\n};\n\nexport default withRouter;\n```\n\nwithRouter 的作用是让我们在普通的非直接嵌套在 Route 中的组件也能获得路由的信息，这时候我们就要 `WithRouter(wrappedComponent)` 来创建一个 HOC 传递 props，WithRouter 的其实就是用 Route 包裹了 SomeComponent 的一个 HOC。\n\n创建 Route 有三种方法，这里直接采用了传递 `children` props 的方法，因为这个 HOC 要原封不动的渲染 wrappedComponent（`children` props 比较少用得到，某种程度上是一个内部方法）。\n\n在最后返回 HOC 时，使用了 hoistStatics 这个方法，这个方法的作用是保留 SomeComponent 类的静态方法，因为 HOC 是在 wrappedComponent 的外层又包了一层 Route，所以要将 wrappedComponent 类的静态方法转移给新的 Route，具体参见 [Static Methods Must Be Copied Over](https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over)。\n\n## 3.理解\n\n现在回到一开始的问题，重新理解一下点击一个 Link 跳转的过程。\n\n有两件事需要完成：\n\n1. 路由的改变\n2. 页面的渲染部分的改变\n\n过程如下：\n\n1. 在最一开始 mount Router 的时候，Router 在 componentWillMount 中 listen 了一个回调函数，由 history 库管理，路由每次改变的时候触发这个回调函数。这个回调函数会触发 setState。\n2. 当点击 Link 标签的时候，实际上点击的是页面上渲染出来的 a 标签，然后通过 preventDefault 阻止 a 标签的页面跳转。\n3. Link 中也能拿到 Router -> Route 中通过 context 传递的 history，执行 `hitsory.push(to)`，这个函数实际上就是包装了一下 `window.history.pushState()`，是 HTML5 history 的 API，但是 pushState 之后除了地址栏有变化其他没有任何影响，到这一步已经完成了目标 1：路由的改变。\n4. 第 1 步中，路由改变是会触发 Router 的 setState 的，在 Router 那章有写道：每次路由变化 -> 触发顶层 Router 的监听事件 -> Router 触发 setState -> 向下传递新的 nextContext（nextContext 中含有最新的 location）\n5. 下层的 Route 拿到新的 nextContext 通过 matchPath 函数来判断 path 是否与 location 匹配，如果匹配则渲染，不匹配则不渲染，完成目标 2：页面的渲染部分的改变。\n","tags":["React","VUE","路由"],"categories":["前端"]},{"title":"leetcode算法刷题笔记（二）——回溯问题","url":"/2019/01/15/leetcode算法刷题笔记（二）——回溯问题/","content":"\n_该笔记只为个人所写算法，不一定是最优解法，仅供参考_\n\n# [17] Letter Combinations of a Phone Number\n\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\nNote:Although the above answer is in lexicographical order, your answer could be in any order you want.\n难度：Medium (40.58%)\n考点：回溯\n\n<!-- more -->\n\n```javascript\nvar letterCombinations = function(digits) {\n  var res = [];\n  var sort = [];\n  if (digits.length == 0) {\n    return res;\n  }\n  var phone = [\n    \"0\",\n    \"1\",\n    [\"a\", \"b\", \"c\"],\n    [\"d\", \"e\", \"f\"],\n    [\"g\", \"h\", \"i\"],\n    [\"j\", \"k\", \"l\"],\n    [\"m\", \"n\", \"o\"],\n    [\"p\", \"q\", \"r\", \"s\"],\n    [\"t\", \"u\", \"v\"],\n    [\"w\", \"x\", \"y\", \"z\"]\n  ];\n  finger(0);\n  return res;\n\n  function finger(index) {\n    if (index == digits.length) {\n      return res.push(sort.join(\"\"));\n    }\n    var temp = phone[digits[index]];\n    for (var i = 0; i < temp.length; i++) {\n      sort.push(temp[i]);\n      finger(index + 1);\n      sort.pop();\n    }\n  }\n};\n```\n\n# [22] Generate Parentheses\n\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n难度：Medium (53.42%)\n考点：回溯\n思路：\n\n1. 给定 n 值，则总共有 n 个左括号，n 个右括号。\n2. 第一个添加的一定是左括号。\n3. 当添加了一个左括号之后，才会有一个右括号可以添加。所以回溯时，left-1 的同时 right+1\n4. 当已添加了 n 个左括号后，剩下的都应该添加右括号\n\n```javascript\nvar generateParenthesis = function(n) {\n  var res = [];\n  var left = n - 1;\n  var right = 1;\n  function quote(left, right, str) {\n    if (left <= 0) {\n      if (right) {\n        for (var i = 0; i < right; i++) {\n          str = str + \")\";\n        }\n      }\n      return res.push(str);\n    }\n    quote(left - 1, right + 1, str + \"(\");\n    if (right > 0) {\n      quote(left, right - 1, str + \")\");\n    }\n  }\n  quote(left, right, \"(\");\n  return res;\n};\n```\n\n# [46] Permutations\n\nGiven a collection of distinct integers, return all possible permutations.\n难度：Medium (53.67%)\n考点：回溯\n思路：选择一个元素之后，则下次可选择的元素就少一个。\n\n```javascript\nvar permute = function(nums) {\n  var res = [];\n  var sort = [];\n  if (nums.length == 0) {\n    return res;\n  }\n  select(nums);\n  return res;\n\n  function select(nums) {\n    if (nums.length < 1) {\n      return res.push(sort.slice());\n    }\n    for (var i = 0; i < nums.length; i++) {\n      var nextNums = nums.slice();\n      sort.push(nextNums[i]);\n      nextNums.splice(i, 1);\n      select(nextNums);\n      sort.pop();\n    }\n  }\n};\n```\n\n# [47] Permutations II\n\nGiven a collection of numbers that might contain duplicates, return all possible unique permutations.\n难度：Medium (39.35%)\n考点：回溯\n思路：思路同上题。注意筛选条件。\n\n```javascript\nvar permuteUnique = function(nums) {\n  var res = [];\n  var sort = [];\n  if (nums.length == 0) {\n    return res;\n  }\n  nums = nums.sort((a, b) => {\n    return a - b;\n  });\n  select(nums);\n  return res;\n\n  function select(nums) {\n    if (nums.length < 1) {\n      return res.push(sort.slice());\n    }\n    for (var i = 0; i < nums.length; i++) {\n      if (nums[i] == nums[i - 1]) {\n        continue;\n      }\n      var nextNums = nums.slice();\n      sort.push(nextNums[i]);\n      nextNums.splice(i, 1);\n      select(nextNums);\n      sort.pop();\n    }\n  }\n};\n```\n\n# [60] Permutations II ☆☆\n\nThe set [1,2,3,...,n] contains a total of n! unique permutations.By listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the k^th permutation sequence.\nNote:Given n will be between 1 and 9 inclusive. Given k will be between 1 and n! inclusive.\n难度：Medium (32.42%)\n考点：回溯\n\n```javascript\nvar getPermutation = function(n, k) {\n  (res = []), (pos = k - 1);\n  var nums = [];\n  if (n == 0) {\n    return \"error\";\n  }\n  for (var i = 0; i < n; i++) {\n    nums[i] = i + 1;\n  }\n  var numsSort = nums.reduce((a, b) => a * b);\n  if (k < 1 || k > numsSort) {\n    return \"error\";\n  }\n\n  for (var j = n; j >= 1; --j) {\n    numsSort /= j;\n    res.push(nums.splice(parseInt(pos / numsSort), 1)[0]);\n    pos %= numsSort;\n  }\n  return res.join(\"\");\n};\n```\n\n# [77] ombinations ☆☆\n\nGiven two integers n and k, return all possible combinations of k numbers out of 1 ... n.\n难度：Medium (46.23%)\n考点：回溯\n难点：下一次选择不能选择比上一次小的数，所以需注意 push 进去的条件\n\n```javascript\nvar combine = function(n, k) {\n  var nums = [];\n  var res = [];\n  var temp = [];\n  if (n == 0 || k <= 0 || k > n) {\n    return \"error\";\n  }\n  for (var i = 0; i < n; i++) {\n    nums[i] = i + 1;\n  }\n\n  select(0, nums);\n  return res;\n\n  function select(start, nums) {\n    if (temp.length == k) {\n      return res.push(temp.slice());\n    }\n    for (var i = start; i < n; i++) {\n      if (temp.length >= 1 && temp[temp.length - 1] > i) {\n        continue;\n      }\n      temp.push(nums[i]);\n      select(start + 1, nums);\n      temp.pop();\n    }\n  }\n};\n```\n\n# [78] Subsets\n\nGiven a set of distinct integers, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\n难度：Medium (51.26%)\n考点：回溯\n难点：下一次选择不能选择比上一次小的数，所以需注意 push 进去的条件。\n\n```javascript\nvar subsets = function(nums) {\n  var res = [];\n  var subsets = [];\n  var used = [];\n  res.push(subsets.slice());\n  if (nums.length == 0) {\n    return res;\n  }\n  nums = nums.sort((a, b) => a - b);\n  for (var j = 1; j <= nums.length; j++) {\n    findSubsets(0, j);\n  }\n  return res;\n\n  function findSubsets(start, k) {\n    for (var i = 0; i < nums.length; i++) {\n      if (subsets.length == k) {\n        return res.push(subsets.slice());\n      }\n      if (used[i]) {\n        continue;\n      }\n      if (start > 0 && nums[i] < subsets[subsets.length - 1]) {\n        continue;\n      }\n      subsets.push(nums[i]);\n      used[i] = true;\n      findSubsets(start + 1, k);\n      subsets.pop();\n      used[i] = false;\n    }\n  }\n};\n```\n\n# [79] Word Search\n\nGiven a 2D board and a word, find if the word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\n难度：Medium (30.52%)\n考点：回溯\n思路：要分四个方向分别回溯。\n\n```javascript\nvar exist = function(board, word) {\n  var row = board.length;\n  var col = board[0].length;\n  if (word.length > row * col) {\n    return false;\n  }\n  function search(i, j, n) {\n    if (\n      i >= row ||\n      j >= col ||\n      i < 0 ||\n      j < 0 ||\n      board[i][j] != word[n] ||\n      n > word.length\n    ) {\n      return false;\n    }\n    if (n == word.length - 1) {\n      return true;\n    }\n    board[i][j] = true;\n    if (search(i + 1, j, n + 1)) {\n      return true;\n    }\n    if (search(i - 1, j, n + 1)) {\n      return true;\n    }\n    if (search(i, j + 1, n + 1)) {\n      return true;\n    }\n    if (search(i, j - 1, n + 1)) {\n      return true;\n    }\n    board[i][j] = word[n];\n    return false;\n  }\n  for (var i = 0; i < row; i++) {\n    for (var j = 0; j < col; j++) {\n      if (search(i, j, 0)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n```\n\n# [89] Gray Code ☆☆\n\nThe gray code is a binary numeral system where two successive values differ in only one bit.\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\n难度：Medium (45.03%)\n考点：回溯\n思路：可根据格雷码的特性考虑\n解法一（普通解法）：\n\n```javascript\nvar grayCode = function(n) {\n  var result = [];\n\n  var graycodeFn = function(n) {\n    var graycode = [];\n\n    if (n == 1) {\n      graycode[0] = \"0\";\n      graycode[1] = \"1\";\n      return graycode;\n    }\n\n    var last = arguments.callee(n - 1); // arguments.callee(n-1) == graycodeFn(n-1)\n\n    for (var i = last.length - 1; i >= 0; --i) {\n      graycode.unshift(\"0\" + last[i]);\n      graycode.push(\"1\" + last[i]);\n    }\n\n    return graycode;\n  };\n\n  var graycode = n == 0 ? [\"0\"] : graycodeFn(n);\n\n  for (var i = 0; i < graycode.length; ++i) {\n    result.push(parseInt(parseInt(graycode[i], 2), 10)); // String To Number\n  }\n\n  return result;\n};\n```\n\n解法二（大神解法）：\n\n```javascript\nvar grayCode = function(n) {\n  let nums = [0],\n    c = -1;\n  while (c++ < n - 1)\n    nums = [...nums, ...nums.map(num => num + Math.pow(2, c)).reverse()];\n  return nums;\n};\n```\n\n# [90] Subsets II\n\nGiven a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\nNote: The solution set must not contain duplicate subsets.\n难度：Medium (41.57%)\n考点：回溯\n\n```javascript\nvar subsetsWithDup = function(nums) {\n  var sub = [];\n  var res = [];\n  res.push(sub.slice());\n  if (nums.length == 0) {\n    return res;\n  }\n  nums = nums.sort((a, b) => a - b);\n\n  for (var i = 1; i <= nums.length; i++) {\n    findSub(0, i);\n  }\n  return res;\n\n  function findSub(start, k) {\n    if (sub.length == k) {\n      return res.push(sub.slice());\n    }\n    for (var j = start; j < nums.length; j++) {\n      if (j > start && nums[j] == nums[j - 1]) {\n        continue;\n      }\n      sub.push(nums[j]);\n      findSub(j + 1, k);\n      sub.pop();\n    }\n  }\n};\n```\n","tags":["JavaScript","算法","LeetCode","回溯"],"categories":["算法"]},{"title":"浏览器内核","url":"/2019/01/07/浏览器内核/","content":"\n# 浏览器内核\n\n## 浏览器内核有哪几种？\n\n### Trident：\n\nIE（Internet Explorer），由于其被包含在全世界使用率最高的操作系统 **Windows** 中，得到了极高的市场占有率，从而使得 Trident 内核（也被称为 **IE 内核**）长期一家独大。\n\n但是由于微软长时间没有更新 Trident 内核，则导致了两个后果：一是 Trident 内核曾经**几乎与 W3C 标准脱节**（2005 年），二是 Trident 内核的**大量 Bug** 等安全性问题没有得到及时解决，然后加上一些致力于开源的开发者和一些学者们公开自己认为 IE 浏览器不安全的观点，也有很多用户转向了其他浏览器。\n\n<!-- more -->\n\n#### Trident 内核常见浏览器\n\n（1）IE6、IE7、IE8（Trident 4.0）、IE9（Trident 5.0）、IE10（Trident 6.0）；\n\n（2）猎豹安全浏览器：1.0-4.2 版本为 Trident+Webkit，4.3 版本为 Trident+Blink；\n\n（3）360 安全浏览器 ：1.0-5.0 为 Trident，6.0 为 Trident+Webkit，7.0 为 Trident+Blink；\n\n（4）360 极速浏览器：7.5 之前为 Trident+Webkit,7.5 为 Trident+Blink；\n\n（5）傲游浏览器 ：傲游 1.x、2.x 为 IE 内核，3.x 为 IE 与 Webkit 双核；\n\n（6）搜狗高速浏览器：1.x 为 Trident，2.0 及以后版本为 Trident+Webkit；\n\n#### 兼容模式\n\n国内很多的双核浏览器的其中一核便是 **Trident**，美其名曰 “兼容模式”。\n\n#### EdgeHTML 内核\n\nWindow10 发布后，IE 将其内置浏览器命名为 **Edge**，Edge 最显著的特点就是新内核 EdgeHTML。\n\n### Gecko ([‘gekəʊ])\n\n#### 开源内核\n\nGecko(Firefox 内核)：Netscape6 开始采用的内核，后来的 **Mozilla FireFox(火狐浏览器)** 也采用了该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。因为这是个**开源内核**，因此受到许多人的青睐，Gecko 内核的浏览器也很多，这也是 Gecko 内核虽然年轻但市场占有率能够迅速提高的重要原因。\n\n#### Firefox 内核\n\n事实上，Gecko 引擎的由来跟 IE 不无关系，前面说过 IE 没有使用 W3C 的标准，这导致了微软内部一些开发人员的不满；他们与当时已经停止更新了的 Netscape 的一些员工一起创办了 **Mozilla**，以当时的 Mosaic 内核为基础重新编写内核，于是开发出了 Gecko。不过事实上，Gecko 内核的浏览器仍然还是 **Firefox (火狐) 用户最多**，所以有时也会被称为 **Firefox 内核**。此外 Gecko 也是一个**跨平台内核**，可以在 Windows、 BSD、Linux 和 Mac OS X 中使用。\n\n### Webkit\n\n#### Safari 浏览器\n\n只要提到 Webkit，大多数人立马想到的必然是 Chrome，结果导致如今有了把 webkit 称为 chrome 内核的错误说法，即使 chrome 的内核已经是 blink，其实 **Webkit 的祖先是 Safari**，也就是苹果系列产品的专属浏览器。\n\n#### WebKit 是 KHTML 的分支\n\nWebKit 的前身是苹果公司使用 KDE（Linux 桌面系统）开发的 **KHTML** 开源引擎，可以说 WebKit 是 KHTML 的一个开源分支。\n\n### Chromium/Blink\n\n#### Chromium Fork webkit\n\n2008 年，谷歌公司发布了 chrome 浏览器，浏览器使用的内核被命名为 **chromium**。chromium **fork 自开源引擎 webkit**，并提高了 WebKit 的代码可读性和编译速度。\n\n#### V8 引擎\n\n谷歌公司还研发了自己的 Javascript 引擎，V8，极大地**提高了 Javascript 的运算速度**。\n\n#### Blink 是 WebKit 的分支\n\nGoogle 的 Chromium 项目**最初**一直使用 WebKit(WebCore) 作为渲染引擎，但由于后来苹果推出的 **WebKit2** 与 Chromium 的沙箱设计存在冲突，所以 Google 决定从 WebKit 衍生出自己的 **Blink** 引擎（后由 Google 和 Opera Software 共同研发）。\n\nBlink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎，但出于某种原因，并没有将其多进程架构移植入 Webkit。\n\n后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。\n\n基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。这样以来，唯一一条维系 Google 和苹果之间技术关系的纽带就这样被切断了。\n\n### Presto ([‘prestəʊ])\n\n#### Opera 浏览器\n\nPresto 是 Opera **自主研发**的渲染引擎，然而为了减少研发成本，Opera 在 2013 年 2 月宣布放弃 Presto，转而跟随 Chrome 使用 WebKit 分支的 Chromium 引擎作为自家浏览器核心引擎。\n\n在 Chrome 于 2013 年推出 Blink 引擎之后，Opera 也紧跟其脚步表示将转而使用 Blink 作为浏览器核心引擎。\n\n### 移动端\n\n移动端的浏览器内核主要说的是**系统内置浏览器的内核**。\n\n目前移动设备浏览器上常用的内核有 **Webkit**，**Blink**，**Trident**，**Gecko** 。\n\n1、iPhone 和 iPad 等苹果 iOS 平台主要是 **WebKit**。\n\n2、**Android 4.4 之前**的 Android 系统浏览器内核是 **WebKit**，**Android 4.4** 系统浏览器切换到了 Chromium，内核是 Webkit 的分支 **Blink**。\n\n3、Windows Phone 8 系统浏览器内核是 **Trident**。\n\n## webkit 内核了解多少？（chrome 内核是 b-link）\n\n[深入剖析 webkit](https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/)\n\n## 微信 x5 内核和别的内核有什么差别？（x5 是基于 webkit 的）\n\n### 认识 X5\n\n- 腾讯基于优秀开源 Webkit 深度优化的浏览器渲染引擎\n- 为抹平不同 Android 版本不同 Webview 的坑而生。但本身也带来了许多坑。\n- 虽然官方不承认，但实际上它是基于 Chromuim 开源项目的。\n\n  webkit 内核以及 blink 内核在 x5 的使用情况\n\n- QQ 浏览器：6.2 版本及以后使用 blink 内核。\n- X5 tbs 1.x：版本号为 02xxxx，使用 webkit 内核。\n- X5 tbs 2.x：版本号为 03xxxx。使用 blink 内核。\n\n#### 拓展：Webkit & Chromuim &Chrome & Blink\n\n- **WebKit**是一个开源的项目，其前身是来源于 KDE 的 KHTML 和 KJS。该项目专注于网页内容的展示，开发出一流的网页渲染引擎。\n- **Chromium**是一个建立在 WebKit 之上的浏览器开源项目，由 Google 发起的。\n- ** Chrome**是 Google 公司的浏览器产品，它基于 chromium 开源项目。可以理解为，内核是开源的，UI 是闭源的。\n- **Blink**是 Google 退出 WebKit 项目，从而自己创建的渲染引擎。但并不是全新的引擎，Blink 目前就是从 WebKit 直接复制出一个版本出来，然后将与 chromium 无关的 Ports 全部移除掉，将代码结构重新整理，就目前而言，Blink 的渲染和 WebKit 是一样，但是，以后两者将各自走不同的路。\n\n### X5 升级了\n\n截至 16 年 4 月份，x5 升级全量发布。\nTBS2.0 基于 Android 5.0 WebView Blink 内核（M37 版本）适配定制优化，适配 Android 全部主流平台，可以在所有 Android 手机上使用 Blink 的技术能力。具有更好的 H5/CSS3 支持和性能。TBS2.0 已经发布，将逐步在各客户端中静默升级，无需更新微信、手机 QQ、QQ 空间即可使用最新的 TBS2.0 Blink 内核。\n\n更简洁地说，即是：\n\n- 基于 Blink 内核（chrome 37 版本）\n- 适用于 Android 全部主流平台\n- 静默升级\n\nPS：iOS 版本的微信 Web View 一直是 WKWebView 内核，WKWebView 的版本依赖于 iOS 的系统版本。\n\nTBS2.0 内核详情\n\n- BLINK 版本: 基于 Chrome 37\n- HTML 版本: HTML5.0\n- XHTML 版本: xHTML Basic 1.0 | xHTML1.1\n- SVG 版本: SVG1.2\n- WML 版本: Wml 1.0\n- CSS 版本: CSS3\n- Spdy 版本: 3.1\n- 支持的 JavaScript 版本: Ecma5\n\n### Changelog 以及 解读\n\n1.内核从 Webkit 升级至 Blink，拥有更好的支持\n\n那么哪里可以查阅兼容性呢？\n\n[X5 CanIUse](http://res.imtt.qq.com/tbs/incoming20160419/home.html)\n\n2.内核版本号升级到 362xx 版本。**可以根据 UserAgent**判断当前环境是否已升级到 TBS2.0 版本,包含（TBS/03xxxx）字段。\n\n那么怎么查看自己微信里的 TBS 版本？\n\n用微信打开[这个页面](http://motool.github.io/ua/)，检查 TBS 的版本号，0362xx 表示已更新。\n页面的代码只有两句，为：\n\n```javascript\n// 检测页面的核心代码\nvar resultDiv = document.getElementById(\"result\");\nresultDiv.innerHTML = window.navigator.userAgent;\n```\n\n3.CSS3 属性支持增强：\n\n- 完整支持 flex\n- 伪元素支持动画效果\n- filter: blur 有模糊效果\n\nPS：更多更具体的支持情况可查阅[这里](http://x5.tencent.com/guide?id=4000)\n\n4.autoplay 属性有效，可自动播放\n\n5.canvas 支持设置背景色\n\n6.标准的缓存策略，支持 Spdy 3.1\n\n7.动画性能提升\n\n8.更好的 inspector 支持\n\n- [微信远程调试解决方案——微信 web 开发者工具](https://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html#.E7.A7.BB.E5.8A.A8.E8.B0.83.E8.AF.95)\n- [手机 QQ 浏览器的远程调试解决方案](http://bbs.mb.qq.com/thread-227056-1-1.html?fid=93)\n\n参考资料：\n\n- [解读微信全面升级 X5 Blink 内核，H5 游戏行业重大利好](https://zhuanlan.zhihu.com/p/20812900)\n- [官方网站：腾讯浏览服务－技术指南](http://x5.tencent.com/guide?id=4000)\n\n### 总结\n\n#### 常用工具\n\n- [检测是否为 x5－TBS/03xxxx](http://motool.github.io/ua/)\n- [x5 的各项支持情况－X5 CanIUse](http://res.imtt.qq.com/tbs/incoming20160419/home.html)\n- [Android 下微信远程调试工具-微信 web 开发者工具](https://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html#.E7.A7.BB.E5.8A.A8.E8.B0.83.E8.AF.95)（PS:iOS 下使用 Safari 远程调试即可）\n\n#### 我们可以从中了解到什么\n\n一、工具方面：\n\n- 可以通过查询 UA 来检测是否为 X5－TBS/03xxxx，[在线检测地址](http://motool.github.io/ua/)\n- 想知道某个 CSS3 属性，或者其他 API 在 X5 是否支持的时候，可以查询[X5 CanIUse](http://res.imtt.qq.com/tbs/incoming20160419/home.html)\n- 远程调试微信内页面时，在 Android 下可以使用微信远程调试工具-微信 web 开发者工具，在 iOS 下使用 Safari 远程调试即可。\n\n二、对于开发调试页面\n\n- 目前，暂时还没有查找到 X5 在微信 android 客户端的版本分布情况的数据(可能是由于 X5 tbs2.0 是今年 4 月份初才开始全量发布的)。\n- 虽然说，X5 是静默升级，无需用户手动更新，基本上都实现升级为最新版本(业界说法)，但**仍存在 X5 内核是旧版本的情况**(根据是部分测试的检测 UA 结果)。希望能够在后续的日子可以获取到相关的数据。\n- 手机同时安装了 QQ 浏览器和微信，但 QQ 浏览器内核版本**不等于**微信内核版本，**只有在 QQ 浏览器内核为大于等于 6.2 版本才是 Blink 内核，调试页面的结果才可以替代在微信内页面调试的结果**（想要不登陆微信用 QQ 浏览器来替代调试的需要注意下\n\n### X5 的版本分布情况\n\n据腾讯内部的小伙伴告知，x5 内核基本覆盖理论上达到 100%，但难免会有漏网之鱼。而根据实际数据抽样整理显示，截至 2016 年 5 月 19 日，x5 内核基本覆盖率达到 91.47%。\n\n### [X5 问题汇总](https://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/)\n","tags":["浏览器"],"categories":["浏览器"]},{"title":"leetcode算法刷题笔记（一）——数组","url":"/2018/12/19/leetcode算法刷题笔记（一）——数组/","content":"\n_该笔记只为个人所写算法，不一定是最优解法，仅供参考_\n\n# [1] Two Sum\n\nGiven an array of integers, return indices of the two numbers such that they add up to a specific target.\n难度：Easy (42.36%)\n考点：哈希表\n思路：用一遍循环 一边向哈希表中存值，一边比较判断\n\n<!-- more -->\n\n```javascript\nvar twoSum = function(nums, target) {\n  var map = {};\n  for (i = 0; i < nums.length; i++) {\n    const complement = target - nums[i];\n    if (complement in map) {\n      return [i, map[complement]];\n    }\n    map[nums[i]] = i;\n  }\n  return -1;\n};\n```\n\n# [11] Container With Most Water\n\nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\nNote: You may not slant the container and n is at least 2.\n难度：Medium (42.93%)\n考点：动态规划\n思路：\n\n1. 设定 i，j 分别指向数组的头和尾\n2. 比较 i，j 所对应的位置的值，值较小的那一个移动（i++或 j--）\n\n```javascript\nvar maxArea = function(height) {\n  var maxArea = 0;\n  var i = 0;\n  var j = height.length - 1;\n  while (i < j) {\n    const long = Math.min(height[i], height[j]);\n    const area = long * (j - i);\n    if (area > maxArea) {\n      maxArea = area;\n    }\n    if (height[i] < height[j]) {\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return maxArea;\n};\n```\n\n# [15] 3Sum\n\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote: The solution set must not contain duplicate triplets.\n难度：Medium (23.55%)\n思路：\n\n1. 数组排序（升序）\n2. 设定三个指针，最外层循环从 0 开始，到数组的尾结束（i=0）\n3. 第二层循环，一个指向上一个指针的下一个元素（j=i+1），另一个指向数组的尾部(k=nums.length-1)\n4. 如果三个元素之和等于 0，则 push 进要返回的数组中；如果三个元素之和大于 0，说明第三个指针指向的元素过大，则第三个指针向前移(k--);如果三个元素之和小于 0，说明第二个指针指向的元素过小，则第二个指针向后移(j++);\n\n```javascript\nvar threeSum = function(nums) {\n  var rtn = [];\n  if (nums.length < 3) {\n    return rtn;\n  }\n  nums = nums.sort(function(a, b) {\n    return a - b;\n  });\n  for (var i = 0; i < nums.length - 1; i++) {\n    if (nums[i] > 0) {\n      return rtn;\n    }\n    if (i > 0 && nums[i] == nums[i - 1]) {\n      continue;\n    }\n\n    for (var j = i + 1, k = nums.length - 1; j < k; ) {\n      if (nums[i] + nums[j] + nums[k] === 0) {\n        rtn.push([nums[i], nums[j], nums[k]]);\n        j++;\n        k--;\n        while (j < k && nums[j] == nums[j - 1]) {\n          j++;\n        }\n        while (j < k && nums[k] == nums[k + 1]) {\n          k--;\n        }\n      } else if (nums[i] + nums[j] + nums[k] > 0) {\n        k--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return rtn;\n};\n```\n\n# [16] 3Sum Closest\n\nGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n难度：Medium (41.40%)\n思路：与上题类似\n\n```javascript\nvar threeSumClosest = function(nums, target) {\n  var sum;\n  if (nums.length < 3) {\n    return sum;\n  }\n  nums = nums.sort(function(a, b) {\n    return a - b;\n  });\n  var sum = nums[0] + nums[1] + nums[2];\n  var distance = Math.abs(sum - target);\n  for (var i = 0; i < nums.length - 2; i++) {\n    for (var j = i + 1, k = nums.length - 1; j < k; ) {\n      if (Math.abs(nums[i] + nums[j] + nums[k] - target) < distance) {\n        sum = nums[i] + nums[j] + nums[k];\n        distance = Math.abs(sum - target);\n      }\n      if (nums[i] + nums[j] + nums[k] === target) {\n        break;\n      }\n      if (nums[i] + nums[j] + nums[k] > target) {\n        k--;\n      } else if (nums[i] + nums[j] + nums[k] < target) {\n        j++;\n      }\n    }\n  }\n  return sum;\n};\n```\n\n# [18] 4Sum\n\nGiven an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\nNote: The solution set must not contain duplicate quadruplets.\n难度：Medium (29.83%)\n思路：思路同 3Sum，多一层循环。注意跳过相同的数（最外两层的循环变量）\n\n```javascript\nvar fourSum = function(nums, target) {\n  var rtn = [];\n  if (nums.length < 4) {\n    return rtn;\n  }\n  nums = nums.sort(function(a, b) {\n    return a - b;\n  });\n  for (var m = 0; m < nums.length - 3; m++) {\n    var complement = target - nums[m];\n    for (var i = m + 1; i < nums.length - 2; i++) {\n      for (var j = i + 1, k = nums.length - 1; j < k; ) {\n        if (nums[i] + nums[j] + nums[k] === complement) {\n          rtn.push([nums[m], nums[i], nums[j], nums[k]]);\n          j++;\n          k--;\n          while (j < k && nums[j] == nums[j - 1]) {\n            j++;\n          }\n          while (j < k && nums[k] == nums[k + 1]) {\n            k--;\n          }\n        } else if (nums[i] + nums[j] + nums[k] > complement) {\n          k--;\n        } else {\n          j++;\n        }\n        if (i < nums.length - 1 && nums[i] == nums[i + 1]) {\n          ++i;\n        }\n      }\n      if (m < nums.length - 1 && nums[m] == nums[m + 1]) {\n        ++m;\n      }\n    }\n  }\n  return rtn;\n};\n```\n\n# [26] Remove Duplicates from Sorted Array\n\nGiven a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n难度：Easy (39.80%)\n思路：两个指针，一个指针负责寻找和后一个不相等的数，另一个指针负责一步步向后移去重。\n\n```javascript\nvar removeDuplicates = function(nums) {\n  if (nums.length == 0) {\n    return 0;\n  }\n  var i = 0;\n  var j = 0;\n  for (i = 0; i < nums.length - 1; ) {\n    if (nums[i] === nums[i + 1]) {\n      i++;\n    } else {\n      if (i !== j) {\n        nums[j + 1] = nums[i + 1];\n      }\n      j++;\n      i++;\n    }\n  }\n  nums = nums.slice(0, j + 1);\n  return nums.length;\n};\n```\n\n# [27] Remove Element\n\nGiven an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\n难度：Easy (43.73%)\n思路：找到和 val 值相等的位置，将数组最后一个元素赋值过来（去掉这个 val，数组长度减一）\n\n```javascript\nvar removeElement = function(nums, val) {\n  var i = 0;\n  var n = nums.length;\n  for (i = 0; i < n; ) {\n    if (nums[i] == val) {\n      nums[i] = nums[n - 1];\n      n--;\n    } else {\n      i++;\n    }\n  }\n  return n;\n};\n```\n\n# [31] Next Permutation\n\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\nThe replacement must be in-place and use only constant extra memory.\nHere are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n难度：Medium (30.09%)\n思路：\n\n1. 从后向前比较相邻的两个元素，直到前一个元素小于后一个元素，停止（i）。\n2. 若已经没有了前一个元素（i=0），则该序列为递减序列，没有 Next Permutation。按照题目要求，直接反转序列。\n3. 前一个元素（j=i-1）小于后一个元素（i），找到前一个元素（j）要交换的元素，从 i 的后一个元素开始往后查找，找到最后一个比“前一个元素（j）”大的元素（k），也就是再往后的元素，就比元素 j 小了。交换 j 和 k 元素。\n4. 从 i 开始，包括 i 到序列的尾部，反转。\n   则得出的即是 Next Permutation\n\n```javascript\nvar nextPermutation = function(nums) {\n  var i = nums.length - 1;\n  while (nums[i] <= nums[i - 1]) {\n    i--;\n  }\n  if (i !== 0) {\n    var j = i - 1;\n    var k = i + 1;\n    while (nums[j] < nums[k]) {\n      k++;\n    }\n    var temp = nums[k - 1];\n    nums[k - 1] = nums[j];\n    nums[j] = temp;\n    for (var m = i, n = nums.length - 1; m < n; m++, n--) {\n      var temp = nums[n];\n      nums[n] = nums[m];\n      nums[m] = temp;\n    }\n  } else {\n    nums = nums.reverse();\n  }\n};\n```\n\n# [33] Search in Rotated Sorted Array\n\nSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\nYou may assume no duplicate exists in the array.\nYour algorithm's runtime complexity must be in the order of O(log n).\n难度：Medium (32.68%)\n考点：二分法\n注意：判断和循环的边界条件\n\n```javascript\nvar search = function(nums, target) {\n  if (nums.length == 0) {\n    return -1;\n  }\n  var start = 0;\n  var end = nums.length - 1;\n  while (start <= end) {\n    var middle = parseInt((start + end) / 2);\n    if (nums[middle] == target) {\n      return middle;\n    }\n    if (nums[middle] > nums[end]) {\n      if (target >= nums[start] && target < nums[middle]) {\n        end = middle - 1;\n      } else {\n        start = middle + 1;\n      }\n    } else {\n      if (target > nums[middle] && target <= nums[end]) {\n        start = middle + 1;\n      } else {\n        end = middle - 1;\n      }\n    }\n  }\n  return -1;\n};\n```\n\n# [34] Find First and Last Position of Element in Sorted Array\n\nGiven an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\nYour algorithm's runtime complexity must be in the order of O(log n).\nIf the target is not found in the array, return [-1, -1].\n难度：Medium (33.06%)\n考点：二分法\n注意：判断和循环的边界条件\n\n```javascript\nvar searchRange = function(nums, target) {\n  if (nums.length == 0) {\n    return [-1, -1];\n  }\n  var startFind = 0;\n  var endFind = nums.length - 1;\n  var start;\n  var end;\n  while (startFind <= endFind) {\n    var mid = parseInt((startFind + endFind) / 2);\n    if (nums[mid] == target) {\n      start = mid;\n      end = mid;\n      while (nums[start - 1] == target || nums[end + 1] == target) {\n        if (nums[start - 1] == target) {\n          start--;\n        }\n        if (nums[end + 1] == target) {\n          end++;\n        }\n      }\n      return [start, end];\n    } else if (nums[mid] < target) {\n      startFind = mid + 1;\n    } else {\n      endFind = mid - 1;\n    }\n  }\n  return [-1, -1];\n};\n```\n\n# [35] Search Insert Position\n\nGiven a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\n难度：Easy (40.50%)\n\n```javascript\nvar searchInsert = function(nums, target) {\n  if (nums.length == 0) {\n    return 0;\n  }\n  let out = nums.indexOf(target);\n  if (out == -1) {\n    let i = 0;\n    for (; target > nums[i]; i++) {}\n    out = i;\n  }\n  return out;\n};\n```\n\n# [39] Combination Sum\n\nGiven a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\nThe same repeated number may be chosen from candidates unlimited number of times.\nNote:All numbers (including target) will be positive integers.The solution set must not contain duplicate combinations.\n难度：Medium (46.97%)\n考点：递归\n\n```javascript\nvar combinationSum = function(candidates, target) {\n  var rt = [];\n  var solution = [];\n  if (candidates.length == 0) {\n    return rt;\n  }\n  candidates = candidates.sort(function(a, b) {\n    return a - b;\n  });\n  sarch(0, target);\n\n  function sarch(start, target) {\n    if (start == candidates.length) {\n      return;\n    }\n    if (target == 0) {\n      return rt.push(solution.slice());\n    }\n    if (target < 0) {\n      return;\n    }\n    solution.push(candidates[start]);\n    sarch(start, target - candidates[start]);\n    solution.pop();\n    sarch(start + 1, target);\n  }\n  return rt;\n};\n```\n\n# [40] Combination Sum II\n\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\nEach number in candidates may only be used once in the combination.\nNote:All numbers (including target) will be positive integers.The solution set must not contain duplicate combinations.\n难度：Medium (40.37%)\n考点：递归\n注意：限制边界条件，过滤重复的结果\n\n```javascript\nvar combinationSum2 = function(candidates, target) {\n  var rt = [];\n  var solution = [];\n  if (candidates.length == 0) {\n    return rt;\n  }\n  candidates = candidates.sort(function(a, b) {\n    return a - b;\n  });\n  search(0, target);\n  return rt;\n\n  function search(start, target) {\n    if (target === 0 && start === candidates.length) {\n      return rt.push(solution.slice());\n    }\n    if (target < 0 || start === candidates.length) {\n      return;\n    }\n\n    solution.push(candidates[start]);\n    search(start + 1, target - candidates[start]);\n    solution.pop();\n    if (solution[solution.length - 1] !== candidates[start]) {\n      search(start + 1, target);\n    }\n  }\n};\n```\n","tags":["JavaScript","算法","LeetCode","数组"],"categories":["算法"]},{"title":"webpack基础知识（二）","url":"/2018/12/05/webpack基础知识（二）/","content":"\n## 代码分离\n\n代码分离是 webpack 中最引人注目的特性之一。此特性能够把代码分离到不同的 bundle 中，然后可以按需加载或并行加载这些文件。代码分离可以用于获取更小的 bundle，以及控制资源加载优先级，如果使用合理，会极大影响加载时间。\n\n有三种常用的代码分离方法：\n\n1. 入口起点：使用 entry 配置手动地分离代码。\n2. 防止重复：使用 CommonsChunkPlugin 去重和分离 chunk。\n3. 动态导入：通过模块的内联函数调用来分离代码。\n\n<!-- more -->\n\n### 入口起点(entry points)\n\n问题：\n\n1. 如果入口 chunks 之间包含重复的模块，那些重复模块都会被引入到各个 bundle 中。\n2. 这种方法不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码。\n\n### 防止重复(prevent duplication)\n\nCommonsChunkPlugin 插件可以将公共的依赖模块提取到已有的入口 chunk 中，或者提取到一个新生成的 chunk。\n使用这个插件，可将重复的 lodash 模块去除。\n需要注意的是，CommonsChunkPlugin 插件将 lodash 分离到单独的 chunk，并且将其从 main bundle 中移除，减轻了大小。\n\n以下是由社区提供的，一些对于代码分离很有帮助的插件和 loaders：\n\n1. ExtractTextPlugin: 用于将 CSS 从主应用程序中分离。\n2. bundle-loader: 用于分离代码和延迟加载生成的 bundle。\n3. promise-loader: 类似于 bundle-loader ，但是使用的是 promises。\n\nCommonsChunkPlugin 插件还可以通过使用显式的 vendor chunks 功能，从应用程序代码中分离 vendor 模块。\n\n### 动态导入(dynamic imports)\n\n当涉及到动态代码拆分时，webpack 提供了两个类似的技术。对于动态导入，第一种，也是优先选择的方式是，使用符合 ECMAScript 提案 的 import() 语法。第二种，则是使用 webpack 特定的 require.ensure。\n\n## 懒加载\n\n懒加载或者按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。\n\n## 缓存\n\n我们使用 webpack 来打包我们的模块化后的应用程序，webpack 会生成一个可部署的 /dist 目录，然后把打包后的内容放置在此目录中。只要 /dist 目录中的内容部署到服务器上，客户端（通常是浏览器）就能够访问网站此服务器的网站及其资源。而最后一步获取资源是比较耗费时间的。因此我们使用缓存技术。\n以通过命中缓存，以降低网络流量，使网站加载速度更快，然而，如果我们在部署新版本时不更改资源的文件名，浏览器可能会认为它没有被更新，就会使用它的缓存版本。由于缓存的存在，当你需要获取新的代码时，就会显得很棘手。\n所以需要通过必要的配置，以确保 webpack 编译生成的文件能够被客户端缓存，而在文件内容变化后，能够请求到新的文件。\n\n### 输出文件的文件名(Output Filenames)\n\n通过使用 output.filename 进行文件名替换，可以确保浏览器获取到修改后的文件。[hash] 替换可以用于在文件名中包含一个构建相关(build-specific)的 hash，但是更好的方式是使用 [chunkhash] 替换，在文件名中包含一个 chunk 相关(chunk-specific)的哈希。\n\n### 提取模板(Extracting Boilerplate)\n\nCommonsChunkPlugin 可以用于将模块分离到单独的文件中，还能够在每次修改后的构建结果中，将 webpack 的样板(boilerplate)和 manifest 提取出来。通过指定 entry 配置中未用到的名称，此插件会自动将我们需要的内容提取到单独的包中：\n\n```javascript\nconst path = require('path');\n+ const webpack = require('webpack');\n  const CleanWebpackPlugin = require('clean-webpack-plugin');\n  const HtmlWebpackPlugin = require('html-webpack-plugin');\n\n  module.exports = {\n    entry: './src/index.js',\n    plugins: [\n      new CleanWebpackPlugin(['dist']),\n      new HtmlWebpackPlugin({\n        title: 'Caching'\n-     })\n+     }),\n+     new webpack.optimize.CommonsChunkPlugin({\n+       name: 'manifest'\n+     })\n    ],\n    output: {\n      filename: '[name].[chunkhash].js',\n      path: path.resolve(__dirname, 'dist')\n    }\n  };\n```\n\n将第三方库(library)（例如 lodash 或 react）提取到单独的 vendor chunk 文件中，是比较推荐的做法，这是因为，它们很少像本地的源代码那样频繁修改。因此通过实现以上步骤，利用客户端的长效缓存机制，可以通过命中缓存来消除请求，并减少向服务器获取资源，同时还能保证客户端代码和服务器端代码版本一致。\n\n### 模块标识符(Module Identifiers)\n\n每个 module.id 会基于默认的解析顺序(resolve order)进行增量。也就是说，当解析顺序发生变化，ID 也会随之改变。\n\n可以使用两个插件来解决这个问题。第一个插件是 NamedModulesPlugin，将使用模块的路径，而不是数字标识符。虽然此插件有助于在开发过程中输出结果的可读性，然而执行时间会长一些。第二个选择是使用 HashedModuleIdsPlugin，推荐用于生产环境构建。\n\n## library\n\n可以通过以下方式暴露 library：\n\n1. 变量：作为一个全局变量，通过 script 标签来访问（libraryTarget:'var'）。\n2. this：通过 this 对象访问（libraryTarget:'this'）。\n3. window：通过 window 对象访问，在浏览器中（libraryTarget:'window'）。\n4. UMD：在 AMD 或 CommonJS 的 require 之后可访问（libraryTarget:'umd'）。\n   如果设置了 library 但没设置 libraryTarget，则 libraryTarget 默认为 var\n\n## shimming\n\n一些第三方的库(library)可能会引用一些全局依赖（例如 jQuery 中的 \\$）。这些库也可能创建一些需要被导出的全局变量。这些“不符合规范的模块”就是 shimming 发挥作用的地方。\n\n### shimming 全局变量\n\n使用 ProvidePlugin 后，能够在通过 webpack 编译的每个模块中，通过访问一个变量来获取到 package 包。如果 webpack 知道这个变量在某个模块中被使用了，那么 webpack 将在最终 bundle 中引入我们给定的 package。\n我们还可以使用 ProvidePlugin 暴露某个模块中单个导出值，只需通过一个“数组路径”进行配置（例如 [module, child, ...children?]）\n\nsrc/index.js\n\n```javascript\n  function component() {\n    var element = document.createElement('div');\n\n-   element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n+   element.innerHTML = join(['Hello', 'webpack'], ' ');\n\n    return element;\n  }\n\n  document.body.appendChild(component());\n```\n\nwebpack.config.js\n\n```javascript\n  const path = require('path');\n  const webpack = require('webpack');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n-       _: 'lodash'\n+       join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n这样，无论 join 方法在何处调用，我们都只会得到的是 lodash 中提供的 join 方法。与 tree shaking 配合，能够很好的将 lodash 库中的其他没用到的部分去除。\n\n### 细粒度 shimming\n\n一些传统的模块依赖的 this 指向的是 window 对象。当模块运行在 CommonJS 环境下这将会变成一个问题，也就是说此时的 this 指向的是 module.exports。\n此时，可以通过使用 imports-loader 覆写 this：\n\n```javascript\n  const path = require('path');\n  const webpack = require('webpack');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n+   module: {\n+     rules: [\n+       {\n+         test: require.resolve('index.js'),\n+         use: 'imports-loader?this=>window'\n+       }\n+     ]\n+   },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n### 全局 exports\n\n使用 exports-loader，将一个全局变量作为一个普通的模块来导出。\n\n```javascript\n  const path = require('path');\n  const webpack = require('webpack');\n\n  module.exports = {\n    entry: './src/index.js',\n    output: {\n      filename: 'bundle.js',\n      path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: require.resolve('index.js'),\n          use: 'imports-loader?this=>window'\n-       }\n+       },\n+       {\n+         test: require.resolve('globals.js'),\n+         use: 'exports-loader?file,parse=helpers.parse'\n+       }\n      ]\n    },\n    plugins: [\n      new webpack.ProvidePlugin({\n        join: ['lodash', 'join']\n      })\n    ]\n  };\n```\n\n## 渐进式网络应用程序\n\n渐进式网络应用程序(Progressive Web Application - PWA)，是一种可以提供类似于原生应用程序(native app)体验的网络应用程序(web app)。PWA 可以用来做很多事。其中最重要的是，在离线(offline)时应用程序能够继续运行功能。这是通过使用名为 Service Workers 的网络技术来实现的。\n\n1. 添加 Workbox\n2. 注册 Service Worker\n\n停止服务器并刷新页面。如果浏览器能够支持 Service Worker，你应该可以看到你的应用程序还在正常运行。然而，服务器已经停止了服务，此刻是 Service Worker 在提供服务。\n\n## 构建性能\n\n### chunks\n\n减少编译的整体大小，以提高构建性能。尽量保持 chunks 小巧。\n\n1. 使用 更少/更小 的库。\n2. 在多页面应用程序中使用 CommonsChunksPlugin。\n3. 在多页面应用程序中以 async 模式使用 CommonsChunksPlugin 。\n4. 移除不使用的代码。\n5. 只编译你当前正在开发部分的代码。\n\n最小化入口 chunk\nwebpack 只会在文件系统中生成已经更新的 chunk 。对于某些配置选项(HMR, [name]/[chunkhash] in output.chunkFilename, [hash])来说，除了更新的 chunks 无效之外，入口 chunk 也不会生效。\n应当在生成入口 chunk 时，尽量减少入口 chunk 的体积，以提高性能。下述代码块将只提取包含 runtime 的 chunk ，其他 chunk 都作为子模块:\n\n```javascript\nnew CommonsChunkPlugin({\n  name: \"manifest\",\n  minChunks: Infinity\n});\n```\n\n### Worker Pool\n\nthread-loader 可以将非常消耗资源的 loaders 转存到 worker pool 中\n\n### 持久化缓存\n\n使用 cache-loader 启用持久化缓存。使用 package.json 中的 \"postinstall\" 清除缓存目录。\n\n### Dlls\n\n使用 DllPlugin 将更改不频繁的代码进行单独编译。这将改善引用程序的编译速度，即使它增加了构建过程的复杂性。\n\n## 公共路径(public path)\n\nwebpack 提供一个非常有用的配置，该配置能帮助你为项目中的所有资源指定一个基础路径。它被称为公共路径(publicPath)。\nwebpack 提供一个全局变量供你设置，它名叫 **webpack_public_path**\n\n```javascript\n__webpack_public_path__ = process.env.ASSET_PATH;\n```\n","tags":["webpack"],"categories":["前端工具"]},{"title":"webpack基础知识（一）","url":"/2018/11/25/webpack基础知识（一）/","content":"\n# 基本概念\n\nwebpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。\n通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的，会以正确顺序执行的 bundle。\n\n<!-- more -->\n\n## 依赖图(dependency graph)\n\n任何时候，一个文件依赖于另一个文件，webpack 就把此视为文件之间有 依赖关系 。这使得 webpack 可以接收非代码资源(non-code asset)（例如图像或 web 字体），并且可以把它们作为 _依赖_ 提供给你的应用程序。\n\nwebpack 从命令行或配置文件中定义的一个模块列表开始，处理你的应用程序。 从这些 入口起点 开始，webpack 递归地构建一个 依赖图 ，这个依赖图包含着应用程序所需的每个模块，然后将所有这些模块打包为少量的 bundle - 通常只有一个 - 可由浏览器加载。\n\n## 入口\n\n入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。\n每个依赖项随即被处理，最后输出到称之为 bundles 的文件中。\n\n```javascript\nmodule.exports = {\n  entry: \"./path/to/my/entry/file.js\"\n};\n```\n\n入口配置支持：\n\n1. 单个入口语法\n   注：向 entry 传入一个「文件路径(file path)数组」时将创建“多个主入口(multi-main entry)”。在你想要多个依赖文件一起注入，并且将它们的依赖导向(graph)到一个“chunk”时，传入数组的方式就很有用。\n2. 对象语法\n   这是应用程序中定义入口的最可扩展的方式。\n\n## 出口(output)\n\noutput 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中指定一个 output 字段，来配置这些处理过程：\n\n```javascript\nconst path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./path/to/my/entry/file.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: \"my-first-webpack.bundle.js\"\n  }\n};\n```\n\nfilename 用于输出文件的文件名。目标输出目录 path 的绝对路径。\n\n注：如果配置创建了多个单独的 \"chunk\"（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。\n\n设定 HtmlWebpackPlugin，虽然在 dist/ 文件夹我们已经有 index.html 这个文件，然而 HtmlWebpackPlugin 还是会默认生成 index.html 文件。这就是说，它会用新生成的 index.html 文件，把我们的原来的替换。\n\n### 使用 source map\n\n当 webpack 打包源代码时，可能会很难追踪到错误和警告在源代码中的原始位置。例如，如果将三个源文件（a.js, b.js 和 c.js）打包到一个 bundle（bundle.js）中，而其中一个源文件包含一个错误，那么堆栈跟踪就会简单地指向到 bundle.js。\n为了更容易地追踪错误和警告，JavaScript 提供了 source map 功能，将编译后的代码映射回原始源代码。如果一个错误来自于 b.js，source map 就会明确的告诉你。\n\n## loader\n\nloader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n\n本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。\n\n### 在 webpack 的配置中 loader 有两个目标：\n\n1. test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。\n2. use 属性，表示进行转换时，应该使用哪个 loader。\n\n```javascript\nconst path = require(\"path\");\n\nconst config = {\n  output: {\n    filename: \"my-first-webpack.bundle.js\"\n  },\n  module: {\n    rules: [{ test: /\\.txt$/, use: \"raw-loader\" }]\n  }\n};\n\nmodule.exports = config;\n```\n\n### 在你的应用程序中，有三种使用 loader 的方式：\n\n1. 配置（推荐）：在 webpack.config.js 文件中指定 loader。\n   module.rules 允许你在 webpack 配置中指定多个 loader。 这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览\n2. 内联：在每个 import 语句中显式指定 loader。\n   可以在 import 语句或任何等效于 \"import\" 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。\n3. CLI：在 shell 命令中指定它们。\n\n### loader 特性：\n\n1. loader 支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。\n2. loader 可以是同步的，也可以是异步的。\n3. loader 运行在 Node.js 中，并且能够执行任何可能的操作。\n4. loader 接收查询参数。用于对 loader 传递配置。\n5. loader 也能够使用 options 对象进行配置。\n6. 除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。\n7. 插件(plugin)可以为 loader 带来更多特性。\n8. loader 能够产生额外的任意文件。\n\n## 插件(plugins)\n\nloader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n插件目的在于解决 loader 无法实现的其他事。\n\n```javascript\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\"); // 通过 npm 安装\nconst webpack = require(\"webpack\"); // 用于访问内置插件\n\nconst config = {\n  module: {\n    rules: [{ test: /\\.txt$/, use: \"raw-loader\" }]\n  },\n  plugins: [new HtmlWebpackPlugin({ template: \"./src/index.html\" })]\n};\n\nmodule.exports = config;\n```\n\n### 用法：\n\n用 require（）引入\n由于插件可以携带参数/选项，你必须在 webpack 配置中，向 plugins 属性传入 new 实例。\n\n## 模式\n\n提供 mode 配置选项，告知 webpack 使用相应模式的内置优化。\n通过选择 development 或 production 之中的一个，来设置 mode 参数，可以启用相应模式下的 webpack 内置的优化\n\n### 用法：\n\n1. 只在配置中提供 mode 选项：\n\n```javascript\nmodule.exports = {\n  mode: \"production\"\n};\n```\n\n2. 从 CLI 参数中传递：\n\n```javascript\nwebpack --mode=production\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j6u0wvurj30k5072glt.jpg)\n\n## 模块热替换(hot module replacement)\n\n模块热替换(HMR - Hot Module Replacement)功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面。主要是通过以下几种方式，来显著加快开发速度：\n\n1. 保留在完全重新加载页面时丢失的应用程序状态。\n2. 只更新变更内容，以节省宝贵的开发时间。\n3. 调整样式更加快速 - 几乎相当于在浏览器调试器中更改样式。\n\n## tree shaking\n\n通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)。它依赖于 ES2015 模块系统中的静态结构特性，例如 import 和 export。\n\n如果所有代码都不包含副作用，我们就可以简单地将 package.json 的 \"sideEffects\" 属性标记为 false，来告知 webpack，它可以安全地删除未用到的 export 导出。\n注：「副作用」的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。\n\n如果你的代码确实有一些副作用，那么可以改为提供一个数组：\n\n```javascript\n{\n  \"name\": \"your-project\",\n  \"sideEffects\": [\n    \"./src/some-side-effectful-file.js\"\n  ]\n}\n```\n\n数组方式支持相关文件的相对路径、绝对路径和 glob 模式。它在内部使用 micromatch。\n\n注意，任何导入的文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 css-loader 并导入 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除。\n\n从 webpack 4 开始，也可以通过 \"mode\" 配置选项轻松切换到压缩输出，只需设置为 \"production\"。\n","tags":["webpack"],"categories":["前端工具"]},{"title":"React组件","url":"/2018/11/11/React组件/","content":"\n# Web Copmpoents\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j6p2nvl3j314i0oqgm8.jpg)\n\n# React 组件\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j6p1c7t9j31am0gejro.jpg)\n\nReact 组件：\n\n1. 自定义元素是库自己构建的\n2. 渲染过程包含了模版的概念\n3. 实现均在方法与类中，相互隔离（不包括样式）\n4. 引用方式遵循 ES6\n\n构建：\n\n1. React 方式：creatClass\n2. ES6 方式：class\n3. 无状态函数\n\n# React 底层——合成事件\n\n## 事件委派\n\n把事件处理函数绑定到结构的最外层，使用一个统一的事件监听器。（不会把事件处理函数直接绑定到真实的节点上）\n\n<!-- more -->\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j6p4jv10j31b20tmjse.jpg)\n\n## 自动绑定\n\n每个方法的上下文都会指向该组件的实例——自动绑定 this 为当前组件。React 会对这种引用进行缓存，达到 CPU 内存最优。（使用 ES6 class 或纯函数时，自动绑定不复存在，需要手动绑定 this）\n\n1. bind 绑定\n   绑定事件处理器内的 this，并可以向事件处理器中传参\n\n2. 构造器内声明\n   好处：仅需进行一次绑定\n\n3. 箭头函数\n   箭头函数自动绑定了定义此函数作用域的 this，因此不需要再用 bind 绑定\n\n注意：React 中使用 DOM 原生事件，一定要在组件卸载时手动移除，否则内存泄漏。使用合成事件则不需要。\n\n# React 合成事件与 JS 原生事件对比\n\n原生 DOM 事件传播 3 个阶段：事件捕获阶段、目标对象本身的事件处理程序调用，以及事件冒泡。\n\n1. 事件捕获阶段会优先调用结构树最外层的元素上绑定的事件侦听器，依次向内调用，一直调用到目标元素上的事件监听器为止。\n\n```javascript\ne.addEventListener(\"click\", () => {}, false);\n```\n\n第三个参数，若传 true，为元素 e 注册捕获事件处理程序，并且在事件捕获阶段调用。\n\n2. 事件冒泡与事件捕获相反，它会从目标元素向外传播，由内而外。\n   React 的合成事件仅支持事件冒泡\n   阻止原生事件冒泡用 e.preventDefault()\n\n# React 受控组件更新 state 的流程\n\n1. 可以通过在初始 state 中设置表单的默认值\n2. 每当表单的值发生变化时，调用 onchange 事件处理器\n3. 事件处理器通过合成事件对象 e 拿到改变后的状态，并更行应用的 state\n4. setState 触发视图的重新渲染，完成表单的组件值更新\n\n# React 非受控组件\n\n是一种反模式，他的值不受组件自身的 state 或 props 控制。通常需要为其添加 ref prop 来访问渲染后的底层 DOM\n","tags":["React"],"categories":["React"]},{"title":"浏览器缓存位置","url":"/2018/11/01/浏览器缓存位置/","content":"\n# 浏览器缓存位置\n\n## 缓存位置\n\n从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。\n\n- Service Worker\n- Memory Cache\n- Disk Cache\n- Push Cache\n\n<!-- more -->\n\n### 1.Service Worker\n\nService Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以**必须使用 HTTPS 协议**来保障安全。**Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的**。\n\nService Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。\n\n当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。\n\n### 2.Memory Cache\n\nMemory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源, 例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快, 内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 **一旦我们关闭 Tab 页面，内存中的缓存也就被释放了**。\n\n那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？\n这是不可能的。计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。\n\n当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixm7cw74j30og04h0ta.jpg)\n\n内存缓存中有一块重要的缓存资源是 preloader 相关指令（例如`<link rel=\"prefetch\">`）下载的资源。众所周知 preloader 的相关指令已经是页面优化的常见手段之一，它可以一边解析 js/css 文件，一边网络请求下一个资源。\n\n需要注意的事情是，**内存缓存在缓存资源时并不关心返回资源的 HTTP 缓存头 Cache-Control 是什么值，同时资源的匹配也并非仅仅是对 URL 做匹配，还可能会对 Content-Type，CORS 等其他特征做校验**。\n\n### 3.Disk Cache\n\nDisk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，**比之 Memory Cache 胜在容量和存储时效性上**。\n\n在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache，关于 HTTP 的协议头中的缓存字段，我们会在下文进行详细介绍。\n\n**浏览器会把哪些文件丢进内存中？哪些丢进硬盘中？**\n关于这点，网上说法不一，不过以下观点比较靠得住：\n\n- 对于大文件来说，大概率是不存储在内存中的，反之优先；\n- 当前系统内存使用率高的话，文件优先存储进硬盘。\n\n### 4.Push Cache\n\nPush Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。**它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂**，在 Chrome 浏览器中只有 5 分钟左右，同时它也并非严格执行 HTTP 头中的缓存指令。\n\nPush Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及。这里推荐阅读`Jake Archibald`的 [HTTP/2 push is tougher than I thought](https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/) 这篇文章，文章中的几个结论：\n\n- 所有的资源都能被推送，并且能够被缓存, 但是 Edge 和 Safari 浏览器支持相对比较差；\n- 可以推送 no-cache 和 no-store 的资源；\n- 一旦连接被关闭，Push Cache 就被释放；\n- 多个页面可以使用同一个 HTTP/2 的连接，也就可以使用同一个 Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的 tab 标签使用同一个 HTTP 连接；\n- Push Cache 中的缓存只能被使用一次；\n- 浏览器可以拒绝接受已经存在的资源推送；\n- 你可以给其他域名推送资源。\n\n如果以上四种缓存都没有命中的话，那么只能发起请求来获取资源了。\n\n那么为了性能上的考虑，大部分的接口都应该选择好缓存策略，**通常浏览器缓存策略分为两种：强缓存和协商缓存，并且缓存策略都是通过设置 HTTP Header 来实现的**。\n\n## http 状态码与缓存策略\n\n### 200 from memory cache\n\n不访问服务器，直接读缓存，从内存中读取缓存。此时的数据时缓存到内存中的，当 kill 进程后，也就是浏览器关闭以后，数据将不存在。\n\n但是这种方式只能缓存派生资源\n\n### 200 from disk cache\n\n不访问服务器，直接读缓存，从磁盘中读取缓存，当 kill 进程时，数据还是存在。\n\n这种方式也只能缓存派生资源\n\n### 304 Not Modified\n\n访问服务器，发现数据没有\n\n更新，服务器返回此状态码。然后从缓存中读取数据。\n\n## 三级缓存原理\n\n1. 先去内存看，如果有，直接加载\n2. 如果内存没有，择取硬盘获取，如果有直接加载\n3. 如果硬盘也没有，那么就进行网络请求\n4. 加载到的资源缓存到硬盘和内存\n\n## 常见缓存情况\n\n1. 第一个现象：\n\n访问-> 200 -> 退出浏览器\n\n再进来-> 200(from disk cache) -> 刷新 -> 200(from memory cache)\n\n总结: 会不会是 chrome 很聪明的判断既然已经从 disk 拿来了， 第二次就内存拿吧 快。（笑哭)\n\n2. 第二个现象:\n\n只要图片是 base64 都是 from memroy cache。\n\n总结: 解析渲染图片这么费劲的事情，还是做一次然后放到内存吧。 用的时候直接拿\n\n3. 第三个现象(以 js css 为例):\n\n个人在做静态测试的发现，大型的 js css 文件都是直接 disk cache\n\n总结: chrome 会不会说 我擦 你这么大 太 JB 占地方了。 你就去硬盘里呆着吧。 慢就慢点吧。\n\n4. 第四个现象:\n\n隐私模式下，几乎都是 from memroy cache.\n\n总结: 隐私模式 是吧。 我不能暴露你东西。还是放到内存吧。 你关，我死。\n","tags":["浏览器","缓存"],"categories":["浏览器"]},{"title":"Proxy","url":"/2018/10/27/Proxy/","content":"\n# 概述\n\nES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。\n\n```javascript\nvar proxy = new Proxy(target, handler);\n```\n\nProxy 对象的所有用法，都是上面这种形式，不同的只是 handler 参数的写法。其中，new Proxy()表示生成一个 Proxy 实例，target 参数表示所要拦截的目标对象，handler 参数也是一个对象，用来定制拦截行为。\n\n<!-- more -->\n\n下面是一个拦截读取属性行为的例子。\n\n```javascript\nvar proxy = new Proxy(\n  {},\n  {\n    get: function(target, property) {\n      return 35;\n    }\n  }\n);\n\nproxy.time; // 35\nproxy.name; // 35\nproxy.title; // 35\n```\n\n上面代码中，作为构造函数，Proxy 接受两个参数。第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有 Proxy 的介入，操作原来要访问的就是这个对象；第二个参数是一个配置对象，对于每一个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作。比如，上面代码中，配置对象有一个 get 方法，用来拦截对目标对象属性的访问请求。get 方法的两个参数分别是目标对象和所要访问的属性。可以看到，由于拦截函数总是返回 35，所以访问任何属性都得到 35。<font color=\"#DC143C\">注意，要使得 Proxy 起作用，必须针对 Proxy 实例（上例是 proxy 对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。</font>如果 handler 没有设置任何拦截，那就等同于直接通向原对象。\n同一个拦截器函数，可以设置拦截多个操作。\n\n```javascript\nvar handler = {\n  get: function(target, name) {\n    if (name === \"prototype\") {\n      return Object.prototype;\n    }\n    return \"Hello, \" + name;\n  },\n\n  apply: function(target, thisBinding, args) {\n    return args[0];\n  },\n\n  construct: function(target, args) {\n    return { value: args[1] };\n  }\n};\n\nvar fproxy = new Proxy(function(x, y) {\n  return x + y;\n}, handler);\n\nfproxy(1, 2); // 1\nnew fproxy(1, 2); // {value: 2}\nfproxy.prototype === Object.prototype; // true\nfproxy.foo === \"Hello, foo\"; // true\n```\n\n# Proxy 支持的拦截操作一览\n\nProxy 支持的拦截操作一览，一共 13 种。\n\n## get(target, propKey, receiver)\n\n拦截对象属性的读取，比如 proxy.foo 和 proxy['foo']。\n\n## set(target, propKey, value, receiver)\n\n拦截对象属性的设置，比如 proxy.foo = v 或 proxy['foo'] = v，返回一个布尔值。\n\n## has(target, propKey)\n\n拦截 propKey in proxy 的操作，返回一个布尔值。\n\n## deleteProperty(target, propKey)\n\n拦截 delete proxy[propKey]的操作，返回一个布尔值。\n\n## ownKeys(target)\n\n拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 Object.keys()的返回结果仅包括目标对象自身的可遍历属性。\n\n## getOwnPropertyDescriptor(target, propKey)\n\n拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。\n\n## defineProperty(target, propKey, propDesc)\n\n拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。\n\n## preventExtensions(target)\n\n拦截 Object.preventExtensions(proxy)，返回一个布尔值。\n\n## getPrototypeOf(target)\n\n拦截 Object.getPrototypeOf(proxy)，返回一个对象。\n\n## isExtensible(target)\n\n拦截 Object.isExtensible(proxy)，返回一个布尔值。\n\n## setPrototypeOf(target, proto)\n\n拦截 Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。\n\n## apply(target, object, args)\n\n拦截 Proxy 实例作为函数调用的操作，比如 proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。\n\n## construct(target, args)\n\n拦截 Proxy 实例作为构造函数调用的操作，比如 new proxy(...args)。\n\n# Proxy 实例的方法\n\n下面是上面这些拦截方法的详细介绍。\n\n## get()\n\nget 方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 proxy 实例本身（严格地说，它总是指向原始的读操作所在的那个对象，一般情况下就是 Proxy 实例），其中最后一个参数可选。\n\n```javascript\nvar person = {\n  name: \"张三\"\n};\n\nvar proxy = new Proxy(person, {\n  get: function(target, property) {\n    if (property in target) {\n      return target[property];\n    } else {\n      throw new ReferenceError('Property \"' + property + '\" does not exist.');\n    }\n  }\n});\n\nproxy.name; // \"张三\"\nproxy.age; // 抛出一个错误\n```\n\nget 方法可以继承。\n\n```javascript\nlet proto = new Proxy(\n  {},\n  {\n    get(target, propertyKey, receiver) {\n      console.log(\"GET \" + propertyKey);\n      return target[propertyKey];\n    }\n  }\n);\n\nlet obj = Object.create(proto);\nobj.foo; // \"GET foo\"\n```\n\n上面代码中，拦截操作定义在 Prototype 对象上面，所以如果读取 obj 对象继承的属性时，拦截会生效。\n利用 Proxy，可以将读取属性的操作（get），转变为执行某个函数，从而实现属性的链式操作。\n\n```javascript\nvar pipe = (function() {\n  return function(value) {\n    var funcStack = [];\n    var oproxy = new Proxy(\n      {},\n      {\n        get: function(pipeObject, fnName) {\n          if (fnName === \"get\") {\n            return funcStack.reduce(function(val, fn) {\n              return fn(val);\n            }, value);\n          }\n          funcStack.push(window[fnName]);\n          return oproxy;\n        }\n      }\n    );\n\n    return oproxy;\n  };\n})();\n\nvar double = n => n * 2;\nvar pow = n => n * n;\nvar reverseInt = n =>\n  n\n    .toString()\n    .split(\"\")\n    .reverse()\n    .join(\"\") | 0;\n\npipe(3).double.pow.reverseInt.get; // 63\n```\n\n下面是一个 get 方法的第三个参数的例子\n\n```javascript\nconst proxy = new Proxy(\n  {},\n  {\n    get: function(target, property, receiver) {\n      return receiver;\n    }\n  }\n);\n\nconst d = Object.create(proxy);\nd.a === d; // true\n```\n\n上面代码中，d 对象本身没有 a 属性，所以读取 d.a 的时候，会去 d 的原型 proxy 对象找。这时，receiver 就指向 d，代表原始的读操作所在的那个对象。\n如果一个属性不可配置（configurable）且不可写（writable），则 Proxy 不能修改该属性，否则通过 Proxy 对象访问该属性会报错。\n\n```javascript\nconst target = Object.defineProperties(\n  {},\n  {\n    foo: {\n      value: 123,\n      writable: false,\n      configurable: false\n    }\n  }\n);\n\nconst handler = {\n  get(target, propKey) {\n    return \"abc\";\n  }\n};\n\nconst proxy = new Proxy(target, handler);\n\nproxy.foo;\n// TypeError: Invariant check failed\n```\n\n## set()\n\nset 方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 Proxy 实例本身，其中最后一个参数可选。\n利用 set 方法，可以进行数据验证，还可以数据绑定，即每当对象发生变化时，会自动更新 DOM。\n有时，我们会在对象上面设置内部属性，属性名的第一个字符使用下划线开头，表示这些属性不应该被外部使用。结合 get 和 set 方法，就可以做到防止这些内部属性被外部读写。\n\n```javascript\nconst handler = {\n  get(target, key) {\n    invariant(key, \"get\");\n    return target[key];\n  },\n  set(target, key, value) {\n    invariant(key, \"set\");\n    target[key] = value;\n    return true;\n  }\n};\nfunction invariant(key, action) {\n  if (key[0] === \"_\") {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\nconst target = {};\nconst proxy = new Proxy(target, handler);\nproxy._prop;\n// Error: Invalid attempt to get private \"_prop\" property\nproxy._prop = \"c\";\n// Error: Invalid attempt to set private \"_prop\" property\n```\n\n上面代码中，只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的。\n下面是 set 方法第四个参数的例子。\n\n```javascript\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = receiver;\n  }\n};\nconst proxy = new Proxy({}, handler);\nconst myObj = {};\nObject.setPrototypeOf(myObj, proxy);\n\nmyObj.foo = \"bar\";\nmyObj.foo === myObj; // true\n```\n\n上面代码中，设置 myObj.foo 属性的值时，myObj 并没有 foo 属性，因此引擎会到 myObj 的原型链去找 foo 属性。myObj 的原型对象 proxy 是一个 Proxy 实例，设置它的 foo 属性会触发 set 方法。这时，第四个参数 receiver 就指向原始赋值行为所在的对象 myObj。\n如果目标对象自身的某个属性，不可写且不可配置，那么 set 方法将不起作用。\n\n```javascript\nconst obj = {};\nObject.defineProperty(obj, \"foo\", {\n  value: \"bar\",\n  writable: false\n});\n\nconst handler = {\n  set: function(obj, prop, value, receiver) {\n    obj[prop] = \"baz\";\n  }\n};\n\nconst proxy = new Proxy(obj, handler);\nproxy.foo = \"baz\";\nproxy.foo; // \"bar\"\n```\n\n## apply()\n\napply 方法拦截函数的调用、call 和 apply 操作。apply 方法可以接受三个参数，分别是目标对象、目标对象的上下文对象（this）和目标对象的参数数组。\n\n```javascript\nvar target = function() {\n  return \"I am the target\";\n};\nvar handler = {\n  apply: function() {\n    return \"I am the proxy\";\n  }\n};\n\nvar p = new Proxy(target, handler);\n\np();\n// \"I am the proxy\"\n```\n\n上面代码中，变量 p 是 Proxy 的实例，当它作为函数调用时（p()），就会被 apply 方法拦截，返回一个字符串。\n另外，直接调用 Reflect.apply 方法，也会被拦截。\n\n## has()\n\nhas 方法用来拦截 HasProperty 操作，即判断对象是否具有某个属性时，这个方法会生效。典型的操作就是 in 运算符。has 方法可以接受两个参数，分别是目标对象、需查询的属性名。\n下面的例子使用 has 方法隐藏某些属性，不被 in 运算符发现。\n\n```javascript\nvar handler = {\n  has(target, key) {\n    if (key[0] === \"_\") {\n      return false;\n    }\n    return key in target;\n  }\n};\nvar target = { _prop: \"foo\", prop: \"foo\" };\nvar proxy = new Proxy(target, handler);\n\"_prop\" in proxy; // false\n```\n\n如果原对象不可配置或者禁止扩展，这时 has 拦截会报错。\n\n```javascript\nvar obj = { a: 10 };\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  has: function(target, prop) {\n    return false;\n  }\n});\n\n\"a\" in p; // TypeError is thrown\n```\n\n上面代码中，obj 对象禁止扩展，结果使用 has 拦截就会报错。也就是说，如果某个属性不可配置（或者目标对象不可扩展），则 has 方法就不得“隐藏”（即返回 false）目标对象的该属性。\nhas 方法拦截的是 HasProperty 操作，而不是 HasOwnProperty 操作，即 has 方法不判断一个属性是对象自身的属性，还是继承的属性。另外，虽然 for...in 循环也用到了 in 运算符，但是 has 拦截对 for...in 循环不生效。\n\n## construct()\n\nconstruct 方法用于拦截 new 命令，下面是拦截对象的写法。\n\n```javascript\nvar handler = {\n  construct(target, args, newTarget) {\n    return new target(...args);\n  }\n};\n```\n\nconstruct 方法可以接受三个参数。target：目标对象。args：构造函数的参数对象。newTarget：创造实例对象时，new 命令作用的构造函数。\nconstruct 方法返回的必须是一个对象，否则会报错。\n\n```javascript\nvar p = new Proxy(function() {}, {\n  construct: function(target, args) {\n    console.log(\"called: \" + args.join(\", \"));\n    return { value: args[0] * 10 };\n  }\n});\n\nnew p(1).value;\n// \"called: 1\"\n// 10\n```\n\n```javascript\nvar p = new Proxy(function() {}, {\n  construct: function(target, argumentsList) {\n    return 1;\n  }\n});\n\nnew p(); // 报错\n```\n\n## deleteProperty()\n\ndeleteProperty 方法用于拦截 delete 操作，如果这个方法抛出错误或者返回 false，当前属性就无法被 delete 命令删除。\n\n```javascript\nvar handler = {\n  deleteProperty(target, key) {\n    invariant(key, \"delete\");\n    return true;\n  }\n};\nfunction invariant(key, action) {\n  if (key[0] === \"_\") {\n    throw new Error(`Invalid attempt to ${action} private \"${key}\" property`);\n  }\n}\n\nvar target = { _prop: \"foo\" };\nvar proxy = new Proxy(target, handler);\ndelete proxy._prop;\n// Error: Invalid attempt to delete private \"_prop\" property\n```\n\ndeleteProperty 方法拦截了 delete 操作符，删除第一个字符为下划线的属性会报错。\n注意，目标对象自身的不可配置（configurable）的属性，不能被 deleteProperty 方法删除，否则报错。\n\n## defineProperty()\n\ndefineProperty 方法拦截了 Object.defineProperty 操作。\n\n```javascript\nvar handler = {\n  defineProperty(target, key, descriptor) {\n    return false;\n  }\n};\nvar target = {};\nvar proxy = new Proxy(target, handler);\nproxy.foo = \"bar\"; // 不会生效\n```\n\ndefineProperty 方法返回 false，导致添加新属性总是无效。\n注意，如果目标对象不可扩展（extensible），则 defineProperty 不能增加目标对象上不存在的属性，否则会报错。另外，如果目标对象的某个属性不可写（writable）或不可配置（configurable），则 defineProperty 方法不得改变这两个设置。\n\n## getOwnPropertyDescriptor()\n\ngetOwnPropertyDescriptor 方法拦截 Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者 undefined。\n\n```javascript\nvar handler = {\n  getOwnPropertyDescriptor(target, key) {\n    if (key[0] === \"_\") {\n      return;\n    }\n    return Object.getOwnPropertyDescriptor(target, key);\n  }\n};\nvar target = { _foo: \"bar\", baz: \"tar\" };\nvar proxy = new Proxy(target, handler);\nObject.getOwnPropertyDescriptor(proxy, \"wat\");\n// undefined\nObject.getOwnPropertyDescriptor(proxy, \"_foo\");\n// undefined\nObject.getOwnPropertyDescriptor(proxy, \"baz\");\n// { value: 'tar', writable: true, enumerable: true, configurable: true }\n```\n\nhandler.getOwnPropertyDescriptor 方法对于第一个字符为下划线的属性名会返回 undefined。\n\n## getPrototypeOf()\n\ngetPrototypeOf 方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。\n\n1. Object.prototype.\\_\\_proto\\_\\_\n2. Object.prototype.isPrototypeOf()\n3. Object.getPrototypeOf()\n4. Reflect.getPrototypeOf()\n5. instanceof\n\n```javascript\nvar proto = {};\nvar p = new Proxy(\n  {},\n  {\n    getPrototypeOf(target) {\n      return proto;\n    }\n  }\n);\nObject.getPrototypeOf(p) === proto; // true\n```\n\ngetPrototypeOf 方法的返回值必须是对象或者 null，否则报错。另外，如果目标对象不可扩展（extensible）， getPrototypeOf 方法必须返回目标对象的原型对象。\n\n## isExtensible()\n\nisExtensible 方法拦截 Object.isExtensible 操作\n\n```javascript\nvar p = new Proxy(\n  {},\n  {\n    isExtensible: function(target) {\n      console.log(\"called\");\n      return true;\n    }\n  }\n);\n\nObject.isExtensible(p);\n// \"called\"\n// true\n```\n\n该方法只能返回布尔值，否则返回值会被自动转为布尔值。\n这个方法有一个强限制，它的返回值必须与目标对象的 isExtensible 属性保持一致，否则就会抛出错误。\n\n```javascript\nvar p = new Proxy(\n  {},\n  {\n    isExtensible: function(target) {\n      return false;\n    }\n  }\n);\n\nObject.isExtensible(p); // 报错\nObject.isExtensible(proxy) === Object.isExtensible(target); //true\n```\n\n## ownKeys()\n\nownKeys 方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作。\n\n1. Object.getOwnPropertyNames()\n2. Object.getOwnPropertySymbols()\n3. Object.keys()\n4. for...in 循环\n\n```javascript\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3\n};\n\nlet handler = {\n  ownKeys(target) {\n    return [\"a\"];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy);\n// [ 'a' ]\n```\n\n注意，使用 Object.keys 方法时，有三类属性会被 ownKeys 方法自动过滤，不会返回。\n\n1. 目标对象上不存在的属性\n2. 属性名为 Symbol 值\n3. 不可遍历（enumerable）的属性\n\n```javascript\nlet target = {\n  a: 1,\n  b: 2,\n  c: 3,\n  [Symbol.for(\"secret\")]: \"4\"\n};\n\nObject.defineProperty(target, \"key\", {\n  enumerable: false,\n  configurable: true,\n  writable: true,\n  value: \"static\"\n});\n\nlet handler = {\n  ownKeys(target) {\n    return [\"a\", \"d\", Symbol.for(\"secret\"), \"key\"];\n  }\n};\n\nlet proxy = new Proxy(target, handler);\n\nObject.keys(proxy);\n// ['a']\n```\n\n上面代码中，ownKeys 方法之中，显式返回不存在的属性（d）、Symbol 值（Symbol.for('secret')）、不可遍历的属性（key），结果都被自动过滤掉。\n\n```javascript\n//ownKeys方法还可以拦截Object.getOwnPropertyNames()\nvar p = new Proxy(\n  {},\n  {\n    ownKeys: function(target) {\n      return [\"a\", \"b\", \"c\"];\n    }\n  }\n);\n\nObject.getOwnPropertyNames(p);\n// [ 'a', 'b', 'c' ]\n\n//for...in循环也受到ownKeys方法的拦截\nconst obj = { hello: \"world\" };\nconst proxy = new Proxy(obj, {\n  ownKeys: function() {\n    return [\"a\", \"b\"];\n  }\n});\n\nfor (let key in proxy) {\n  console.log(key); // 没有任何输出\n}\n```\n\n上面代码中，ownkeys 指定只返回 a 和 b 属性，由于 obj 没有这两个属性，因此 for...in 循环不会有任何输出。\nownKeys 方法返回的数组成员，只能是字符串或 Symbol 值。如果有其他类型的值，或者返回的根本不是数组，就会报错。\n\n```javascript\nvar obj = {};\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return [123, true, undefined, null, {}, []];\n  }\n});\n\nObject.getOwnPropertyNames(p);\n// Uncaught TypeError: 123 is not a valid property name\n```\n\n如果目标对象自身包含不可配置的属性，则该属性必须被 ownKeys 方法返回，否则报错。\n\n```javascript\nvar obj = {};\nObject.defineProperty(obj, \"a\", {\n  configurable: false,\n  enumerable: true,\n  value: 10\n});\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return [\"b\"];\n  }\n});\n\nObject.getOwnPropertyNames(p);\n// Uncaught TypeError: 'ownKeys' on proxy: trap result did not include 'a'\n```\n\n如果目标对象是不可扩展的（non-extensition），这时 ownKeys 方法返回的数组之中，必须包含原对象的所有属性，且不能包含多余的属性，否则报错。\n\n```javascript\nvar obj = {\n  a: 1\n};\n\nObject.preventExtensions(obj);\n\nvar p = new Proxy(obj, {\n  ownKeys: function(target) {\n    return [\"a\", \"b\"];\n  }\n});\n\nObject.getOwnPropertyNames(p);\n// Uncaught TypeError: 'ownKeys' on proxy: trap returned extra keys but proxy target is non-extensible\n```\n\n## preventExtensions()\n\npreventExtensions 方法拦截 Object.preventExtensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。这个方法有一个限制，只有目标对象不可扩展时（即 Object.isExtensible(proxy)为 false），proxy.preventExtensions 才能返回 true，否则会报错。\n\n```javascript\nvar p = new Proxy(\n  {},\n  {\n    preventExtensions: function(target) {\n      return true;\n    }\n  }\n);\n\nObject.preventExtensions(p); // 报错\n\n//为了防止出现这个问题，通常要在proxy.preventExtensions方法里面，调用一次Object.preventExtensions\nvar p = new Proxy(\n  {},\n  {\n    preventExtensions: function(target) {\n      console.log(\"called\");\n      Object.preventExtensions(target);\n      return true;\n    }\n  }\n);\n\nObject.preventExtensions(p);\n// \"called\"\n// true\n```\n\n## setPrototypeOf()\n\nsetPrototypeOf 方法主要用来拦截 Object.setPrototypeOf 方法。\n\n```javascript\nvar handler = {\n  setPrototypeOf(target, proto) {\n    throw new Error(\"Changing the prototype is forbidden\");\n  }\n};\nvar proto = {};\nvar target = function() {};\nvar proxy = new Proxy(target, handler);\nObject.setPrototypeOf(proxy, proto);\n// Error: Changing the prototype is forbidden\n```\n\n上面代码中，只要修改 target 的原型对象，就会报错。\n注意，该方法只能返回布尔值，否则会被自动转为布尔值。另外，如果目标对象不可扩展（extensible），setPrototypeOf 方法不得改变目标对象的原型。\n\n# Proxy.revocable()\n\nProxy.revocable 方法返回一个可取消的 Proxy 实例\n\n```javascript\nlet target = {};\nlet handler = {};\n\nlet { proxy, revoke } = Proxy.revocable(target, handler);\n\nproxy.foo = 123;\nproxy.foo; // 123\n\nrevoke();\nproxy.foo; // TypeError: Revoked\n```\n\nProxy.revocable 方法返回一个对象，该对象的 proxy 属性是 Proxy 实例，revoke 属性是一个函数，可以取消 Proxy 实例。上面代码中，当执行 revoke 函数之后，再访问 Proxy 实例，就会抛出一个错误。\nProxy.revocable 的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。\n\n# this 问题\n\n虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的 this 关键字会指向 Proxy 代理。\n\n```javascript\nconst target = {\n  m: function() {\n    console.log(this === proxy);\n  }\n};\nconst handler = {};\n\nconst proxy = new Proxy(target, handler);\n\ntarget.m(); // false\nproxy.m(); // true\n```\n\n# proxy 用途\n\nProxy，见名知意，其功能非常类似于设计模式中的代理模式，该模式常用于三个方面：\n\n- 拦截和监视外部对对象的访问\n- 降低函数或类的复杂度\n- 在复杂操作前对操作进行校验或对所需资源进行管理\n\n在支持 Proxy 的浏览器环境中，Proxy 是一个全局对象，可以直接使用。`Proxy(target, handler)` 是一个构造函数，`target` 是被代理的对象，`handlder` 是声明了各类代理操作的对象，最终返回一个代理对象。外界每次通过代理对象访问 `target` 对象的属性时，就会经过 `handler` 对象，从这个流程来看，代理对象很类似 middleware（中间件）。那么 Proxy 可以拦截什么操作呢？最常见的就是 get（读取）、set（修改）对象属性等操作，完整的可拦截操作列表请点击[这里](http://www.ecma-international.org/ecma-262/6.0/#sec-proxy-object-internal-methods-and-internal-slots)。此外，Proxy 对象还提供了一个 `revoke` 方法，可以随时注销所有的代理操作。在我们正式介绍 Proxy 之前，建议你对 Reflect 有一定的了解，它也是一个 ES6 新增的全局对象，详细信息请参考 [MDN Reflect](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect)。\n\n## Basic\n\n```javascript\nconst target = {\n  name: \"Billy Bob\",\n  age: 15\n};\n\nconst handler = {\n  get(target, key, proxy) {\n    const today = new Date();\n    console.log(`GET request made for ${key} at ${today}`);\n\n    return Reflect.get(target, key, proxy);\n  }\n};\n\nconst proxy = new Proxy(target, handler);\nproxy.name;\n// => \"GET request made for name at Thu Jul 21 2016 15:26:20 GMT+0800 (CST)\"\n// => \"Billy Bob\"\n```\n\n在上面的代码中，我们首先定义了一个被代理的目标对象 `target`，然后声明了包含所有代理操作的 `handler` 对象，接下来使用 `Proxy(target, handler)` 创建代理对象 `proxy`，此后所有使用 `proxy` 对 `target` 属性的访问都会经过 `handler` 的处理。\n\n## 1. 抽离校验模块\n\n让我们从一个简单的类型校验开始做起，这个示例演示了如何使用 Proxy 保障数据类型的准确性：\n\n```javascript\nlet numericDataStore = {\n  count: 0,\n  amount: 1234,\n  total: 14\n};\n\nnumericDataStore = new Proxy(numericDataStore, {\n  set(target, key, value, proxy) {\n    if (typeof value !== \"number\") {\n      throw Error(\"Properties in numericDataStore can only be numbers\");\n    }\n    return Reflect.set(target, key, value, proxy);\n  }\n});\n\n// 抛出错误，因为 \"foo\" 不是数值\nnumericDataStore.count = \"foo\";\n\n// 赋值成功\nnumericDataStore.count = 333;\n```\n\n如果要直接为对象的所有属性开发一个校验器可能很快就会让代码结构变得臃肿，使用 Proxy 则可以将校验器从核心逻辑分离出来自成一体：\n\n```javascript\nfunction createValidator(target, validator) {\n  return new Proxy(target, {\n    _validator: validator,\n    set(target, key, value, proxy) {\n      if (target.hasOwnProperty(key)) {\n        let validator = this._validator[key];\n        if (!!validator(value)) {\n          return Reflect.set(target, key, value, proxy);\n        } else {\n          throw Error(`Cannot set ${key} to ${value}. Invalid.`);\n        }\n      } else {\n        throw Error(`${key} is not a valid property`);\n      }\n    }\n  });\n}\n\nconst personValidators = {\n  name(val) {\n    return typeof val === \"string\";\n  },\n  age(val) {\n    return typeof age === \"number\" && age > 18;\n  }\n};\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n    return createValidator(this, personValidators);\n  }\n}\n\nconst bill = new Person(\"Bill\", 25);\n\n// 以下操作都会报错\nbill.name = 0;\nbill.age = \"Bill\";\nbill.age = 15;\n```\n\n通过校验器和主逻辑的分离，你可以无限扩展 `personValidators` 校验器的内容，而不会对相关的类或函数造成直接破坏。更复杂一点，我们还可以使用 Proxy 模拟类型检查，检查函数是否接收了类型和数量都正确的参数：\n\n```javascript\nlet obj = {\n  pickyMethodOne: function(obj, str, num) {\n    /* ... */\n  },\n  pickyMethodTwo: function(num, obj) {\n    /*... */\n  }\n};\n\nconst argTypes = {\n  pickyMethodOne: [\"object\", \"string\", \"number\"],\n  pickyMethodTwo: [\"number\", \"object\"]\n};\n\nobj = new Proxy(obj, {\n  get: function(target, key, proxy) {\n    var value = target[key];\n    return function(...args) {\n      var checkArgs = argChecker(key, args, argTypes[key]);\n      return Reflect.apply(value, target, args);\n    };\n  }\n});\n\nfunction argChecker(name, args, checkers) {\n  for (var idx = 0; idx < args.length; idx++) {\n    var arg = args[idx];\n    var type = checkers[idx];\n    if (!arg || typeof arg !== type) {\n      console.warn(\n        `You are incorrectly implementing the signature of ${name}. Check param ${idx +\n          1}`\n      );\n    }\n  }\n}\n\nobj.pickyMethodOne();\n// > You are incorrectly implementing the signature of pickyMethodOne. Check param 1\n// > You are incorrectly implementing the signature of pickyMethodOne. Check param 2\n// > You are incorrectly implementing the signature of pickyMethodOne. Check param 3\n\nobj.pickyMethodTwo(\"wopdopadoo\", {});\n// > You are incorrectly implementing the signature of pickyMethodTwo. Check param 1\n\n// No warnings logged\nobj.pickyMethodOne({}, \"a little string\", 123);\nobj.pickyMethodOne(123, {});\n```\n\n## 2. 私有属性\n\n在 JavaScript 或其他语言中，大家会约定俗成地在变量名之前添加下划线 `_` 来表明这是一个私有属性（并不是真正的私有），但我们无法保证真的没人会去访问或修改它。在下面的代码中，我们声明了一个私有的 `apiKey`，便于 `api` 这个对象内部的方法调用，但不希望从外部也能够访问 `api._apiKey`:\n\n```javascript\nvar api = {\n  _apiKey: \"123abc456def\",\n  /* mock methods that use this._apiKey */\n  getUsers: function() {},\n  getUser: function(userId) {},\n  setUser: function(userId, config) {}\n};\n\n// logs '123abc456def';\nconsole.log(\"An apiKey we want to keep private\", api._apiKey);\n\n// get and mutate _apiKeys as desired\nvar apiKey = api._apiKey;\napi._apiKey = \"987654321\";\n```\n\n很显然，约定俗成是没有束缚力的。使用 ES6 Proxy 我们就可以实现真实的私有变量了，下面针对不同的读取方式演示两个不同的私有化方法。第一种方法是使用 set / get 拦截读写请求并返回 `undefined`:\n\n```javascript\nlet api = {\n  _apiKey: \"123abc456def\",\n  getUsers: function() {},\n  getUser: function(userId) {},\n  setUser: function(userId, config) {}\n};\n\nconst RESTRICTED = [\"_apiKey\"];\napi = new Proxy(api, {\n  get(target, key, proxy) {\n    if (RESTRICTED.indexOf(key) > -1) {\n      throw Error(\n        `${key} is restricted. Please see api documentation for further info.`\n      );\n    }\n    return Reflect.get(target, key, proxy);\n  },\n  set(target, key, value, proxy) {\n    if (RESTRICTED.indexOf(key) > -1) {\n      throw Error(\n        `${key} is restricted. Please see api documentation for further info.`\n      );\n    }\n    return Reflect.get(target, key, value, proxy);\n  }\n});\n\n// 以下操作都会抛出错误\nconsole.log(api._apiKey);\napi._apiKey = \"987654321\";\n```\n\n第二种方法是使用 `has` 拦截 `in` 操作：\n\n```javascript\nvar api = {\n  _apiKey: \"123abc456def\",\n  getUsers: function() {},\n  getUser: function(userId) {},\n  setUser: function(userId, config) {}\n};\n\nconst RESTRICTED = [\"_apiKey\"];\napi = new Proxy(api, {\n  has(target, key) {\n    return RESTRICTED.indexOf(key) > -1 ? false : Reflect.has(target, key);\n  }\n});\n\n// these log false, and `for in` iterators will ignore _apiKey\nconsole.log(\"_apiKey\" in api);\n\nfor (var key in api) {\n  if (api.hasOwnProperty(key) && key === \"_apiKey\") {\n    console.log(\n      \"This will never be logged because the proxy obscures _apiKey...\"\n    );\n  }\n}\n```\n\n## 3. 访问日志\n\n对于那些调用频繁、运行缓慢或占用执行环境资源较多的属性或接口，开发者会希望记录它们的使用情况或性能表现，这个时候就可以使用 Proxy 充当中间件的角色，轻而易举实现日志功能：\n\n```javascript\nlet api = {\n  _apiKey: \"123abc456def\",\n  getUsers: function() {\n    /* ... */\n  },\n  getUser: function(userId) {\n    /* ... */\n  },\n  setUser: function(userId, config) {\n    /* ... */\n  }\n};\n\nfunction logMethodAsync(timestamp, method) {\n  setTimeout(function() {\n    console.log(`${timestamp} - Logging ${method} request asynchronously.`);\n  }, 0);\n}\n\napi = new Proxy(api, {\n  get: function(target, key, proxy) {\n    var value = target[key];\n    return function(...arguments) {\n      logMethodAsync(new Date(), key);\n      return Reflect.apply(value, target, arguments);\n    };\n  }\n});\n\napi.getUsers();\n```\n\n## 4. 预警和拦截\n\n假设你不想让其他开发者删除 `noDelete` 属性，还想让调用 `oldMethod` 的开发者了解到这个方法已经被废弃了，或者告诉开发者不要修改 `doNotChange` 属性，那么就可以使用 Proxy 来实现：\n\n```javascript\nlet dataStore = {\n  noDelete: 1235,\n  oldMethod: function() {\n    /*...*/\n  },\n  doNotChange: \"tried and true\"\n};\n\nconst NODELETE = [\"noDelete\"];\nconst NOCHANGE = [\"doNotChange\"];\nconst DEPRECATED = [\"oldMethod\"];\n\ndataStore = new Proxy(dataStore, {\n  set(target, key, value, proxy) {\n    if (NOCHANGE.includes(key)) {\n      throw Error(`Error! ${key} is immutable.`);\n    }\n    return Reflect.set(target, key, value, proxy);\n  },\n  deleteProperty(target, key) {\n    if (NODELETE.includes(key)) {\n      throw Error(`Error! ${key} cannot be deleted.`);\n    }\n    return Reflect.deleteProperty(target, key);\n  },\n  get(target, key, proxy) {\n    if (DEPRECATED.includes(key)) {\n      console.warn(`Warning! ${key} is deprecated.`);\n    }\n    var val = target[key];\n\n    return typeof val === \"function\"\n      ? function(...args) {\n          Reflect.apply(target[key], target, args);\n        }\n      : val;\n  }\n});\n\n// these will throw errors or log warnings, respectively\ndataStore.doNotChange = \"foo\";\ndelete dataStore.noDelete;\ndataStore.oldMethod();\n```\n\n## 5. 过滤操作\n\n某些操作会非常占用资源，比如传输大文件，这个时候如果文件已经在分块发送了，就不需要在对新的请求作出相应（非绝对），这个时候就可以使用 Proxy 对当请求进行特征检测，并根据特征过滤出哪些是不需要响应的，哪些是需要响应的。下面的代码简单演示了过滤特征的方式，并不是完整代码，相信大家会理解其中的妙处：\n\n```javascript\nlet obj = {\n  getGiantFile: function(fileId) {\n    /*...*/\n  }\n};\n\nobj = new Proxy(obj, {\n  get(target, key, proxy) {\n    return function(...args) {\n      const id = args[0];\n      let isEnroute = checkEnroute(id);\n      let isDownloading = checkStatus(id);\n      let cached = getCached(id);\n\n      if (isEnroute || isDownloading) {\n        return false;\n      }\n      if (cached) {\n        return cached;\n      }\n      return Reflect.apply(target[key], target, args);\n    };\n  }\n});\n```\n\n## 6. 中断代理\n\nProxy 支持随时取消对 `target` 的代理，这一操作常用于完全封闭对数据或接口的访问。在下面的示例中，我们使用了 `Proxy.revocable` 方法创建了可撤销代理的代理对象：\n\n```javascript\nlet sensitiveData = { username: \"devbryce\" };\nconst { sensitiveData, revokeAccess } = Proxy.revocable(sensitiveData, handler);\nfunction handleSuspectedHack() {\n  revokeAccess();\n}\n\n// logs 'devbryce'\nconsole.log(sensitiveData.username);\nhandleSuspectedHack();\n// TypeError: Revoked\nconsole.log(sensitiveData.username);\n```\n\n## Decorator\n\nES7 中实现的 Decorator，相当于设计模式中的装饰器模式。如果简单地区分 Proxy 和 Decorator 的使用场景，可以概括为：Proxy 的核心作用是控制外界对被代理者内部的访问，Decorator 的核心作用是增强被装饰者的功能。只要在它们核心的使用场景上做好区别，那么像是访问日志这样的功能，虽然本文使用了 Proxy 实现，但也可以使用 Decorator 实现，开发者可以根据项目的需求、团队的规范、自己的偏好自由选择。\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"浏览器缓存机制","url":"/2018/10/20/浏览器缓存机制/","content":"\n# 浏览器缓存机制\n\n## 概念\n\n浏览器缓存（Browser Caching）是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，整体上加速网页展示给用户。（浏览器缓存分为强缓存和协商缓存）\n\n<!-- more -->\n\n## 浏览器缓存机制要素：\n\n- 浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识；\n- 浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中。\n\n## 九种浏览器缓存：\n\n### http 缓存\n\nhttp 缓存是基于 HTTP 协议的浏览器文件级缓存机制。即针对文件的重复请求情况下，浏览器可以根据协议头判断从服务器端请求文件还是从本地读取文件。主要是针对重复的 http 请求，在有缓存的情况下判断过程主要分 3 步：判断 expires，如果未过期，直接读取 http 缓存文件，不发 http 请求，否则进入下一步；判断是否含有 etag，有则带上 if-none-match 发送请求，未修改返回 304，修改返回 200，否则进入下一步；判断是否含有 last-modified，有则带上 if-modified-since 发送请求，无效返回 200，有效返回 304，否则直接向服务器请求\n\n### websql\n\n它是将数据以数据库的形式存储在客户端，根据需求去读取；跟 Storage 的区别是： Storage 和 Cookie 都是以键值对的形式存在的。\n\n### indexDB\n\nIndexedDB 是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API。同步 API 本来是要用于仅供 Web Workers 内部使用，但是还没有被任何浏览器所实现。异步 API 在 Web Workers 内部和外部都可以使用，另外浏览器可能对 indexDB 有 50M 大小的限制，一般用户保存大量用户数据并要求数据之间有搜索需要的场景。\n\n### Cookie\n\n指一般网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）。cookie 一般通过 http 请求中在头部一起发送到服务器端。一条 cookie 记录主要由键、值、域、过期时间、大小组成，一般用于保存用户的认证信息。cookie 最大长度和域名个数由不同浏览器决定。不同域名之间的 cookie 信息是独立的，如果需要设置共享可以在服务器端设置 cookie 的 path 和 domain 来实现共享。浏览器端也可以通过 document.cookie 来获取 cookie，并通过 js 浏览器端也可以方便地读取/设置 cookie 的值。（Cookie 只能存储少量的数据，每个 Cookie 的大小不超过 4KB。RFC 标准不允许浏览器保存超过 300 个 Cookie，为每个 web 服务器保存的 Cookie 数不超过 20 个。JavaScript 中使用 Cookie 不会采用任何加密机制，因此它们是不安全的。）\n\n### Localstorage\n\nlocalStorage 是 html5 的一种新的本地缓存方案，目前用的比较多，一般用来存储 ajax 返回的数据，加快下次页面打开时的渲染速度。\n\n### Sessionstorage\n\nsessionStorage 和 localstorage 类似，但是浏览器关闭则会全部删除，api 和 localstorage 相同，实际项目中使用较少。\n\n### application cache\n\napplication cahce 是将大部分图片资源、js、css 等静态资源放在 manifest 文件配置中。当页面打开时通过 manifest 文件来读取本地文件或是请求服务器文件。在线的情况下，浏览器发现 html 头部有 manifest 属性，它会请求 manifest 文件，如果是第一次访问 app，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。并在下一次生效。离线的情况下，浏览器就直接使用离线存储的资源。\n\n### cacheStorage\n\nCacheStorage 是在 ServiceWorker 的规范中定义的。CacheStorage 可以保存每个 serverWorker 申明的 cache 对象，cacheStorage 有 open、match、has、delete、keys 五个核心方法，可以对 cache 对象的不同匹配进行不同的响应。\n\n### flash 缓存\n\n这种方式基本不用，这一方法主要基于 flash 有读写浏览器端本地目录的功能，同时也可以向 js 提供调用的 api，则页面可以通过 js 调用 flash 去读写特定的磁盘目录，达到本地数据缓存的目的。\n\n## cookie\n\n1. 背景：早期 Web 开发面临的最大问题之一是如何管理状态。简言之，服务器端没有办法知道两个请求是否来自于同一个浏览器。那时的办法是在请求的页面中插入一个 token，并且在下一次请求中将这个 token 返回（至服务器）。这就需要在 form 中插入一个包含 token 的隐藏表单域，或着在 URL 的 qurey 字符串中传递该 token。这两种办法都强调手工操作并且极易出错。\n2. 内容：键、值、域、过期时间、大小\n3. 是否生效：expires 指定了 cookie 何时不会再被发送到服务器端的，因此该 cookie 可能会被浏览器删掉。（过期时间）在没有 expires 选项时，cookie 的寿命仅限于单一的会话中。浏览器的关闭意味这一次会话的结束，所以会话 cookie 只存在于浏览器保持打开的状态之下。如果 expires 选项设置了一个过去的时间点，那么这个 cookie 会被立即删除。\n4. 存在哪里：cookie 的值被存储在名为 Cookie 的 HTTP 消息头中，并且只包含了 cookie 的值，其它的选项全部被去除。\n5. 存放形式：Cookies 是纯文本形式。几乎所有的实现方式都对 cookie 的值进行了一些列的 URL 编码（但不是必须）。原始的文档中指示仅有三种类型的字符必须进行编码：分号，逗号，和空格。\n6. 不同域名之间的 cookie 信息是独立的，不会冲突。浏览器会对 domain 的值与请求所要发送至的域名，做一个尾部比较（即从字符串的尾部开始比较），并且在匹配后发送一个 Cookie 消息头。domain 设置的值必须是发送 Set-Cookie 消息头的域名。与 domain 选项相同的是，path 指明了在发 Cookie 消息头之前必须在请求资源中存在一个 URL 路径。这个比较是通过将 path 属性值与请求的 URL 从头开始逐字符串比较完成的。如果字符匹配，则发送 Cookie 消息头。只有在 domain 选项核实完毕之后才会对 path 属性进行比较。path 属性的默认值是发送 Set-Cookie 消息头所对应的 URL 中的 path 部分。path 值越详细则 cookie 越靠前。domain-path 越详细则 cookie 字符串越靠前。可以通过设置 Cookie 的 path 属性来修改 Cookie 的作用域，如果把 path 设为“/”，就等同于让 Cookie 拥有了 localStorage 的作用域，即整个文档源。\n7. 默认情况下，Cookie 对于创建它的页面，以及与该页面同目录或子目录下的其他 web 页面可见。在 a.example.com 下的一个页面设置了 Cookie，将其 path 设为“/”，并将 domain 设为“.example.com”，这样该 Cookie 就对 example.com 域下的所有页面可见。\n8. 创建和存储 Cookie：对 Cookie 的所有操作都要通过读写 document 对象的 Cookie 属性来完成。Cookie 的值都是以键值对的形式存储。同样的，如果要设置 path、domain 等属性，只须以如下形式追加到 Cookie 值的后面:　;path=path\n\n```javascript\n//创建一个名字Cookie，同时设置它的过期时间\nfunction setCookie(c_name, value, expiredays) {\n  var exdate = new Date();\n  exdate.setDate(exdate.getDate() + expiredays);\n  //encodeURIComponent() 对 URI 进行编码\n  document.cookie =\n    c_name +\n    \"=\" +\n    encodeURIComponent(value) +\n    (expiredays == null ? \"\" : \";expires=\" + exdate.toGMTString());\n}\n```\n\n9. 读取 Cookie：使用 document.cookie 可以获取到 Cookie 的值，不过这个值是一个字符串，为了更好地查看 Cookie 的值，往往会采用 split()方法将 Cookie 中的名值对分离出来。\n\n```javascript\nfunction getCookie() {\n  // 初始化要返回的对象\n  var cookie = {};\n  var all = document.cookie;\n  if (all === null) {\n    return cookie;\n  }\n  //分离出Cookie的各个属性\n  var list = all.split(\";\");\n  for (var i = 0; i < list.length; i++) {\n    // 查询出等号所在的位置\n    var p = list[i].indexOf(\"=\");\n    // 分离出名字和值\n    var name = list[i].substring(0, p);\n    var value = list[i].substring(p + 1);\n    //对值进行解码\n    value = decodeURIComponent(value);\n    // 将名值对存储到对象中\n    cookie[name] = value;\n  }\n  return cookie;\n}\n```\n\n## Localstorage 和 sessionstorage\n\nLocalstorage 和 sessionstorage 是做什么的？localstorage 怎么清除它？在代码层面怎么清除？setitem 的是什么数据类型？getitem 的值是什么数据类型？\n\n- 怎么清除\n\n```javascript\nlocalStorage.removeItem(key); //删除该域名下单条记录\nlocalStorage.clear(); //删除该域名下所有记录\n```\n\n- 存储格式：所有的数据都是以文本格式保存。其中 value 需为可转化为字符串的对象。localStorage 对象的键和值只能是字符串，假设我们要保存一个对象到 localStorage 中，可以使用拼接的方式。当然也可以借助 JSON 类，将对象转换成字符串保存，然后在取出来的时候将 json 字符串转换成真正可用的 json 对象格式\n- 数据共享：不同浏览器无法共享 localStorage 或 sessionStorage 中的信息。相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享 sessionStorage 的信息。\n","tags":["浏览器","缓存"],"categories":["浏览器"]},{"title":"箭头函数","url":"/2018/10/14/箭头函数/","content":"\n# 基本用法\n\nES6 允许使用“箭头”（=>）定义函数。\n\n<!-- more -->\n\n```javascript\nvar f = v => v;\n\n// 等同于\nvar f = function(v) {\n  return v;\n};\n```\n\n## 参数部分\n\n如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。\n\n```javascript\nvar f = () => 5;\n// 等同于\nvar f = function() {\n  return 5;\n};\n\nvar sum = (num1, num2) => num1 + num2;\n// 等同于\nvar sum = function(num1, num2) {\n  return num1 + num2;\n};\n```\n\n如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用 return 语句返回。\n\n```javascript\nvar sum = (num1, num2) => {\n  return num1 + num2;\n};\n```\n\n## 返回对象\n\n由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号，否则会报错。\n\n```javascript\n// 报错\nlet getTempItem = id => { id: id, name: \"Temp\" };\n\n// 不报错\nlet getTempItem = id => ({ id: id, name: \"Temp\" });\n```\n\n下面是一种特殊情况，虽然可以运行，但会得到错误的结果。\n\n```javascript\nlet foo = () => {\n  a: 1;\n};\nfoo(); // undefined\n```\n\n上面代码中，原始意图是返回一个对象{ a: 1 }，但是由于引擎认为大括号是代码块，所以执行了一行语句 a: 1。这时，a 可以被解释为语句的标签，因此实际执行的语句是 1;，然后函数就结束了，没有返回值。\n箭头函数可以与变量解构结合使用。\n\n```javascript\nconst full = ({ first, last }) => first + \" \" + last;\n\n// 等同于\nfunction full(person) {\n  return person.first + \" \" + person.last;\n}\n```\n\n## 简化回调函数\n\n箭头函数的一个用处是简化回调函数。\n\n```javascript\n// 正常函数写法\n[1, 2, 3].map(function(x) {\n  return x * x;\n});\n\n// 箭头函数写法\n[1, 2, 3].map(x => x * x);\n```\n\n## rest 参数与箭头函数结合\n\n```javascript\nconst numbers = (...nums) => nums;\n\nnumbers(1, 2, 3, 4, 5);\n// [1,2,3,4,5]\n\nconst headAndTail = (head, ...tail) => [head, tail];\n\nheadAndTail(1, 2, 3, 4, 5);\n// [1,[2,3,4,5]]\n```\n\n# 使用注意点\n\n箭头函数有几个使用注意点。\n\n1. 函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。\n2. 不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。\n3. 不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。\n4. 不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。\n   上面四点中，第一点尤其值得注意。this 对象的指向是可变的，但是在箭头函数中，它是固定的。\n\n```javascript\nfunction foo() {\n  setTimeout(() => {\n    console.log(\"id:\", this.id);\n  }, 100);\n}\n\nvar id = 21;\n\nfoo.call({ id: 42 });\n// id: 42\n```\n\n上面代码中，setTimeout 的参数是一个箭头函数，这个箭头函数的定义生效是在 foo 函数生成时，而它的真正执行要等到 100 毫秒后。如果是普通函数，执行时 this 应该指向全局对象 window，这时应该输出 21。但是，箭头函数导致 this 总是指向函数定义生效时所在的对象（本例是{id: 42}），所以输出的是 42。\n\n# 嵌套的箭头函数\n\n箭头函数内部，还可以再使用箭头函数。下面是一个 ES5 语法的多重嵌套函数。\n\n```javascript\nfunction insert(value) {\n  return {\n    into: function(array) {\n      return {\n        after: function(afterValue) {\n          array.splice(array.indexOf(afterValue) + 1, 0, value);\n          return array;\n        }\n      };\n    }\n  };\n}\n\ninsert(2)\n  .into([1, 3])\n  .after(1); //[1, 2, 3]\n\n//使用箭头函数改写\nlet insert = value => ({\n  into: array => ({\n    after: afterValue => {\n      array.splice(array.indexOf(afterValue) + 1, 0, value);\n      return array;\n    }\n  })\n});\n\ninsert(2)\n  .into([1, 3])\n  .after(1); //[1, 2, 3]\n```\n\n# 改写 λ 演算\n\n```javascript\n// λ演算的写法\nfix = λf.(λx.f(λv.x(x)(v)))(λx.f(λv.x(x)(v)))\n\n// ES6的写法\nvar fix = f => (x => f(v => x(x)(v)))\n               (x => f(v => x(x)(v)));\n```\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"this和super关键字","url":"/2018/09/24/this和super关键字/","content":"\n# this 关键字\n\nthis 的指向：\n\n## 作为普通对象的方法调用\n\n作为普通对象的方法调用时，this 指向这个对象本身\n\n<!-- more -->\n\n```javascript\nvar obj = {\n  a: 1,\n  getA: function() {\n    console.log(this === obj);\n    console.log(this.a);\n  }\n};\n\n//this指向obj对象\nobj.getA();\n```\n\n## 作为普通函数调用\n\n作为普通函数调用时，this 指向全局对象，在浏览器中全局对象是 window，在 NodeJs 中全局对象是 global。\n\n```javascript\nvar obj = {\n  a: 1,\n  getA: function() {\n    console.log(this === obj);\n    console.log(this.a);\n  }\n};\n\n//this指向window对象\nvar getA = obj.getA;\ngetA();\n```\n\n这里需要注意的一点是，直接调用并不是指在全局作用域下进行调用，在任何作用域下，直接通过 函数名(...) 来对函数进行调用的方式，都称为直接调用。\n\n## 构造器调用\n\n构造器调用时，this 指向返回的对象。用 new 调用一个构造函数，会创建一个新对象，而其中的 this 就指向这个新对象。\n\n```javascript\nvar a = 10;\nvar b = 20;\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nvar a = new Point(1, 2);\nconsole.log(a.x); // 1\nconsole.log(x); // 10\n\nvar b = new Point(1, 2);\nconsole.log(a === b); // false\n```\n\n## call apply bind\n\n当函数通过 call()和 apply()方法绑定时，this 指向两个方法的第一个参数对象上，若第一个参数不是对象，JS 内部会尝试将其转化为对象然后再指向它。\n通过 bind 方法绑定后，无论其在什么情况下被调用，函数将被永远绑定在其第一个参数对象上，bind 绑定后返回的是一个函数。\n\n### call, apply 的用途\n\n1. 改变 this 的指向\n2. Function.prototype.bind\n\n```javascript\nFunction.prototype.bind = function() {\n  var self = this;\n  var context = [].shift.call(arguments);\n  var args = [].slice.call(arguments);\n  return function() {\n    return self.apply(context, args.concat([].slice.call(arguments)));\n  };\n};\n```\n\n### 三者区别\n\ncall 只能一个一个传入参数\napply 可直接传入参数数组\nbind 会返回一个新的函数\n\n# super 关键字\n\n关键字 super，指向当前对象的原型对象。\n\n```javascript\nconst proto = {\n  foo: \"hello\"\n};\n\nconst obj = {\n  foo: \"world\",\n  find() {\n    return super.foo;\n  }\n};\n\nObject.setPrototypeOf(obj, proto);\nobj.find(); // \"hello\"\n```\n\n上面代码中，对象 obj 的 find 方法之中，通过 super.foo 引用了原型对象 proto 的 foo 属性。\n注意，super 关键字表示原型对象时，只能用在对象的方法之中，用在其他地方都会报错。\n\n```javascript\n// 报错\nconst obj = {\n  foo: super.foo\n};\n\n// 报错\nconst obj = {\n  foo: () => super.foo\n};\n\n// 报错\nconst obj = {\n  foo: function() {\n    return super.foo;\n  }\n};\n```\n\n上面三种 super 的用法都会报错，因为对于 JavaScript 引擎来说，这里的 super 都没有用在对象的方法之中。第一种写法是 super 用在属性里面，第二种和第三种写法是 super 用在一个函数里面，然后赋值给 foo 属性。目前，只有对象方法的简写法可以让 JavaScript 引擎确认，定义的是对象的方法。\nJavaScript 引擎内部，super.foo 等同于 Object.getPrototypeOf(this).foo（属性）或 Object.getPrototypeOf(this).foo.call(this)（方法）。\n\n```javascript\nconst proto = {\n  x: \"hello\",\n  foo() {\n    console.log(this.x);\n  }\n};\n\nconst obj = {\n  x: \"world\",\n  foo() {\n    super.foo();\n  }\n};\n\nObject.setPrototypeOf(obj, proto);\n\nobj.foo(); // \"world\"\n```\n\n上面代码中，super.foo 指向原型对象 proto 的 foo 方法，但是绑定的 this 却还是当前对象 obj，因此输出的就是 world。\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"常用git命令","url":"/2018/09/16/常用git命令/","content":"# 常用git命令\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6j61mtymjj31e80qu3yu.jpg)\n红色代表工作区，绿色代表暂存区\n\n## 文件操作\n\n1. git init  \n   在当前目录下新建一个 git 仓库（master 分支）\n   git init [project-name]\n   新建一个目录，将其初始化为 git 仓库\n\n   <!-- more -->\n\n2. git status 查看状态\n   “.” 代表文件夹中所有文件\n\n3. git add [file1][file2]  \n   添加指定文件到暂存区\n\n4. git commit\n   在第一行写入这次修改记录。将缓存区文件放入提交区。\n   git commit -m ['message']\n   git commit -amend\n   修改上次记录信息\n\n5. git log\n   查看提交记录\n   vim ~/.zshrc 配置文件中可自定义操作\n   source ~/.zshrc 修改配置文件后 source 保存生效\n\n6. git config\n   查看当前 git 配置\n   git config -h\n   查看帮助信息\n   vim ~/.gitconfig 自定义 git 命令，修改个人名字邮箱等信息\n   cat .git/config 本地配置\n\n7. touch .gitignore 忽略一些文件\n\n```javascript\n .vscode\n node_modules\n```\n\n写入 gitignore 后即可忽略 node_modules 文件\n更多信息查看[gitignore](https://github.com/github/gitignore)\n\n8. git diff\n   现实暂存区和工作区的差异\n\n9. git checkout --a\n   放弃 a 的变更\n   依照提交区恢复工作区的文件，丢弃工作区的变更\n\n10. git reset HEAD --a\n    从暂存区恢复到工作区\n\n11. git stash\n    把工作区和暂存区的文件都存入 stash 中\n    git stash list\n    查看 stash 中的文件\n    git stash pop\n    恢复 stash 中的文件到工作区（pop=apply+drop）\n\n12. git reset HEAD\b^\n    后退一步（几个^代表后退几步）\n    git reset HEAD~[number]\n    抛弃了 number 个 commit\n\n13. git reflog\n    查看近期的 log 记录\n    git reset [版本号]\n    回退到版本号为……的 commit\n\n## 分支操作\n\n1. git branch develop\n   创建 develop 分支,但依然停留在当前分支\n   git branch -v\n   查看分支\n\n2. git checkout develop\n   切换进入 develop 分支\n   git checkout -b feature\n   创建并切换进入 feature 分支\n\n3. 合并分支\n   a. 先进入要合并的分支（checkout develop）\n   在执行 git merge feature 即可把 feature 合并到 develop 分支上\n   b. git merge feature develop\n   可达到同样的效果\n\n4. 改变基线\n   git rebase -i [提交记录号]\n   将 HEAD 指向记录号所在位置\n\n## 远程仓库\n\n1. git remote add origin [SSH 地址]\n   创建远程仓库连接\n\n2. git push -u origin develop\n   上传 develop 分支到远程仓库上（远程无项目可直接 push，有项目先 merge 再 push）\n\n3. git pull origin feature\n   拉取远程 feature 分支（pull=fetch+merge）\n\n4. git brach -d feature\n   删除 feature 分支\n\n5. git push origin :feature\n   删除远程 feature 分支\n\n6. git tag [标签号]\n   git push origin [标签号]\n   打标签\n\n7. git remote remove origin\n   取消本地目录下关联的远程仓库\n\n8. git clone [url]\n   下载一个项目和它的整个代码历史\n\n## 打 tag\n\n1. vim package.json\n   (vim package-lock.json)\n   可以查看 version 号\n\n2. npm version -h\n   查看这一个 tag 即将提升的版本号（大版本或者小版本）\n\n3. npm version patch\n   提升 patch 这个小版本（v0.2.2）\n\n4. git tag --list\n   查看 tag 的列表\n\n5. git push origin master\n   push 代码\n\n6. git push origin v0.2.3\n   push tag\n","tags":["git"],"categories":["git"]},{"title":"跨域请求：JSONP&&CORS","url":"/2018/09/03/跨域请求：JSONP&&CORS/","content":"\n## JSONP\n\nJSONP 是 JSON with Padding 的略称。它是一个非官方的协议，它允许在服务器端集成 Script tags 返回至客户端，通过 javascript callback 的形式实现跨域访问（这仅仅是 JSONP 简单的实现形式）\n\nJSONP 的简单实现模式：创建一个回调函数，然后在远程服务上调用这个函数并且将 JSON 数据形式作为参数传递，完成回调。\n\n我们知道`script`，`link`，`img` 等标签引入外部资源，都是`GET`请求的，那么就决定了 **JSONP 一定是 GET**的。\n\n<!-- more -->\n\n### 原生 JS 实现 JSONP 的步骤：\n\n#### 客户端\n\n1. 定义获取数据后调用的回调函数\n2. 动态生成对服务端 JS 进行引用的代码\n   - 设置`url`为提供`jsonp`服务的`url`地址，并在该`url`中设置相关`callback`参数\n   - 创建`script`标签，并设置其`src`属性\n   - 把`script`标签加入`head`，此时调用开始。\n\n#### 服务端\n\n将客户端发送的`callback`参数作为函数名来包裹住`JSON`数据，返回数据至客户端。\n\n#### 例子：\n\n客户端代码：\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title></title>\n    <script type=\"text/javascript\">\n      // 得到航班信息查询结果后的回调函数\n      var flightHandler = function(data) {\n        alert(\n          \"你查询的航班结果是：票价 \" +\n            data.price +\n            \" 元，\" +\n            \"余票 \" +\n            data.tickets +\n            \" 张。\"\n        );\n      };\n      // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n      var url =\n        \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler\";\n      // 创建script标签，设置其属性\n      var script = document.createElement(\"script\");\n      script.setAttribute(\"src\", url);\n      // 把script标签加入head，此时调用开始\n      document.getElementsByTagName(\"head\")[0].appendChild(script);\n    </script>\n  </head>\n  <body></body>\n</html>\n```\n\n编码实现**动态查询**，而**这也正是 JSONP 客户端实现的核心部分**，本例中的重点也就在于如何完成 JSONP 调用的全过程。我们看到调用的`url`中传递了一个`code`参数，告诉服务器我要查的是 CA1998 次航班的信息，而`callback`参数则告诉服务器，我的本地回调函数叫做`flightHandler`，所以请把查询结果传入这个函数中进行调用。\nOK，服务器很聪明，这个叫做`flightResult.aspx`的页面生成了一段这样的代码提供给`jsonp.html`（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：\n\n```javascript\nflightHandler({\n  code: \"CA1998\",\n  price: 1780,\n  tickets: 5\n});\n```\n\n我们看到，传递给`flightHandler`函数的是一个`json`，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，JSONP 的执行全过程顺利完成！\n\n## CORS\n\n跨域资源共享([CORS](https://developer.mozilla.org/en-US/docs/Glossary/CORS)) 是一种机制，它使用额外的 [HTTP](https://developer.mozilla.org/en-US/docs/Glossary/HTTP) 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器**不同的域、协议或端口**请求一个资源时，资源会发起一个**跨域 HTTP 请求**。\n\nCORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。\n\n整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。\n\n因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。\n\n### 1.两种请求\n\n浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。\n\n只要同时满足以下两大条件，就属于简单请求。\n\n（1) 请求方法是以下三种方法之一：\n\n- HEAD\n- GET\n- POST\n\n（2）HTTP 的头信息不超出以下几种字段：\n\n- Accept\n- Accept-Language\n- Content-Language\n- Last-Event-ID\n- Content-Type：只限于三个值`application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain`\n\n凡是不同时满足上面两个条件，就属于非简单请求。\n\n浏览器对这两种请求的处理，是不一样的。\n\n### 2.简单请求\n\n- #### 基本流程\n\n对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个`Origin`字段。\n\n下面是一个例子，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加一个`Origin`字段。\n\n```http\nGET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n上面的头信息中，`Origin`字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。\n\n如果`Origin`指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含`Access-Control-Allow-Origin`字段（详见下文），就知道出错了，从而抛出一个错误，被`XMLHttpRequest`的`onerror`回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。\n\n如果`Origin`指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。\n\n```http\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n```\n\n上面的头信息之中，有三个与 CORS 请求相关的字段，都以`Access-Control-`开头。\n\n**（1）Access-Control-Allow-Origin**\n\n该字段是必须的。它的值要么是请求时`Origin`字段的值，要么是一个`*`，表示接受任意域名的请求。\n\n**（2）Access-Control-Allow-Credentials**\n\n该字段可选。它的值是一个布尔值，表示是否允许发送 Cookie。默认情况下，Cookie 不包括在 CORS 请求之中。设为`true`，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。这个值也只能设为`true`，如果服务器不要浏览器发送 Cookie，删除该字段即可。\n\n**（3）Access-Control-Expose-Headers**\n\n该字段可选。CORS 请求时，`XMLHttpRequest`对象的`getResponseHeader()`方法只能拿到 6 个基本字段：`Cache-Control`、`Content-Language`、`Content-Type`、`Expires`、`Last-Modified`、`Pragma`。如果想拿到其他字段，就必须在`Access-Control-Expose-Headers`里面指定。上面的例子指定，`getResponseHeader('FooBar')`可以返回`FooBar`字段的值。\n\n- #### withCredentials 属性\n\n上面说到，CORS 请求默认不发送 Cookie 和 HTTP 认证信息。如果要把 Cookie 发到服务器，一方面要服务器同意，指定`Access-Control-Allow-Credentials`字段。\n\n```http\nAccess-Control-Allow-Credentials: true\n```\n\n另一方面，开发者必须在 AJAX 请求中打开`withCredentials`属性。\n\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n```\n\n否则，即使服务器同意发送 Cookie，浏览器也不会发送。或者，服务器要求设置 Cookie，浏览器也不会处理。\n\n但是，如果省略`withCredentials`设置，有的浏览器还是会一起发送 Cookie。这时，可以显式关闭`withCredentials`。\n\n```javascript\nxhr.withCredentials = false;\n```\n\n需要注意的是，如果要发送 Cookie，`Access-Control-Allow-Origin`就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie 依然遵循同源政策，只有用服务器域名设置的 Cookie 才会上传，其他域名的 Cookie 并不会上传，且（跨源）原网页代码中的`document.cookie`也无法读取服务器域名下的 Cookie。\n\n### 3.非简单请求\n\n- #### 预检请求\n\n非简单请求是那种对服务器有特殊要求的请求，比如请求方法是`PUT`或`DELETE`，或者`Content-Type`字段的类型是`application/json`。\n\n非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为\"预检\"请求（preflight）。\n\n浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的`XMLHttpRequest`请求，否则就报错。\n\n下面是一段浏览器的 JavaScript 脚本。\n\n```javascript\nvar url = \"http://api.alice.com/cors\";\nvar xhr = new XMLHttpRequest();\nxhr.open(\"PUT\", url, true);\nxhr.setRequestHeader(\"X-Custom-Header\", \"value\");\nxhr.send();\n```\n\n上面代码中，HTTP 请求的方法是`PUT`，并且发送一个自定义头信息`X-Custom-Header`。\n\n浏览器发现，这是一个非简单请求，就自动发出一个\"预检\"请求，要求服务器确认可以这样请求。下面是这个\"预检\"请求的 HTTP 头信息。\n\n```http\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n\"预检\"请求用的请求方法是`OPTIONS`，表示这个请求是用来询问的。头信息里面，关键字段是`Origin`，表示请求来自哪个源。\n\n除了`Origin`字段，\"预检\"请求的头信息包括两个特殊字段。\n\n**（1）Access-Control-Request-Method**\n\n该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是`PUT`。\n\n**（2）Access-Control-Request-Headers**\n\n该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是`X-Custom-Header`。\n\n- #### 预检请求的回应\n\n服务器收到\"预检\"请求以后，检查了`Origin`、`Access-Control-Request-Method`和`Access-Control-Request-Headers`字段以后，确认允许跨源请求，就可以做出回应。\n\n```http\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n```\n\n上面的 HTTP 回应中，关键的是`Access-Control-Allow-Origin`字段，表示`http://api.bob.com`可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。\n\n```http\nAccess-Control-Allow-Origin: *\n```\n\n如果浏览器否定了\"预检\"请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被`XMLHttpRequest`对象的`onerror`回调函数捕获。控制台会打印出如下的报错信息。\n\n```bash\nXMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n```\n\n服务器回应的其他 CORS 相关字段如下。\n\n```http\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000\n```\n\n**（1）Access-Control-Allow-Methods**\n\n该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次\"预检\"请求。\n\n**（2）Access-Control-Allow-Headers**\n\n如果浏览器请求包括`Access-Control-Request-Headers`字段，则`Access-Control-Allow-Headers`字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在\"预检\"中请求的字段。\n\n**（3）Access-Control-Allow-Credentials**\n\n该字段与简单请求时的含义相同。\n\n**（4）Access-Control-Max-Age**\n\n该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是 20 天（1728000 秒），即允许缓存该条回应 1728000 秒（即 20 天），在此期间，不用发出另一条预检请求。\n\n- #### 浏览器的正常请求和回应\n\n一旦服务器通过了\"预检\"请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个`Origin`头信息字段。服务器的回应，也都会有一个`Access-Control-Allow-Origin`头信息字段。\n\n下面是\"预检\"请求之后，浏览器的正常 CORS 请求。\n\n```http\nPUT /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nX-Custom-Header: value\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n```\n\n上面头信息的`Origin`字段是浏览器自动添加的。\n\n下面是服务器正常的回应。\n\n```http\nAccess-Control-Allow-Origin: http://api.bob.com\nContent-Type: text/html; charset=utf-8\n```\n\n上面头信息中，`Access-Control-Allow-Origin`字段是每次回应都必定包含的。\n\n### 4.与 JSONP 的比较\n\nCORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。\n\nJSONP 只支持`GET`请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。\n","tags":["JavaScript","浏览器","跨域"],"categories":["JavaScript"]},{"title":"正则的扩展","url":"/2018/08/29/正则的扩展/","content":"\n# RegExp 构造函数\n\nRegExp 构造函数的参数有两种情况。\n\n1. 参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。\n2. 参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。\n   <!-- more -->\n\n```javascript\nvar regex = new RegExp(\"xyz\", \"i\");\n// 等价于\nvar regex = new RegExp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n```\n\nES6 中，如果 RegExp 构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。\n\n```javascript\nnew RegExp(/abc/gi, \"i\").flags;\n// \"i\"\n```\n\n# 字符串的正则方法\n\n字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和 split()。ES6 将这 4 个方法，在语言内部全部调用 RegExp 的实例方法，从而做到所有与正则相关的方法，全都定义在 RegExp 对象上。\n\n1. String.prototype.match 调用 RegExp.prototype[Symbol.match]\n2. String.prototype.replace 调用 RegExp.prototype[Symbol.replace]\n3. String.prototype.search 调用 RegExp.prototype[Symbol.search]\n4. String.prototype.split 调用 RegExp.prototype[Symbol.split]\n\n# u 修饰符\n\nES6 对正则表达式添加了 u 修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF 的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。\n\n## 点字符\n\n点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于 0xFFFF 的 Unicode 字符，点字符不能识别，必须加上 u 修饰符。\n\n```javascript\nvar s = '𠮷';\n\n/^.$/.test(s) // false\n/^.$/u.test(s) // true\n```\n\n## Unicode 字符表示法\n\nES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上 u 修饰符，才能识别当中的大括号，否则会被解读为量词。\n\n```javascript\n/\\u{61}/.test(\"a\") / // false\na /\nu.test(\"a\") / // true\n  𠮷 /\n  u.test(\"𠮷\"); // true\n```\n\n## 量词\n\n使用 u 修饰符后，所有量词都会正确识别码点大于 0xFFFF 的 Unicode 字符。\n\n```javascript\n/a{2}/.test('aa') // true\n/a{2}/u.test('aa') // true\n/𠮷{2}/.test('𠮷𠮷') // false\n/𠮷{2}/u.test('𠮷𠮷') // true\n```\n\n## 预定义模式\n\n\\S 是预定义模式，匹配所有非空白字符。只有加了 u 修饰符，它才能正确匹配码点大于 0xFFFF 的 Unicode 字符。\n\n```javascript\n/^\\S$/.test('𠮷') // false\n/^\\S$/u.test('𠮷') // true\n```\n\n## i 修饰符\n\n有些 Unicode 字符的编码不同，但是字型很相近，比如，\\u004B 与\\u212A 都是大写的 K。不加 u 修饰符，就无法识别非规范的 K 字符。\n\n```javascript\n/[a-z]/i.test(\"\\u212A\") / // false\n  [a - z] /\n  iu.test(\"\\u212A\"); // true\n```\n\n# RegExp.prototype.unicode 属性\n\n正则实例对象新增 unicode 属性，表示是否设置了 u 修饰符\n\n```javascript\nconst r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode; // false\nr2.unicode; // true\n```\n\n上面代码中，正则表达式是否设置了 u 修饰符，可以从 unicode 属性看出来。\n\n# y 修饰符\n\nES6 为正则表达式添加了 y 修饰符，叫做“粘连”（sticky）修饰符。y 修饰符的作用与 g 修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g 修饰符只要剩余位置中存在匹配就可，而 y 修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。\n\n```javascript\nvar s = \"aaa_aa_a\";\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s); // [\"aaa\"]\nr2.exec(s); // [\"aaa\"]\n\nr1.exec(s); // [\"aa\"]\nr2.exec(s); // null\n```\n\n单单一个 y 修饰符对 match 方法，只能返回第一个匹配，必须与 g 修饰符联用，才能返回所有匹配。\n\n```javascript\n\"a1a2a3\".match(/a\\d/y); // [\"a1\"]\n\"a1a2a3\".match(/a\\d/gy); // [\"a1\", \"a2\", \"a3\"]\n```\n\n# RegExp.prototype.sticky 属性\n\n与 y 修饰符相匹配，ES6 的正则实例对象多了 sticky 属性，表示是否设置了 y 修饰符。\n\n```javascript\nvar r = /hello\\d/y;\nr.sticky; // true\n```\n\n# RegExp.prototype.flags 属性\n\nES6 为正则表达式新增了 flags 属性，会返回正则表达式的修饰符。\n\n```javascript\n// ES5 的 source 属性\n// 返回正则表达式的正文\n/abc/gi.source /\n  // \"abc\"\n\n  // ES6 的 flags 属性\n  // 返回正则表达式的修饰符\n  abc /\n  ig.flags;\n// 'gi'\n```\n\n# s 修饰符：dotAll 模式\n\n正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 UTF-16 字符，这个可以用 u 修饰符解决；另一个是行终止符。\n行终止符，就是该字符表示一行的终结。以下四个字符属于”行终止符“。\n\n1. U+000A 换行符（\\n）\n2. U+000D 回车符（\\r）\n3. U+2028 行分隔符（line separator）\n4. U+2029 段分隔符（paragraph separator）\n   ES2018 引入 s 修饰符，使得.可以匹配任意单个字符。\n\n```javascript\n/foo.bar/s.test(\"foo\\nbar\"); // true\n```\n\n这被称为 dotAll 模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个 dotAll 属性，返回一个布尔值，表示该正则表达式是否处在 dotAll 模式。\n/s 修饰符和多行修饰符/m 不冲突，两者一起使用的情况下，.匹配所有字符，而^和\\$匹配每一行的行首和行尾。\n\n# 后行断言\n\n”先行断言“指的是，x 只有在 y 前面才匹配，必须写成/x(?=y)/。比如，只匹配百分号之前的数字，要写成/\\d+(?=%)/。\n”先行否定断言“指的是，x 只有不在 y 前面才匹配，必须写成/x(?!y)/。比如，只匹配不在百分号之前的数字，要写成/\\d+(?!%)/。\n“后行断言”正好与“先行断言”相反，x 只有在 y 后面才匹配，必须写成/(?<=y)x/。比如，只匹配美元符号之后的数字，要写成/(?<=\\$)\\d+/。\n”后行否定断言“则与”先行否定断言“相反，x 只有不在 y 后面才匹配，必须写成/(?<!y)x/。比如，只匹配不在美元符号后面的数字，要写成/(?<!\\$)\\d+/。\n\n```javascript\nconst RE_DOLLAR_PREFIX = /(?<=\\$)foo/g;\n\"$foo %foo foo\".replace(RE_DOLLAR_PREFIX, \"bar\");\n// '$bar %foo foo'\n```\n\n“后行断言”的实现，需要先匹配/(?<=y)x/的 x，然后再回到左边，匹配 y 的部分。这种“先右后左”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。\n首先，后行断言的组匹配，与正常情况下结果是不一样的。\n\n```javascript\n/(?<=(\\d+)(\\d+))$/.exec('1053') // [\"\", \"1\", \"053\"]\n/^(\\d+)(\\d+)$/.exec('1053') // [\"1053\", \"105\", \"3\"]\n```\n\n上面代码中，需要捕捉两个组匹配。没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是 105 和 3。而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，第一个括号只能捕获一个字符，所以结果是 1 和 053。\n其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。\n\n# Unicode 属性类\n\nES2018 引入了一种新的类的写法\\p{...}和\\P{...}，允许正则表达式匹配符合 Unicode 某种属性的所有字符。Unicode 属性类要指定属性名和属性值。对于某些属性，可以只写属性名，或者只写属性值。\\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。这两种类只对 Unicode 有效，所以使用的时候一定要加上 u 修饰符。如果不加 u 修饰符，正则表达式使用\\p 和\\P 会报错，ECMAScript 预留了这两个类。\n\n```javascript\n// 匹配所有空格\n\\p{White_Space}\n\n// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w\n[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]\n\n// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W\n[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Connector_Punctuation}\\p{Join_Control}]\n\n// 匹配 Emoji\n/\\p{Emoji_Modifier_Base}\\p{Emoji_Modifier}?|\\p{Emoji_Presentation}|\\p{Emoji}\\uFE0F/gu\n\n// 匹配所有的箭头字符\nconst regexArrows = /^\\p{Block=Arrows}+$/u;\nregexArrows.test('←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩') // true\n```\n\n# 具名组匹配\n\n正则表达式使用圆括号进行组匹配。\n\n```javascript\nconst RE_DATE = /(\\d{4})-(\\d{2})-(\\d{2})/;\n\nconst matchObj = RE_DATE.exec(\"1999-12-31\");\nconst year = matchObj[1]; // 1999\nconst month = matchObj[2]; // 12\nconst day = matchObj[3]; // 31\n```\n\n正则表达式里面有三组圆括号。使用 exec 方法，就可以将这三组匹配结果提取出来。组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如 matchObj[1]）引用，要是组的顺序变了，引用的时候就必须修改序号。ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。\n\n```javascript\nconst RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchObj = RE_DATE.exec(\"1999-12-31\");\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n```\n\n“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?<year>），然后就可以在 exec 方法返回结果的 groups 属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。具名组匹配等于为每一组匹配加上了 ID，便于描述匹配的目的。如果组的顺序变了，也不用改变匹配后的处理代码。如果具名组没有匹配，那么对应的 groups 对象属性会是 undefined。\n\n## 解构赋值和替换\n\n具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。字符串替换时，使用\\$<组名>引用具名组。\n\n```javascript\nlet re = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u;\n\n\"2015-01-02\".replace(re, \"$<day>/$<month>/$<year>\");\n// '02/01/2015'\n```\n\n## 引用\n\n如果要在正则表达式内部引用某个“具名组匹配”，可以使用\\k<组名>的写法或者数字引用（\\1）的写法。\n\n```javascript\nconst RE_TWICE = /^(?<word>[a-z]+)!\\k<word>!\\1$/;\nRE_TWICE.test(\"abc!abc!abc\"); // true\nRE_TWICE.test(\"abc!abc!ab\"); // false\n```\n\n# String.prototype.matchAll\n\n如果一个正则表达式在字符串里面有多个匹配，现在一般使用 g 修饰符或 y 修饰符，在循环里面逐一取出。或者使用 String.prototype.matchAll 方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。\n\n```javascript\nconst string = \"test1test2test3\";\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n// [\"test1\", \"e\", \"st1\", \"1\", index: 0, input: \"test1test2test3\"]\n// [\"test2\", \"e\", \"st2\", \"2\", index: 5, input: \"test1test2test3\"]\n// [\"test3\", \"e\", \"st3\", \"3\", index: 10, input: \"test1test2test3\"]\n```\n\n上面代码中，由于 string.matchAll(regex)返回的是遍历器，所以可以用 for...of 循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。\n遍历器转为数组是非常简单的，使用...运算符和 Array.from 方法就可以了。\n\n```javascript\n// 转为数组方法一\n[...string.matchAll(regex)];\n\n// 转为数组方法二\nArray.from(string.matchAll(regex));\n```\n","tags":["JavaScript","ES6","正则"],"categories":["ES6"]},{"title":"柯里化&&闭包","url":"/2018/08/16/柯里化&&闭包/","content":"\n# 柯里化\n\n## 闭包实现\n\nmulti(2)(3)(4)=24\n\n```javascript\nfunction multi(a) {\n  return function(b) {\n    return function(c) {\n      return a * b * c;\n    };\n  };\n}\n```\n\n<!-- more -->\n\n## 函数柯里化\n\n函数柯里化指的是将能够接收多个参数的函数转化为接收单一参数的函数，并且返回接收余下参数且返回结果的新函数的技术。\n\n函数柯里化的主要作用和特点就是参数复用、提前返回和延迟执行。\n\n### 普通版\n\n把固定的函数变成柯里化。如果传入的参数个数小于 fn 所需要的形参个数，就继续执行 curry 函数接收参数，如果参数达到 fn 所需要的形参个数，就执行柯里化了的函数。\n\n```javascript\nfunction curry(fn, args) {\n  var length = fn.length;\n  var args = args || [];\n  return function() {\n    newArgs = args.concat(Array.prototype.slice.call(arguments));\n    if (newArgs.length < length) {\n      return curry.call(this, fn, newArgs);\n    } else {\n      return fn.apply(this, newArgs);\n    }\n  };\n}\nfunction multiFn(a, b, c) {\n  return a * b * c;\n}\nvar multi = curry(multiFn);\nmulti(2)(3)(4);\nmulti(2, 3, 4);\nmulti(2)(3, 4);\nmulti(2, 3)(4);\n```\n\n### 优化版\n\n不需要事先知道函数形参个数。可以任意参数个数调用。（重写 valueOf 函数）\n\n```javascript\nfunction multi() {\n  var args = Array.prototype.slice.call(arguments);\n  var fn = function() {\n    var newArgs = args.concat(Array.prototype.slice.call(arguments));\n    return multi.apply(this, newArgs);\n  };\n  fn.valueOf = function() {\n    return args.reduce(function(a, b) {\n      return a * b;\n    });\n  };\n  return fn;\n}\n```\n\n![img](https://tva1.sinaimg.cn/large/006y8mN6ly1g6ixjy4e79j30ti0ey74z.jpg)\n\n# 闭包\n\n```javascript\nvar func = [];\nfor (var i = 0; i < 10; i++) {\n  func[i] = function() {\n    return i;\n  };\n}\nconsole.log(func[6]); //10\n```\n\n改成\n\n```javascript\nvar func = [];\n\nfor (var i = 0; i < 10; i++) {\n  func[i] = (function() {\n    return (function() {\n      return i;\n    })();\n  })();\n}\nconsole.log(func[6]); //6\n```\n","tags":["JavaScript"],"categories":["JavaScript"]},{"title":"字符串的扩展","url":"/2018/08/09/字符串的扩展/","content":"\n# 字符的 Unicode 表示法\n\nJavaScript 允许采用\\uxxxx 形式表示一个字符，其中 xxxx 表示字符的 Unicode 码点。码点在\\u0000~\\uFFFF 之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。\n\n<!-- more -->\n\n```javascript\n\"\\u0061\";\n// \"a\"\n\n\"\\uD842\\uDFB7\";\n// \"𠮷\"\n\n\"\\u20BB7\";\n// \" 7\"\n```\n\n如果直接在\\u 后面跟上超过 0xFFFF 的数值（比如\\u20BB7），JavaScript 会理解成\\u20BB+7。由于\\u20BB 是一个不可打印字符，所以只会显示一个空格，后面跟着一个 7。ES6 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。\n\n# codePointAt()\n\ncodePointAt 方法会正确返回 32 位的 UTF-16 字符的码点。对于那些两个字节储存的常规字符，它的返回结果与 charCodeAt 方法相同。例如，汉字“𠮷”（注意，这个字不是“吉祥”的“吉”）的码点是 0x20BB7，UTF-16 编码为 0xD842 0xDFB7（十进制为 55362 57271），需要 4 个字节储存。对于这种 4 个字节的字符，JavaScript 不能正确处理，字符串长度会误判为 2，而且 charAt 方法无法读取整个字符，charCodeAt 方法只能分别返回前两个字节和后两个字节的值。ES6 提供了 codePointAt 方法，能够正确处理 4 个字节储存的字符，返回一个字符的码点（codePointAt 方法返回的是码点的十进制值）。\n\n```javascript\nvar s = \"𠮷\";\n\ns.length; // 2\ns.charAt(0); // ''\ns.charAt(1); // ''\ns.charCodeAt(0); // 55362\ns.charCodeAt(1); // 57271\n\nlet a = \"𠮷a\";\n\na.codePointAt(0); // 134071\na.codePointAt(1); // 57271\n\na.codePointAt(2); // 97\n```\n\ncodePointAt 方法的参数，是字符在字符串中的位置（从 0 开始）。上面代码中，JavaScript 将“𠮷 a”视为三个字符，codePointAt 方法在第一个字符上，正确地识别了“𠮷”，返回了它的十进制码点 134071（即十六进制的 20BB7）。在第二个字符（即“𠮷”的后两个字节）和第三个字符“a”上，codePointAt 方法的结果与 charCodeAt 方法相同。\n\n# String.fromCodePoint()\n\nES5 提供 String.fromCharCode 方法，用于从码点返回对应字符，但是这个方法不能识别 32 位的 UTF-16 字符（Unicode 编号大于 0xFFFF）。ES6 提供了 String.fromCodePoint 方法，可以识别大于 0xFFFF 的字符，弥补了 String.fromCharCode 方法的不足。在作用上，正好与 codePointAt 方法相反。且如果 String.fromCodePoint 方法有多个参数，则它们会被合并成一个字符串返回。\n\n```javascript\nString.fromCodePoint(0x20bb7);\n// \"𠮷\"\nString.fromCodePoint(0x78, 0x1f680, 0x79) === \"x\\uD83D\\uDE80y\";\n// true\n```\n\n# 字符串的遍历器接口\n\nES6 为字符串添加了遍历器接口，使得字符串可以被 for...of 循环遍历,并且遍历器最大的优点是可以识别大于 0xFFFF 的码点。\n\n```javascript\nfor (let codePoint of \"foo\") {\n  console.log(codePoint);\n}\n// \"f\"\n// \"o\"\n// \"o\"\n\nfor (let i of text) {\n  console.log(i);\n}\n// \"𠮷\"\n```\n\n# at()\n\nES5 对字符串对象提供 charAt 方法，返回字符串给定位置的字符。该方法不能识别码点大于 0xFFFF 的字符。字符串实例的 at 方法，可以识别 Unicode 编号大于 0xFFFF 的字符，返回正确的字符。\n\n```javascript\n\"abc\".at(0); // \"a\"\n\"𠮷\".at(0); // \"𠮷\"\n```\n\n# normalize()\n\n在字符排序或比较时，会出现一种情况，就是“等效”。\n\n1. 规范的等效是指，无论从哪个角度看，两个序列的码位都是没有区别的。\n2. 兼容关系，两个互相兼容的码位序列看起来不同，但是在特定的情况下可以相互交换使用。\n   例如 Ǒ（\\u01D1）和 O（\\u004F） ˇ（\\u030C）两个字符的组合（\\u004F\\u030C），在视觉和语义上其实是等效的。\n\nES6 提供字符串实例的 normalize()方法，用来将字符的不同表示方法统一为同样的形式，这称为 Unicode 正规化。normalize 方法可以接受一个参数来指定 normalize 的方式，参数的四个可选值如下。\n\n1. NFC，默认参数，表示“标准等价合成”（Normalization Form Canonical Composition），返回多个简单字符的合成字符。所谓“标准等价”指的是视觉和语义上的等价。\n2. NFD，表示“标准等价分解”（Normalization Form Canonical Decomposition），即在标准等价的前提下，返回合成字符分解的多个简单字符。\n3. NFKC，表示“兼容等价合成”（Normalization Form Compatibility Composition），返回合成字符。所谓“兼容等价”指的是语义上存在等价，但视觉上不等价，比如“囍”和“喜喜”。（这只是用来举例，normalize 方法不能识别中文。）\n4. NFKD，表示“兼容等价分解”（Normalization Form Compatibility Decomposition），即在兼容等价的前提下，返回合成字符分解的多个简单字符。\n\n```javascript\n\"\\u01D1\".normalize() === \"\\u004F\\u030C\".normalize();\n// true\n```\n\n不过，normalize 方法目前不能识别三个或三个以上字符的合成。这种情况下，还是只能使用正则表达式，通过 Unicode 编号区间判断。\n\n# includes(), startsWith(), endsWith()\n\nincludes()：返回布尔值，表示是否找到了参数字符串。\nstartsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。\nendsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。\n这三个方法都支持第二个参数，表示开始搜索的位置。使用第二个参数 n 时，endsWith 的行为与其他两个方法有所不同。它针对前 n 个字符，而其他两个方法针对从第 n 个位置直到字符串结束。\n\n```javascript\nlet s = \"Hello world!\";\n\ns.startsWith(\"world\", 6); // true\ns.endsWith(\"Hello\", 5); // true\ns.includes(\"Hello\", 6); // false\n```\n\n# repeat()\n\nrepeat 方法返回一个新字符串，表示将原字符串重复 n 次。参数如果是小数，会被取整。如果 repeat 的参数是负数或者 Infinity，会报错。参数 NaN 等同于 0。如果 repeat 的参数是字符串，则会先转换成数字。\n\n```javascript\n\"x\".repeat(3); // \"xxx\"\n\"hello\".repeat(2); // \"hellohello\"\n\"na\".repeat(0); // \"\"\n\"na\".repeat(2.9); // \"nana\"\n\n\"na\".repeat(Infinity);\n// RangeError\n\"na\".repeat(-1);\n// RangeError\n\n\"na\".repeat(NaN); // \"\"\n\n\"na\".repeat(\"na\"); // \"\"\n\"na\".repeat(\"3\"); // \"nanana\"\n```\n\n# padStart()，padEnd()\n\n如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。padStart 和 padEnd 一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。如果省略第二个参数，默认使用空格补全长度。\n\n```javascript\n\"x\".padStart(4, \"ab\"); // 'abax'\n\"x\".padEnd(5, \"ab\"); // 'xabab'\n\n\"xxx\".padStart(2, \"ab\"); // 'xxx'\n\"xxx\".padEnd(2, \"ab\"); // 'xxx'\n\n\"abc\".padStart(10, \"0123456789\");\n// '0123456abc'\n\n\"x\".padStart(4); // '   x'\n\"x\".padEnd(4); // 'x   '\n```\n\n# matchAll()\n\nmatchAll 方法返回一个正则表达式在当前字符串的所有匹配\n\n# 模板字符串\n\n模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。嵌入变量，需要将变量名写在\\${}之中。大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的 toString 方法。如果模板字符串中的变量没有声明，将报错。\n如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。\n\n```javascript\n// 普通字符串\n`In JavaScript '\\n' is a line-feed.``In JavaScript this is // 多行字符串\n not legal.`;\n\nconsole.log(`string text line 1\nstring text line 2`);\n\n// 字符串中嵌入变量\nlet name = \"Bob\",\n  time = \"today\";\n`Hello ${name}, how are you ${time}?`;\n\nlet greeting = `\\`Yo\\` World!`;\n```\n\n如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中\n\n```html\n$('#list').html(`\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n`);\n```\n\n所有模板字符串的空格和换行，都是被保留的，比如\"< ul>\"标签前面会有一个换行。如果你不想要这个换行，可以使用 trim 方法消除它。\n如果需要引用模板字符串本身，在需要时执行，可以像下面这样写。\n\n```javascript\n// 写法一\nlet str = \"return \" + \"`Hello ${name}!`\";\nlet func = new Function(\"name\", str);\nfunc(\"Jack\"); // \"Hello Jack!\"\n\n// 写法二\nlet str = \"(name) => `Hello ${name}!`\";\nlet func = eval.call(null, str);\nfunc(\"Jack\"); // \"Hello Jack!\"\n```\n\n# 标签模板\n\n模板字符串，紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。\n标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。\n如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。\n\n```javascript\nlet a = 5;\nlet b = 10;\n\ntag`Hello ${a + b} world ${a * b}`;\n// 等同于\ntag([\"Hello \", \" world \", \"\"], 15, 50);\n```\n\n上面代码中，模板字符串前面有一个标识名 tag，它是一个函数。整个表达式的返回值，就是 tag 函数处理模板字符串后的返回值。\n函数 tag 依次会接收到多个参数。<font color=\"#04B486\">tag 函数的第一个参数是一个数组，该数组的成员是模板字符串中那些没有变量替换的部分，也就是说，变量替换只发生在数组的第一个成员与第二个成员之间、第二个成员与第三个成员之间，以此类推。tag 函数的其他参数，都是模板字符串各个变量被替换后的值。</font>\n\n“标签模板”的一个重要应用，就是过滤 HTML 字符串，防止用户输入恶意内容。\n\n```javascript\nlet message = SaferHTML`<p>${sender} has sent you a message.</p>`;\n\nfunction SaferHTML(templateData) {\n  let s = templateData[0];\n  for (let i = 1; i < arguments.length; i++) {\n    let arg = String(arguments[i]);\n\n    // Escape special characters in the substitution.\n    s += arg\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\");\n\n    // Don't escape special characters in the template.\n    s += templateData[i];\n  }\n  return s;\n}\n```\n\n上面代码中，sender 变量往往是用户提供的，经过 SaferHTML 函数处理，里面的特殊字符都会被转义。\n\n标签模板的另一个应用，就是多语言转换（国际化处理）。多语言转换（国际化处理）。可以使用标签模板，在 JavaScript 语言之中嵌入其他语言。\n\n模板处理函数的第一个参数（模板字符串数组），还有一个 raw 属性。保存的是转义后的原字符串。\n\n```javascript\ntag`First line\\nSecond line`;\n\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n  // strings.raw[0] 为 \"First line\\\\nSecond line\"\n  // 打印输出 \"First line\\nSecond line\"\n}\n```\n\n# String.raw()\n\nES6 还为原生的 String 对象，提供了一个 raw 方法。\nString.raw 方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。如果原字符串的斜杠已经转义，那么 String.raw 会进行再次转义。\n\n```javascript\nString.raw`Hi\\n${2 + 3}!`;\n// 返回 \"Hi\\\\n5!\"\n\nString.raw`Hi\\u000A!`;\n// 返回 \"Hi\\\\u000A!\"\n\nString.raw`Hi\\\\n`;\n// 返回 \"Hi\\\\\\\\n\"\n```\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"递归与尾递归","url":"/2018/07/23/递归与尾递归/","content":"\n# 递归的问题\n\n函数的递归调用是通过栈来实现的，每一次函数调用都会把当前函数的状态，如变量，返回地址保存在栈中一直到函数返回才能出栈。因为程序运行时，栈的大小一般很有限（在 chrome 中运行下面的代码可以计算出 chrome 给每个线程的栈大小），因此如果递归调用的层次如果过多，将会使栈区溢出。\n\n<!-- more -->\n\n# 尾递归\n\n尾递归就是函数最后的语句是调用函数自身，但调用自己的时候，已经不再需要上一个函数的环境了。\n\n```javascript\nfunction factorial(n,a){\n\tif(n<=0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn a;\n\treturn factorial(n-1,a*n);\n\n```\n\n相比较之前一般形式的递归代码，有两个不同的地方：\n\n- 递归调用时，把 n 当做参数传给了递归函数，无需等待递归调用返回后参与计算。\n- 最终的计算结果在最后一次递归调用后产生，无需回溯。\n\n我们通过这种形式，解决了需要函数回跳才能计算的问题，但最后产生的计算结果仍然需要层层的回调，但这种代码的形式对于普通的递归来说，编译器更容易对其进行优化。这种特殊的递归叫做尾递归，从递归代码形式上看，它自身的调用是函数的最后一个操作。尾递归的目的是为了优化，而优化的目标是减少栈的空间。\n\n**尾递归是递归的一种优化**\n\n按照尾递归的定义，尾递归就至少必须解决一般递归的两个问题：\n\n- 不能重复计算\n- 重复利用栈空间\n\n然而尾递归是为编译器优化的目的，所以还要依赖于编译器的实现，如果一种语言不支持尾递归，那么尾递归也就仅仅是个形式上递归了，JavaScript 就是这样的语言，因为它无法优化栈空间的利用。\n\n实际上尾递归一直被看作一种编译技巧，特别是对于函数式编程语言来说，尾递归的编译器实现做当做的一种必须的标准\n\n# es6 中的尾调用优化\n\n尾调用被识别出来，重复利用了已存在的栈结构来进行递归，移除了之前函数调用的本地变量和状态。\n\n如果使用了**BABEL**，它会直接、自递归地处理尾调用。\n\n# 爆栈问题解决\n\n递归改循环\n","tags":["JavaScript","算法"],"categories":["算法"]},{"title":"变量的解构赋值","url":"/2018/07/16/变量的解构赋值/","content":"\n# 数组的解构赋值\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n<!-- more -->\n\n```javascript\nlet [a, b, c] = [1, 2, 3];\n```\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。\n\n## 解构不成功\n\n如果解构不成功，变量的值就等于 undefined。\n\n```javascript\nlet [foo] = [];\nlet [bar, foo] = [1];\n```\n\n以上两种情况都属于解构不成功，foo 的值都会等于 undefined。\n\n## 不完全解构\n\n等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx; // 1\ny; // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na; // 1\nb; // 2\nd; // 4\n```\n\n## 等号右边不是数组\n\n如果等号的右边不是数组，那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n```\n\n只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n## 默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = [];\nfoo; // true\n\nlet [x, y = \"b\"] = [\"a\"]; // x='a', y='b'\nlet [x, y = \"b\"] = [\"a\", undefined]; // x='a', y='b'\n```\n\nES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于 undefined，默认值才会生效。null 不严格等于 undefined。所以，如果数组成员是 null，默认值则不会生效。\n\n```javascript\nlet [x = 1] = [undefined];\nx; // 1\n\nlet [x = 1] = [null];\nx; // null\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```javascript\nlet [x = y, y = 1] = []; // ReferenceError: y is not defined\n```\n\n上式之所以会报错，是因为 x 用 y 做默认值时，y 还没有声明。\n\n# 对象的解构赋值\n\n数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo; // \"aaa\"\nbar; // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz; // undefined\n\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz; // \"aaa\"\n\nlet obj = { first: \"hello\", last: \"world\" };\nlet { first: f, last: l } = obj;\nf; // 'hello'\nl; // 'world'\n```\n\n对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz; // \"aaa\"\nfoo; // error: foo is not defined\n```\n\n上面代码中，foo 是匹配的模式，baz 才是变量。真正被赋值的是变量 baz，而不是模式 foo。\n\n## 解构失败\n\n如果解构失败，变量的值等于 undefined。\n\n```javascript\nlet { foo } = { bar: \"baz\" };\nfoo; // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nlet {\n  foo: { bar }\n} = { baz: \"baz\" };\n```\n\n上面代码中，等号左边对象的 foo 属性，对应一个子对象。该子对象的 bar 属性，解构时会报错。原因很简单，因为 foo 这时等于 undefined，再取子属性就会报错。\n\n## 默认值\n\n对象的解构也可以指定默认值。默认值生效的条件是，对象的属性值严格等于 undefined。\n\n```javascript\nvar { x = 3 } = { x: undefined };\nx; // 3\n\nvar { x = 3 } = { x: null };\nx; // null\n```\n\n上面代码中，属性 x 等于 null，因为 null 与 undefined 不严格相等，所以是个有效的赋值，导致默认值 3 不会生效。\n\n# 字符串的解构赋值\n\n字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = \"hello\";\na; // \"h\"\nb; // \"e\"\nc; // \"l\"\nd; // \"l\"\ne; // \"o\"\n\nlet { length: len } = \"hello\";\nlen; // 5\n```\n\n# 数值和布尔值的解构赋值\n\n等号右边是数值和布尔值，则会先转为对象。\n解构赋值的规则是，只要等号右边的值不是对象或数组，都会先将其转为对象。由于 undefined 和 null 无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null; // TypeError\n```\n\n# 函数参数的解构赋值\n\n```javascript\nfunction add([x, y]) {\n  return x + y;\n}\nadd([1, 2]); // 3\n\n[[1, 2], [3, 4]].map(([a, b]) => a + b);\n// [ 3, 7 ]\n```\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({ x = 0, y = 0 } = {}) {\n  return [x, y];\n}\n\nmove({ x: 3, y: 8 }); // [3, 8]\nmove({ x: 3 }); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n```\n\n上面代码中，函数 move 的参数是一个对象，通过对这个对象进行解构，得到变量 x 和 y 的值。如果解构失败，x 和 y 等于默认值。\n\n```javascript\nfunction move({ x, y } = { x: 0, y: 0 }) {\n  return [x, y];\n}\n\nmove({ x: 3, y: 8 }); // [3, 8]\nmove({ x: 3 }); // [3, undefined]\nmove({}); // [undefined, undefined]\nmove(); // [0, 0]\n```\n\n上面代码是为函数 move 的参数指定默认值，而不是为变量 x 和 y 指定默认值，所以会得到与前一种写法不同的结果。\n","tags":["JavaScript","ES6"],"categories":["ES6"]},{"title":"var，let和const声明及区别","url":"/2018/07/04/var，let和const声明及区别/","content":"\n# var 声明\n\n在函数作用域或全局作用域中通过 var 声明的变量，都会被当成在当前作用域顶部声明的变量。这就是提升（Hoisting）机制。\n\n<!-- more -->\n\n例如：\n\n```javascript\nfuction getValue(condition){\n    if(condition){\n        var value=\"blue\";\n        //其他代码\n        return value;\n    }\n    else{\n        //此处可以访问变量value，其值为undefined\n        return null;\n    }\n    //此处可以访问变量value，其值为undefined\n}\n```\n\n事实上，在预编译阶段，JavaScript 引擎会将上面的函数修改为下面这样：\n\n```javascript\nfuction getValue(condition){\n    var value;\n    if(condition){\n        value=\"blue\";\n        //其他代码\n        return value;\n    }\n    else{\n        //此处可以访问变量value，其值为undefined\n        return null;\n    }\n    //此处可以访问变量value，其值为undefined\n}\n```\n\n变量 value 的声明会被提升至函数顶部，而初始化操作依然留在原处执行。这样，就意味着，在函数的其他部分，else 子句中或者 if-else 外，也能访问到 value 变量，而由于此时 value 变量并未被初始化赋值，所以访问到值为 undefined。\n\n# 块级声明\n\nES6 中引入块级作用域来强化对变量生命周期的控制。\n块级声明用于声明在指定块的作用域之外无法访问的变量。块级作用域（词法作用域）存在于：\n\n1. 函数内部\n2. 块中（字符{和}之间的区域）\n\n## let 声明\n\nlet 声明的用法与 var 相同。用 let 代替 var 来声明变量，就可以把变量的作用域限制在当前代码块中。\nlet 声明<font color=\"#DC143C\">不会被提升</font>，因此通常将 let 声明语句放在封闭代码块的顶部，以便整个代码块都可以访问。\n\n```javascript\nfuction getValue(condition){\n    if(condition){\n        var value=\"blue\";\n        //其他代码\n        return value;\n    }\n    else{\n        //变量value在此处不存在\n        return null;\n    }\n    //变量value在此处不存在\n}\n```\n\nlet 声明后，不会被提升至函数顶部。因此执行流离开 if 块之后，value 立刻被销毁，如果 condition 的值为 false，就永远不会声明并初始化 value。并且，假设作用域中已经存在了某个标识符，此时再用 let 关键字声明它，就会抛出错误：\n\n```javascript\nvar count = 30;\n//抛出语法错误\nlet count = 40;\n```\n\n在同一作用域中不能用 let 重复定义已经存在的标识符，所以此处使用 let 声明会抛出错误。但如果当前作用域内内嵌另一个作用域，就可在内嵌的作用域中使用 let 声明同名变量。\n例如：\n\n```javascript\nvar count = 30;\nif (condition) {\n  //不会抛出错误\n  let count = 40;\n}\n```\n\n此时，if 内部块中的 count 会遮蔽全局作用域中的 count，而 var 声明的 count 只能在 if 块外访问到。\n\n## const 声明\n\n使用 const 声明的是常量，其值一旦被设定后不可更改。因此每个通过 const 声明的常量必须在声明的同时被初始化。\n\n```javascript\n//有效的常量\nconst max=30;\n\n//语法错误，常量未初始化\nconst name;\n```\n\nconst 和 let 声明都是块级标识符，所以常量也只在当前的代码块内有效，一旦执行到代码块外会被立即销毁。并且，常量也不会被提升至作用域顶部。同样，与 let 相似，在同一作用域用 const 声明已经存在的标识符，也会导致语法错误。\n\n如上所述，const 定义的值一旦被设定后不可更改，无论在严格模式还是非严格模式下，都不可以为 const 定义的常量再赋值，否则会抛出语法错误：\n\n```javascript\nconst max = 50;\n//抛出语法错误\nmax = 30;\n```\n\n然而，与其他语言中的常量不同的是，JavaScript 中的常量，如果是对象，则对象的值可以修改，也就是 const 声明<font color=\"#DC143C\">不允许修改绑定，但允许修改值</font>这也意味着，const 声明对象后，可以修改对象的属性。const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const 只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n\n```javascript\nconst person={\n    name:\"Nicholas\";\n};\n\n//可以修改对象属性的值\nperson.name=\"Greg\";\n\n//抛出语法错误\nperson={\n    name:\"Greg\";\n};\n```\n\n如果真的想将对象冻结，应该使用 Object.freeze 方法。\n\n```javascript\nconst foo = Object.freeze({});\n\n// 常规模式时，下面一行不起作用；\n// 严格模式时，该行会报错\nfoo.prop = 123;\n```\n\n上面代码中，常量 foo 指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。\n除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。\n\n```javascript\nvar constantize = obj => {\n  Object.freeze(obj);\n  Object.keys(obj).forEach((key, i) => {\n    if (typeof obj[key] === \"object\") {\n      constantize(obj[key]);\n    }\n  });\n};\n```\n\n## 临时死区（Temporal Dead Zone）\n\n临时死区常被描述 let 和 const 的不提升的效果。JavaScript 引擎在扫描代码发现变量声明时，要么将它们提升至作用域顶部（遇到 var 声明时），要么将声明放到 TDZ 中（遇到 let 和 const 声明时）。访问 TDZ 中的变量会触发运行错误。只有在执行过变量声明语句后，变量才会从 TDZ 中移出，然后方可正常访问。ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n```javascript\nif (condition) {\n  console.log(typeof value); //引用错误！\n  let value = \"blue\";\n}\n```\n\n但在 let 声明的作用域外对该变量使用 typeof 则不会报错：\n\n```javascript\nconsole.log(typeof value); //\"undefined\"\n\nif (condition) {\n  let value = \"blue\";\n}\n```\n\ntypeof 是在声明变量 value 的代码块外执行的，此时 value 并不在 TDZ 中，也就意味着不存在 value 这个绑定，typeof 操作最终返回\"undefined\"。\n\n# 循环中的块级作用域绑定\n\n先看这段代码：\n\n```javascript\nvar funcs = [];\n\nfor (var i = 0; i < 10; i++) {\n  funcs.push(function() {\n    console.log(i);\n  });\n}\n\nfuncs.forEach(function(func) {\n  func(); //输出10次数字10\n});\n```\n\n预想结果是输出数字 0 ～ 9，但是因为循环里的每次迭代同时共享着 i，循环内部创建的函数全部都保存了对相同变量的引用。循环结束时变量 i 的值为 10，所以每次调用 console.log（i）时都会输出数字 10。\n而使用 let 声明，每次迭代循环都会创建一个新变量，并以之前的迭代中同名变量的值将其初始化，得到预期的效果。\n\n```javascript\nvar funcs = [];\n\nfor (let i = 0; i < 10; i++) {\n  funcs.push(function() {\n    console.log(i);\n  });\n}\n\nfuncs.forEach(function(func) {\n  func(); //输出0，1，2，……，9\n});\n```\n\n当前的 i 只在本轮循环有效，所以每一次循环的 i 其实都是一个新的变量，JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量 i 时，就在上一轮循环的基础上进行计算。另外，for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。\nconst 也是同样，但在循环中不能修改 const 声明的变量，否则会抛出错误。\n\n# 全局作用域绑定\n\n当 var 被用在全局作用域时，它会创建一个新的全局变量作为全局对象（浏览器环境中的 window 对象）的属性。这意味着，用 var 很可能会无意中覆盖一个已经存在的全局属性。例如：\n\n```javascript\n//在浏览器中\nvar RegExp = \"Hello!\";\nconsole.log(window.RegExp); //\"Hello!\"\n```\n\n全局对象定义在 RegExp 定义在 window 上，但不能幸免<font color=\"#DC143C\">被 var 覆盖，成为 window 的属性。</font>\n但如果在全局作用域中使用 let 或者 const，会在全局作用域下创建一个新的绑定，但该绑定不会添加全局对象的属性。<font color=\"#DC143C\">用 let 或 const 不能覆盖全局变量，只能遮蔽它。</font>\n\n```javascript\n//在浏览器中\nlet RegExp = \"Hello!\";\nconsole.log(RegExp); //\"Hello!\"\nconsole.log(window.RegExp === RegExp); //false\n```\n\n这里 let 声明的 RegExp 创建了一个绑定并遮蔽了全局的 RegExp 变量，但 window.RegExp 和 RegExp 并不相同，说明它不会破坏全局作用域，不会为全局对象创建属性。\n\n# ES6 声明变量的六种方法\n\nES5 只有两种声明变量的方法：var 命令和 function 命令。ES6 除了添加 let 和 const 命令，还有另外两种声明变量的方法：import 命令和 class 命令。所以，ES6 一共有 6 种声明变量的方法。\n","tags":["JavaScript","ES6"],"categories":["ES6"]}]